#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sun Jan  8 18:08:02 2017 by generateDS.py version 2.22a.
#
# Command line options:
#   ('-f', '')
#   ('-o', 'app/SCHEMA_LAYOUTS/ire-7-7.py')
#   ('-s', 'ItemRegistry.py')
#   ('--super', 'ItemRegistries')
#
# Command line arguments:
#   app/SCHEMAS/ire-7.7.xsd
#
# Command line:
#   generateDS/generateDS.py -f -o "app/SCHEMA_LAYOUTS/ire-7-7.py" -s "ItemRegistry.py" --super="ItemRegistries" app/SCHEMAS/ire-7.7.xsd
#
# Current working directory (os.getcwd()):
#   document-scorecard-v2
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ItemRegistries(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemRegistry=None):
        self.original_tagname_ = None
        self.ItemRegistry = ItemRegistry
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemRegistries)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemRegistries.subclass:
            return ItemRegistries.subclass(*args_, **kwargs_)
        else:
            return ItemRegistries(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemRegistry(self): return self.ItemRegistry
    def set_ItemRegistry(self, ItemRegistry): self.ItemRegistry = ItemRegistry
    def hasContent_(self):
        if (
            self.ItemRegistry is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemRegistries', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemRegistries')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemRegistries', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemRegistries'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemRegistries', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemRegistry is not None:
            self.ItemRegistry.export(outfile, level, namespace_, name_='ItemRegistry', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemRegistry':
            obj_ = ItemRegistryType.factory()
            obj_.build(child_)
            self.ItemRegistry = obj_
            obj_.original_tagname_ = 'ItemRegistry'
# end class ItemRegistries


class ItemRegistryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Meta=None, Header=None, Structure=None, Summary=None):
        self.original_tagname_ = None
        self.Meta = Meta
        self.Header = Header
        self.Structure = Structure
        self.Summary = Summary
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemRegistryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemRegistryType.subclass:
            return ItemRegistryType.subclass(*args_, **kwargs_)
        else:
            return ItemRegistryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Meta(self): return self.Meta
    def set_Meta(self, Meta): self.Meta = Meta
    def get_Header(self): return self.Header
    def set_Header(self, Header): self.Header = Header
    def get_Structure(self): return self.Structure
    def set_Structure(self, Structure): self.Structure = Structure
    def get_Summary(self): return self.Summary
    def set_Summary(self, Summary): self.Summary = Summary
    def hasContent_(self):
        if (
            self.Meta is not None or
            self.Header is not None or
            self.Structure is not None or
            self.Summary is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemRegistryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemRegistryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemRegistryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemRegistryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemRegistryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Meta is not None:
            self.Meta.export(outfile, level, namespace_, name_='Meta', pretty_print=pretty_print)
        if self.Header is not None:
            self.Header.export(outfile, level, namespace_, name_='Header', pretty_print=pretty_print)
        if self.Structure is not None:
            self.Structure.export(outfile, level, namespace_, name_='Structure', pretty_print=pretty_print)
        if self.Summary is not None:
            self.Summary.export(outfile, level, namespace_, name_='Summary', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Meta':
            obj_ = MetaType.factory()
            obj_.build(child_)
            self.Meta = obj_
            obj_.original_tagname_ = 'Meta'
        elif nodeName_ == 'Header':
            obj_ = HeaderType.factory()
            obj_.build(child_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Structure':
            obj_ = StructureType.factory()
            obj_.build(child_)
            self.Structure = obj_
            obj_.original_tagname_ = 'Structure'
        elif nodeName_ == 'Summary':
            obj_ = SummaryType.factory()
            obj_.build(child_)
            self.Summary = obj_
            obj_.original_tagname_ = 'Summary'
# end class ItemRegistryType


class attributes_string(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, not_equal=None, requires_one=None, qualified_rep=None, requires_others=None, score=None, valueOf_=None):
        self.original_tagname_ = None
        self.not_equal = _cast(None, not_equal)
        self.requires_one = _cast(None, requires_one)
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_others = _cast(None, requires_others)
        self.score = _cast(int, score)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_string)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_string.subclass:
            return attributes_string.subclass(*args_, **kwargs_)
        else:
            return attributes_string(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-string', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-string')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-string', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-string'):
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.not_equal), input_name='not-equal')), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.requires_one), input_name='requires-one')), ))
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.qualified_rep), input_name='qualified-rep')), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.requires_others), input_name='requires-others')), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score="%s"' % self.gds_format_integer(self.score, input_name='score'))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-string', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            try:
                self.score = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_string


class MetaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SenderUniqueID=None, SenderCompanyName=None, ReceiverUniqueID=None, ReceiverCompanyName=None, IsDropShip=None, InterchangeControlNumber=None, GroupControlIdentifier=None, GroupControlNumber=None, DocumentControlIdentifier=None, DocumentControlNumber=None, InterchangeSenderID=None, InterchangeReceiverID=None, GroupSenderID=None, GroupReceiverID=None, BatchPart=None, BatchTotal=None, BatchID=None, Comments=None, Validation=None, OrderManagement=None, Version=None):
        self.original_tagname_ = None
        self.SenderUniqueID = SenderUniqueID
        self.SenderCompanyName = SenderCompanyName
        self.ReceiverUniqueID = ReceiverUniqueID
        self.ReceiverCompanyName = ReceiverCompanyName
        self.IsDropShip = IsDropShip
        self.InterchangeControlNumber = InterchangeControlNumber
        self.GroupControlIdentifier = GroupControlIdentifier
        self.GroupControlNumber = GroupControlNumber
        self.DocumentControlIdentifier = DocumentControlIdentifier
        self.DocumentControlNumber = DocumentControlNumber
        self.InterchangeSenderID = InterchangeSenderID
        self.InterchangeReceiverID = InterchangeReceiverID
        self.GroupSenderID = GroupSenderID
        self.GroupReceiverID = GroupReceiverID
        self.BatchPart = BatchPart
        self.BatchTotal = BatchTotal
        self.BatchID = BatchID
        self.Comments = Comments
        self.Validation = Validation
        self.OrderManagement = OrderManagement
        self.Version = Version
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetaType.subclass:
            return MetaType.subclass(*args_, **kwargs_)
        else:
            return MetaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SenderUniqueID(self): return self.SenderUniqueID
    def set_SenderUniqueID(self, SenderUniqueID): self.SenderUniqueID = SenderUniqueID
    def get_SenderCompanyName(self): return self.SenderCompanyName
    def set_SenderCompanyName(self, SenderCompanyName): self.SenderCompanyName = SenderCompanyName
    def get_ReceiverUniqueID(self): return self.ReceiverUniqueID
    def set_ReceiverUniqueID(self, ReceiverUniqueID): self.ReceiverUniqueID = ReceiverUniqueID
    def get_ReceiverCompanyName(self): return self.ReceiverCompanyName
    def set_ReceiverCompanyName(self, ReceiverCompanyName): self.ReceiverCompanyName = ReceiverCompanyName
    def get_IsDropShip(self): return self.IsDropShip
    def set_IsDropShip(self, IsDropShip): self.IsDropShip = IsDropShip
    def get_InterchangeControlNumber(self): return self.InterchangeControlNumber
    def set_InterchangeControlNumber(self, InterchangeControlNumber): self.InterchangeControlNumber = InterchangeControlNumber
    def get_GroupControlIdentifier(self): return self.GroupControlIdentifier
    def set_GroupControlIdentifier(self, GroupControlIdentifier): self.GroupControlIdentifier = GroupControlIdentifier
    def get_GroupControlNumber(self): return self.GroupControlNumber
    def set_GroupControlNumber(self, GroupControlNumber): self.GroupControlNumber = GroupControlNumber
    def get_DocumentControlIdentifier(self): return self.DocumentControlIdentifier
    def set_DocumentControlIdentifier(self, DocumentControlIdentifier): self.DocumentControlIdentifier = DocumentControlIdentifier
    def get_DocumentControlNumber(self): return self.DocumentControlNumber
    def set_DocumentControlNumber(self, DocumentControlNumber): self.DocumentControlNumber = DocumentControlNumber
    def get_InterchangeSenderID(self): return self.InterchangeSenderID
    def set_InterchangeSenderID(self, InterchangeSenderID): self.InterchangeSenderID = InterchangeSenderID
    def get_InterchangeReceiverID(self): return self.InterchangeReceiverID
    def set_InterchangeReceiverID(self, InterchangeReceiverID): self.InterchangeReceiverID = InterchangeReceiverID
    def get_GroupSenderID(self): return self.GroupSenderID
    def set_GroupSenderID(self, GroupSenderID): self.GroupSenderID = GroupSenderID
    def get_GroupReceiverID(self): return self.GroupReceiverID
    def set_GroupReceiverID(self, GroupReceiverID): self.GroupReceiverID = GroupReceiverID
    def get_BatchPart(self): return self.BatchPart
    def set_BatchPart(self, BatchPart): self.BatchPart = BatchPart
    def get_BatchTotal(self): return self.BatchTotal
    def set_BatchTotal(self, BatchTotal): self.BatchTotal = BatchTotal
    def get_BatchID(self): return self.BatchID
    def set_BatchID(self, BatchID): self.BatchID = BatchID
    def get_Comments(self): return self.Comments
    def set_Comments(self, Comments): self.Comments = Comments
    def get_Validation(self): return self.Validation
    def set_Validation(self, Validation): self.Validation = Validation
    def get_OrderManagement(self): return self.OrderManagement
    def set_OrderManagement(self, OrderManagement): self.OrderManagement = OrderManagement
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def hasContent_(self):
        if (
            self.SenderUniqueID is not None or
            self.SenderCompanyName is not None or
            self.ReceiverUniqueID is not None or
            self.ReceiverCompanyName is not None or
            self.IsDropShip is not None or
            self.InterchangeControlNumber is not None or
            self.GroupControlIdentifier is not None or
            self.GroupControlNumber is not None or
            self.DocumentControlIdentifier is not None or
            self.DocumentControlNumber is not None or
            self.InterchangeSenderID is not None or
            self.InterchangeReceiverID is not None or
            self.GroupSenderID is not None or
            self.GroupReceiverID is not None or
            self.BatchPart is not None or
            self.BatchTotal is not None or
            self.BatchID is not None or
            self.Comments is not None or
            self.Validation is not None or
            self.OrderManagement is not None or
            self.Version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetaType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MetaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SenderUniqueID is not None:
            self.SenderUniqueID.export(outfile, level, namespace_, name_='SenderUniqueID', pretty_print=pretty_print)
        if self.SenderCompanyName is not None:
            self.SenderCompanyName.export(outfile, level, namespace_, name_='SenderCompanyName', pretty_print=pretty_print)
        if self.ReceiverUniqueID is not None:
            self.ReceiverUniqueID.export(outfile, level, namespace_, name_='ReceiverUniqueID', pretty_print=pretty_print)
        if self.ReceiverCompanyName is not None:
            self.ReceiverCompanyName.export(outfile, level, namespace_, name_='ReceiverCompanyName', pretty_print=pretty_print)
        if self.IsDropShip is not None:
            self.IsDropShip.export(outfile, level, namespace_, name_='IsDropShip', pretty_print=pretty_print)
        if self.InterchangeControlNumber is not None:
            self.InterchangeControlNumber.export(outfile, level, namespace_, name_='InterchangeControlNumber', pretty_print=pretty_print)
        if self.GroupControlIdentifier is not None:
            self.GroupControlIdentifier.export(outfile, level, namespace_, name_='GroupControlIdentifier', pretty_print=pretty_print)
        if self.GroupControlNumber is not None:
            self.GroupControlNumber.export(outfile, level, namespace_, name_='GroupControlNumber', pretty_print=pretty_print)
        if self.DocumentControlIdentifier is not None:
            self.DocumentControlIdentifier.export(outfile, level, namespace_, name_='DocumentControlIdentifier', pretty_print=pretty_print)
        if self.DocumentControlNumber is not None:
            self.DocumentControlNumber.export(outfile, level, namespace_, name_='DocumentControlNumber', pretty_print=pretty_print)
        if self.InterchangeSenderID is not None:
            self.InterchangeSenderID.export(outfile, level, namespace_, name_='InterchangeSenderID', pretty_print=pretty_print)
        if self.InterchangeReceiverID is not None:
            self.InterchangeReceiverID.export(outfile, level, namespace_, name_='InterchangeReceiverID', pretty_print=pretty_print)
        if self.GroupSenderID is not None:
            self.GroupSenderID.export(outfile, level, namespace_, name_='GroupSenderID', pretty_print=pretty_print)
        if self.GroupReceiverID is not None:
            self.GroupReceiverID.export(outfile, level, namespace_, name_='GroupReceiverID', pretty_print=pretty_print)
        if self.BatchPart is not None:
            self.BatchPart.export(outfile, level, namespace_, name_='BatchPart', pretty_print=pretty_print)
        if self.BatchTotal is not None:
            self.BatchTotal.export(outfile, level, namespace_, name_='BatchTotal', pretty_print=pretty_print)
        if self.BatchID is not None:
            self.BatchID.export(outfile, level, namespace_, name_='BatchID', pretty_print=pretty_print)
        if self.Comments is not None:
            self.Comments.export(outfile, level, namespace_, name_='Comments', pretty_print=pretty_print)
        if self.Validation is not None:
            self.Validation.export(outfile, level, namespace_, name_='Validation', pretty_print=pretty_print)
        if self.OrderManagement is not None:
            self.OrderManagement.export(outfile, level, namespace_, name_='OrderManagement', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SenderUniqueID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SenderUniqueID = obj_
            obj_.original_tagname_ = 'SenderUniqueID'
        elif nodeName_ == 'SenderCompanyName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SenderCompanyName = obj_
            obj_.original_tagname_ = 'SenderCompanyName'
        elif nodeName_ == 'ReceiverUniqueID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReceiverUniqueID = obj_
            obj_.original_tagname_ = 'ReceiverUniqueID'
        elif nodeName_ == 'ReceiverCompanyName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReceiverCompanyName = obj_
            obj_.original_tagname_ = 'ReceiverCompanyName'
        elif nodeName_ == 'IsDropShip':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IsDropShip = obj_
            obj_.original_tagname_ = 'IsDropShip'
        elif nodeName_ == 'InterchangeControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeControlNumber = obj_
            obj_.original_tagname_ = 'InterchangeControlNumber'
        elif nodeName_ == 'GroupControlIdentifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupControlIdentifier = obj_
            obj_.original_tagname_ = 'GroupControlIdentifier'
        elif nodeName_ == 'GroupControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupControlNumber = obj_
            obj_.original_tagname_ = 'GroupControlNumber'
        elif nodeName_ == 'DocumentControlIdentifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentControlIdentifier = obj_
            obj_.original_tagname_ = 'DocumentControlIdentifier'
        elif nodeName_ == 'DocumentControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentControlNumber = obj_
            obj_.original_tagname_ = 'DocumentControlNumber'
        elif nodeName_ == 'InterchangeSenderID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeSenderID = obj_
            obj_.original_tagname_ = 'InterchangeSenderID'
        elif nodeName_ == 'InterchangeReceiverID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeReceiverID = obj_
            obj_.original_tagname_ = 'InterchangeReceiverID'
        elif nodeName_ == 'GroupSenderID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupSenderID = obj_
            obj_.original_tagname_ = 'GroupSenderID'
        elif nodeName_ == 'GroupReceiverID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupReceiverID = obj_
            obj_.original_tagname_ = 'GroupReceiverID'
        elif nodeName_ == 'BatchPart':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchPart = obj_
            obj_.original_tagname_ = 'BatchPart'
        elif nodeName_ == 'BatchTotal':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchTotal = obj_
            obj_.original_tagname_ = 'BatchTotal'
        elif nodeName_ == 'BatchID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchID = obj_
            obj_.original_tagname_ = 'BatchID'
        elif nodeName_ == 'Comments':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Comments = obj_
            obj_.original_tagname_ = 'Comments'
        elif nodeName_ == 'Validation':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Validation = obj_
            obj_.original_tagname_ = 'Validation'
        elif nodeName_ == 'OrderManagement':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderManagement = obj_
            obj_.original_tagname_ = 'OrderManagement'
        elif nodeName_ == 'Version':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
# end class MetaType


class HeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HeaderReport=None, Dates=None, Contacts=None, Address=None, References=None, Notes=None, RegulatoryCompliances=None):
        self.original_tagname_ = None
        self.HeaderReport = HeaderReport
        self.Dates = Dates
        self.Contacts = Contacts
        self.Address = Address
        self.References = References
        self.Notes = Notes
        self.RegulatoryCompliances = RegulatoryCompliances
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType.subclass:
            return HeaderType.subclass(*args_, **kwargs_)
        else:
            return HeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HeaderReport(self): return self.HeaderReport
    def set_HeaderReport(self, HeaderReport): self.HeaderReport = HeaderReport
    def get_Dates(self): return self.Dates
    def set_Dates(self, Dates): self.Dates = Dates
    def get_Contacts(self): return self.Contacts
    def set_Contacts(self, Contacts): self.Contacts = Contacts
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_References(self): return self.References
    def set_References(self, References): self.References = References
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_RegulatoryCompliances(self): return self.RegulatoryCompliances
    def set_RegulatoryCompliances(self, RegulatoryCompliances): self.RegulatoryCompliances = RegulatoryCompliances
    def hasContent_(self):
        if (
            self.HeaderReport is not None or
            self.Dates is not None or
            self.Contacts is not None or
            self.Address is not None or
            self.References is not None or
            self.Notes is not None or
            self.RegulatoryCompliances is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HeaderReport is not None:
            self.HeaderReport.export(outfile, level, namespace_, name_='HeaderReport', pretty_print=pretty_print)
        if self.Dates is not None:
            self.Dates.export(outfile, level, namespace_, name_='Dates', pretty_print=pretty_print)
        if self.Contacts is not None:
            self.Contacts.export(outfile, level, namespace_, name_='Contacts', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.References is not None:
            self.References.export(outfile, level, namespace_, name_='References', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.RegulatoryCompliances is not None:
            self.RegulatoryCompliances.export(outfile, level, namespace_, name_='RegulatoryCompliances', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HeaderReport':
            obj_ = HeaderReportType.factory()
            obj_.build(child_)
            self.HeaderReport = obj_
            obj_.original_tagname_ = 'HeaderReport'
        elif nodeName_ == 'Dates':
            obj_ = DatesType.factory()
            obj_.build(child_)
            self.Dates = obj_
            obj_.original_tagname_ = 'Dates'
        elif nodeName_ == 'Contacts':
            obj_ = ContactsType.factory()
            obj_.build(child_)
            self.Contacts = obj_
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'References':
            obj_ = ReferencesType4.factory()
            obj_.build(child_)
            self.References = obj_
            obj_.original_tagname_ = 'References'
        elif nodeName_ == 'Notes':
            obj_ = NotesType.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'RegulatoryCompliances':
            obj_ = RegulatoryCompliancesType.factory()
            obj_.build(child_)
            self.RegulatoryCompliances = obj_
            obj_.original_tagname_ = 'RegulatoryCompliances'
# end class HeaderType


class HeaderReportType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TradingPartnerId=None, DocumentId=None, TsetPurposeCode=None, ReportTypeCode=None, InventoryDate=None, InventoryTime=None, ActionCode=None, BuyersCurrency=None, SellersCurrency=None, ExchangeRate=None, Vendor=None, Division=None, Department=None, DepartmentDescription=None):
        self.original_tagname_ = None
        self.TradingPartnerId = TradingPartnerId
        self.DocumentId = DocumentId
        self.TsetPurposeCode = TsetPurposeCode
        self.ReportTypeCode = ReportTypeCode
        self.InventoryDate = InventoryDate
        self.InventoryTime = InventoryTime
        self.ActionCode = ActionCode
        self.BuyersCurrency = BuyersCurrency
        self.SellersCurrency = SellersCurrency
        self.ExchangeRate = ExchangeRate
        self.Vendor = Vendor
        self.Division = Division
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderReportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderReportType.subclass:
            return HeaderReportType.subclass(*args_, **kwargs_)
        else:
            return HeaderReportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TradingPartnerId(self): return self.TradingPartnerId
    def set_TradingPartnerId(self, TradingPartnerId): self.TradingPartnerId = TradingPartnerId
    def get_DocumentId(self): return self.DocumentId
    def set_DocumentId(self, DocumentId): self.DocumentId = DocumentId
    def get_TsetPurposeCode(self): return self.TsetPurposeCode
    def set_TsetPurposeCode(self, TsetPurposeCode): self.TsetPurposeCode = TsetPurposeCode
    def get_ReportTypeCode(self): return self.ReportTypeCode
    def set_ReportTypeCode(self, ReportTypeCode): self.ReportTypeCode = ReportTypeCode
    def get_InventoryDate(self): return self.InventoryDate
    def set_InventoryDate(self, InventoryDate): self.InventoryDate = InventoryDate
    def get_InventoryTime(self): return self.InventoryTime
    def set_InventoryTime(self, InventoryTime): self.InventoryTime = InventoryTime
    def get_ActionCode(self): return self.ActionCode
    def set_ActionCode(self, ActionCode): self.ActionCode = ActionCode
    def get_BuyersCurrency(self): return self.BuyersCurrency
    def set_BuyersCurrency(self, BuyersCurrency): self.BuyersCurrency = BuyersCurrency
    def get_SellersCurrency(self): return self.SellersCurrency
    def set_SellersCurrency(self, SellersCurrency): self.SellersCurrency = SellersCurrency
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_Vendor(self): return self.Vendor
    def set_Vendor(self, Vendor): self.Vendor = Vendor
    def get_Division(self): return self.Division
    def set_Division(self, Division): self.Division = Division
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def hasContent_(self):
        if (
            self.TradingPartnerId is not None or
            self.DocumentId is not None or
            self.TsetPurposeCode is not None or
            self.ReportTypeCode is not None or
            self.InventoryDate is not None or
            self.InventoryTime is not None or
            self.ActionCode is not None or
            self.BuyersCurrency is not None or
            self.SellersCurrency is not None or
            self.ExchangeRate is not None or
            self.Vendor is not None or
            self.Division is not None or
            self.Department is not None or
            self.DepartmentDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HeaderReportType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HeaderReportType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HeaderReportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HeaderReportType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HeaderReportType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TradingPartnerId is not None:
            self.TradingPartnerId.export(outfile, level, namespace_, name_='TradingPartnerId', pretty_print=pretty_print)
        if self.DocumentId is not None:
            self.DocumentId.export(outfile, level, namespace_, name_='DocumentId', pretty_print=pretty_print)
        if self.TsetPurposeCode is not None:
            self.TsetPurposeCode.export(outfile, level, namespace_, name_='TsetPurposeCode', pretty_print=pretty_print)
        if self.ReportTypeCode is not None:
            self.ReportTypeCode.export(outfile, level, namespace_, name_='ReportTypeCode', pretty_print=pretty_print)
        if self.InventoryDate is not None:
            self.InventoryDate.export(outfile, level, namespace_, name_='InventoryDate', pretty_print=pretty_print)
        if self.InventoryTime is not None:
            self.InventoryTime.export(outfile, level, namespace_, name_='InventoryTime', pretty_print=pretty_print)
        if self.ActionCode is not None:
            self.ActionCode.export(outfile, level, namespace_, name_='ActionCode', pretty_print=pretty_print)
        if self.BuyersCurrency is not None:
            self.BuyersCurrency.export(outfile, level, namespace_, name_='BuyersCurrency', pretty_print=pretty_print)
        if self.SellersCurrency is not None:
            self.SellersCurrency.export(outfile, level, namespace_, name_='SellersCurrency', pretty_print=pretty_print)
        if self.ExchangeRate is not None:
            self.ExchangeRate.export(outfile, level, namespace_, name_='ExchangeRate', pretty_print=pretty_print)
        if self.Vendor is not None:
            self.Vendor.export(outfile, level, namespace_, name_='Vendor', pretty_print=pretty_print)
        if self.Division is not None:
            self.Division.export(outfile, level, namespace_, name_='Division', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TradingPartnerId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TradingPartnerId = obj_
            obj_.original_tagname_ = 'TradingPartnerId'
        elif nodeName_ == 'DocumentId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentId = obj_
            obj_.original_tagname_ = 'DocumentId'
        elif nodeName_ == 'TsetPurposeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TsetPurposeCode = obj_
            obj_.original_tagname_ = 'TsetPurposeCode'
        elif nodeName_ == 'ReportTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReportTypeCode = obj_
            obj_.original_tagname_ = 'ReportTypeCode'
        elif nodeName_ == 'InventoryDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InventoryDate = obj_
            obj_.original_tagname_ = 'InventoryDate'
        elif nodeName_ == 'InventoryTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InventoryTime = obj_
            obj_.original_tagname_ = 'InventoryTime'
        elif nodeName_ == 'ActionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ActionCode = obj_
            obj_.original_tagname_ = 'ActionCode'
        elif nodeName_ == 'BuyersCurrency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyersCurrency = obj_
            obj_.original_tagname_ = 'BuyersCurrency'
        elif nodeName_ == 'SellersCurrency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellersCurrency = obj_
            obj_.original_tagname_ = 'SellersCurrency'
        elif nodeName_ == 'ExchangeRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExchangeRate = obj_
            obj_.original_tagname_ = 'ExchangeRate'
        elif nodeName_ == 'Vendor':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Vendor = obj_
            obj_.original_tagname_ = 'Vendor'
        elif nodeName_ == 'Division':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Division = obj_
            obj_.original_tagname_ = 'Division'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
# end class HeaderReportType


class DatesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier=None, Date=None, Time=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier = DateTimeQualifier
        self.Date = Date
        self.Time = Time
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatesType.subclass:
            return DatesType.subclass(*args_, **kwargs_)
        else:
            return DatesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier(self): return self.DateTimeQualifier
    def set_DateTimeQualifier(self, DateTimeQualifier): self.DateTimeQualifier = DateTimeQualifier
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier is not None or
            self.Date is not None or
            self.Time is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier is not None:
            self.DateTimeQualifier.export(outfile, level, namespace_, name_='DateTimeQualifier', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier = obj_
            obj_.original_tagname_ = 'DateTimeQualifier'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DatesType


class ContactsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactsType.subclass:
            return ContactsType.subclass(*args_, **kwargs_)
        else:
            return ContactsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactsType


class AdditionalContactDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType.subclass:
            return AdditionalContactDetailsType.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, References=None, Contacts=None, Dates=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.References = References
        self.Contacts = Contacts
        self.Dates = Dates
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_References(self): return self.References
    def set_References(self, References): self.References = References
    def get_Contacts(self): return self.Contacts
    def set_Contacts(self, Contacts): self.Contacts = Contacts
    def get_Dates(self): return self.Dates
    def set_Dates(self, Dates): self.Dates = Dates
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.References is not None or
            self.Contacts is not None or
            self.Dates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.References is not None:
            self.References.export(outfile, level, namespace_, name_='References', pretty_print=pretty_print)
        if self.Contacts is not None:
            self.Contacts.export(outfile, level, namespace_, name_='Contacts', pretty_print=pretty_print)
        if self.Dates is not None:
            self.Dates.export(outfile, level, namespace_, name_='Dates', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'References':
            obj_ = ReferencesType.factory()
            obj_.build(child_)
            self.References = obj_
            obj_.original_tagname_ = 'References'
        elif nodeName_ == 'Contacts':
            obj_ = ContactsType1.factory()
            obj_.build(child_)
            self.Contacts = obj_
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'Dates':
            obj_ = DatesType3.factory()
            obj_.build(child_)
            self.Dates = obj_
            obj_.original_tagname_ = 'Dates'
# end class AddressType


class ReferencesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date=None, Time=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date = Date
        self.Time = Time
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferencesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferencesType.subclass:
            return ReferencesType.subclass(*args_, **kwargs_)
        else:
            return ReferencesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date is not None or
            self.Time is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferencesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferencesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferencesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferencesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferencesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferencesType


class ReferenceIDsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType.subclass:
            return ReferenceIDsType.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType


class ContactsType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactsType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactsType1.subclass:
            return ContactsType1.subclass(*args_, **kwargs_)
        else:
            return ContactsType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactsType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactsType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactsType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactsType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactsType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType2.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactsType1


class AdditionalContactDetailsType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType2.subclass:
            return AdditionalContactDetailsType2.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType2


class DatesType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier=None, Date=None, Time=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier = DateTimeQualifier
        self.Date = Date
        self.Time = Time
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatesType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatesType3.subclass:
            return DatesType3.subclass(*args_, **kwargs_)
        else:
            return DatesType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier(self): return self.DateTimeQualifier
    def set_DateTimeQualifier(self, DateTimeQualifier): self.DateTimeQualifier = DateTimeQualifier
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier is not None or
            self.Date is not None or
            self.Time is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatesType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatesType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatesType3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatesType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatesType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier is not None:
            self.DateTimeQualifier.export(outfile, level, namespace_, name_='DateTimeQualifier', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier = obj_
            obj_.original_tagname_ = 'DateTimeQualifier'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DatesType3


class ReferencesType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date=None, Time=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date = Date
        self.Time = Time
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferencesType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferencesType4.subclass:
            return ReferencesType4.subclass(*args_, **kwargs_)
        else:
            return ReferencesType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date is not None or
            self.Time is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferencesType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferencesType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferencesType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferencesType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferencesType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType5.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferencesType4


class ReferenceIDsType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType5.subclass:
            return ReferenceIDsType5.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType5'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType5


class NotesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, Note=None, LanguageCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.Note = Note
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType.subclass:
            return NotesType.subclass(*args_, **kwargs_)
        else:
            return NotesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.Note is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.Note is not None:
            self.Note.export(outfile, level, namespace_, name_='Note', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'Note':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Note = obj_
            obj_.original_tagname_ = 'Note'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class NotesType


class RegulatoryCompliancesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RegulatoryComplianceQual=None, YesOrNoResponse=None, RegulatoryComplianceID=None, RegulatoryAgency=None, Description=None):
        self.original_tagname_ = None
        self.RegulatoryComplianceQual = RegulatoryComplianceQual
        self.YesOrNoResponse = YesOrNoResponse
        self.RegulatoryComplianceID = RegulatoryComplianceID
        self.RegulatoryAgency = RegulatoryAgency
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegulatoryCompliancesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegulatoryCompliancesType.subclass:
            return RegulatoryCompliancesType.subclass(*args_, **kwargs_)
        else:
            return RegulatoryCompliancesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RegulatoryComplianceQual(self): return self.RegulatoryComplianceQual
    def set_RegulatoryComplianceQual(self, RegulatoryComplianceQual): self.RegulatoryComplianceQual = RegulatoryComplianceQual
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_RegulatoryComplianceID(self): return self.RegulatoryComplianceID
    def set_RegulatoryComplianceID(self, RegulatoryComplianceID): self.RegulatoryComplianceID = RegulatoryComplianceID
    def get_RegulatoryAgency(self): return self.RegulatoryAgency
    def set_RegulatoryAgency(self, RegulatoryAgency): self.RegulatoryAgency = RegulatoryAgency
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.RegulatoryComplianceQual is not None or
            self.YesOrNoResponse is not None or
            self.RegulatoryComplianceID is not None or
            self.RegulatoryAgency is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RegulatoryCompliancesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RegulatoryCompliancesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RegulatoryCompliancesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RegulatoryCompliancesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RegulatoryCompliancesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegulatoryComplianceQual is not None:
            self.RegulatoryComplianceQual.export(outfile, level, namespace_, name_='RegulatoryComplianceQual', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.RegulatoryComplianceID is not None:
            self.RegulatoryComplianceID.export(outfile, level, namespace_, name_='RegulatoryComplianceID', pretty_print=pretty_print)
        if self.RegulatoryAgency is not None:
            self.RegulatoryAgency.export(outfile, level, namespace_, name_='RegulatoryAgency', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RegulatoryComplianceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryComplianceQual = obj_
            obj_.original_tagname_ = 'RegulatoryComplianceQual'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'RegulatoryComplianceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryComplianceID = obj_
            obj_.original_tagname_ = 'RegulatoryComplianceID'
        elif nodeName_ == 'RegulatoryAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryAgency = obj_
            obj_.original_tagname_ = 'RegulatoryAgency'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class RegulatoryCompliancesType


class StructureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Classification=None, ClassificationDescription=None, SubClassification=None, SubClassificationDescription=None, ProductTypes=None, LineItem=None):
        self.original_tagname_ = None
        self.Classification = Classification
        self.ClassificationDescription = ClassificationDescription
        self.SubClassification = SubClassification
        self.SubClassificationDescription = SubClassificationDescription
        self.ProductTypes = ProductTypes
        self.LineItem = LineItem
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StructureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StructureType.subclass:
            return StructureType.subclass(*args_, **kwargs_)
        else:
            return StructureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Classification(self): return self.Classification
    def set_Classification(self, Classification): self.Classification = Classification
    def get_ClassificationDescription(self): return self.ClassificationDescription
    def set_ClassificationDescription(self, ClassificationDescription): self.ClassificationDescription = ClassificationDescription
    def get_SubClassification(self): return self.SubClassification
    def set_SubClassification(self, SubClassification): self.SubClassification = SubClassification
    def get_SubClassificationDescription(self): return self.SubClassificationDescription
    def set_SubClassificationDescription(self, SubClassificationDescription): self.SubClassificationDescription = SubClassificationDescription
    def get_ProductTypes(self): return self.ProductTypes
    def set_ProductTypes(self, ProductTypes): self.ProductTypes = ProductTypes
    def get_LineItem(self): return self.LineItem
    def set_LineItem(self, LineItem): self.LineItem = LineItem
    def hasContent_(self):
        if (
            self.Classification is not None or
            self.ClassificationDescription is not None or
            self.SubClassification is not None or
            self.SubClassificationDescription is not None or
            self.ProductTypes is not None or
            self.LineItem is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StructureType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StructureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StructureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StructureType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StructureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Classification is not None:
            self.Classification.export(outfile, level, namespace_, name_='Classification', pretty_print=pretty_print)
        if self.ClassificationDescription is not None:
            self.ClassificationDescription.export(outfile, level, namespace_, name_='ClassificationDescription', pretty_print=pretty_print)
        if self.SubClassification is not None:
            self.SubClassification.export(outfile, level, namespace_, name_='SubClassification', pretty_print=pretty_print)
        if self.SubClassificationDescription is not None:
            self.SubClassificationDescription.export(outfile, level, namespace_, name_='SubClassificationDescription', pretty_print=pretty_print)
        if self.ProductTypes is not None:
            self.ProductTypes.export(outfile, level, namespace_, name_='ProductTypes', pretty_print=pretty_print)
        if self.LineItem is not None:
            self.LineItem.export(outfile, level, namespace_, name_='LineItem', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Classification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Classification = obj_
            obj_.original_tagname_ = 'Classification'
        elif nodeName_ == 'ClassificationDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassificationDescription = obj_
            obj_.original_tagname_ = 'ClassificationDescription'
        elif nodeName_ == 'SubClassification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SubClassification = obj_
            obj_.original_tagname_ = 'SubClassification'
        elif nodeName_ == 'SubClassificationDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SubClassificationDescription = obj_
            obj_.original_tagname_ = 'SubClassificationDescription'
        elif nodeName_ == 'ProductTypes':
            obj_ = ProductTypesType.factory()
            obj_.build(child_)
            self.ProductTypes = obj_
            obj_.original_tagname_ = 'ProductTypes'
        elif nodeName_ == 'LineItem':
            obj_ = LineItemType.factory()
            obj_.build(child_)
            self.LineItem = obj_
            obj_.original_tagname_ = 'LineItem'
# end class StructureType


class ProductTypesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ProductType=None):
        self.original_tagname_ = None
        self.ProductType = ProductType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductTypesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductTypesType.subclass:
            return ProductTypesType.subclass(*args_, **kwargs_)
        else:
            return ProductTypesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ProductType(self): return self.ProductType
    def set_ProductType(self, ProductType): self.ProductType = ProductType
    def hasContent_(self):
        if (
            self.ProductType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductTypesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductTypesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductTypesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductTypesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductTypesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductType is not None:
            self.ProductType.export(outfile, level, namespace_, name_='ProductType', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ProductType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductType = obj_
            obj_.original_tagname_ = 'ProductType'
# end class ProductTypesType


class LineItemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InventoryLine=None, MasterItemAttribute=None, PhysicalDetails=None, PalletInformation=None, References=None, Notes=None, FloorReady=None, Dates=None, Measurements=None, PriceDetails=None, ProductOrItemDescription=None, Address=None, Subline=None, QuantitiesSchedulesLocations=None, Taxes=None, ChargesAllowances=None, CarrierInformation=None, CarrierSpecialHandlingDetail=None, HazardousInformation=None, Commodity=None, SpecialLabeling=None, FOBRelatedInstruction=None, RegulatoryCompliances=None):
        self.original_tagname_ = None
        self.InventoryLine = InventoryLine
        self.MasterItemAttribute = MasterItemAttribute
        self.PhysicalDetails = PhysicalDetails
        self.PalletInformation = PalletInformation
        self.References = References
        self.Notes = Notes
        self.FloorReady = FloorReady
        self.Dates = Dates
        self.Measurements = Measurements
        self.PriceDetails = PriceDetails
        self.ProductOrItemDescription = ProductOrItemDescription
        self.Address = Address
        self.Subline = Subline
        self.QuantitiesSchedulesLocations = QuantitiesSchedulesLocations
        self.Taxes = Taxes
        self.ChargesAllowances = ChargesAllowances
        self.CarrierInformation = CarrierInformation
        self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        self.HazardousInformation = HazardousInformation
        self.Commodity = Commodity
        self.SpecialLabeling = SpecialLabeling
        self.FOBRelatedInstruction = FOBRelatedInstruction
        self.RegulatoryCompliances = RegulatoryCompliances
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LineItemType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LineItemType.subclass:
            return LineItemType.subclass(*args_, **kwargs_)
        else:
            return LineItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InventoryLine(self): return self.InventoryLine
    def set_InventoryLine(self, InventoryLine): self.InventoryLine = InventoryLine
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def get_PalletInformation(self): return self.PalletInformation
    def set_PalletInformation(self, PalletInformation): self.PalletInformation = PalletInformation
    def get_References(self): return self.References
    def set_References(self, References): self.References = References
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_FloorReady(self): return self.FloorReady
    def set_FloorReady(self, FloorReady): self.FloorReady = FloorReady
    def get_Dates(self): return self.Dates
    def set_Dates(self, Dates): self.Dates = Dates
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def get_PriceDetails(self): return self.PriceDetails
    def set_PriceDetails(self, PriceDetails): self.PriceDetails = PriceDetails
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def get_QuantitiesSchedulesLocations(self): return self.QuantitiesSchedulesLocations
    def set_QuantitiesSchedulesLocations(self, QuantitiesSchedulesLocations): self.QuantitiesSchedulesLocations = QuantitiesSchedulesLocations
    def get_Taxes(self): return self.Taxes
    def set_Taxes(self, Taxes): self.Taxes = Taxes
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def get_HazardousInformation(self): return self.HazardousInformation
    def set_HazardousInformation(self, HazardousInformation): self.HazardousInformation = HazardousInformation
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def get_SpecialLabeling(self): return self.SpecialLabeling
    def set_SpecialLabeling(self, SpecialLabeling): self.SpecialLabeling = SpecialLabeling
    def get_FOBRelatedInstruction(self): return self.FOBRelatedInstruction
    def set_FOBRelatedInstruction(self, FOBRelatedInstruction): self.FOBRelatedInstruction = FOBRelatedInstruction
    def get_RegulatoryCompliances(self): return self.RegulatoryCompliances
    def set_RegulatoryCompliances(self, RegulatoryCompliances): self.RegulatoryCompliances = RegulatoryCompliances
    def hasContent_(self):
        if (
            self.InventoryLine is not None or
            self.MasterItemAttribute is not None or
            self.PhysicalDetails is not None or
            self.PalletInformation is not None or
            self.References is not None or
            self.Notes is not None or
            self.FloorReady is not None or
            self.Dates is not None or
            self.Measurements is not None or
            self.PriceDetails is not None or
            self.ProductOrItemDescription is not None or
            self.Address is not None or
            self.Subline is not None or
            self.QuantitiesSchedulesLocations is not None or
            self.Taxes is not None or
            self.ChargesAllowances is not None or
            self.CarrierInformation is not None or
            self.CarrierSpecialHandlingDetail is not None or
            self.HazardousInformation is not None or
            self.Commodity is not None or
            self.SpecialLabeling is not None or
            self.FOBRelatedInstruction is not None or
            self.RegulatoryCompliances is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LineItemType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LineItemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LineItemType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LineItemType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LineItemType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InventoryLine is not None:
            self.InventoryLine.export(outfile, level, namespace_, name_='InventoryLine', pretty_print=pretty_print)
        if self.MasterItemAttribute is not None:
            self.MasterItemAttribute.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        if self.PhysicalDetails is not None:
            self.PhysicalDetails.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        if self.PalletInformation is not None:
            self.PalletInformation.export(outfile, level, namespace_, name_='PalletInformation', pretty_print=pretty_print)
        if self.References is not None:
            self.References.export(outfile, level, namespace_, name_='References', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.FloorReady is not None:
            self.FloorReady.export(outfile, level, namespace_, name_='FloorReady', pretty_print=pretty_print)
        if self.Dates is not None:
            self.Dates.export(outfile, level, namespace_, name_='Dates', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        if self.PriceDetails is not None:
            self.PriceDetails.export(outfile, level, namespace_, name_='PriceDetails', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Subline is not None:
            self.Subline.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
        if self.QuantitiesSchedulesLocations is not None:
            self.QuantitiesSchedulesLocations.export(outfile, level, namespace_, name_='QuantitiesSchedulesLocations', pretty_print=pretty_print)
        if self.Taxes is not None:
            self.Taxes.export(outfile, level, namespace_, name_='Taxes', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.CarrierSpecialHandlingDetail is not None:
            self.CarrierSpecialHandlingDetail.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        if self.HazardousInformation is not None:
            self.HazardousInformation.export(outfile, level, namespace_, name_='HazardousInformation', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.SpecialLabeling is not None:
            self.SpecialLabeling.export(outfile, level, namespace_, name_='SpecialLabeling', pretty_print=pretty_print)
        if self.FOBRelatedInstruction is not None:
            self.FOBRelatedInstruction.export(outfile, level, namespace_, name_='FOBRelatedInstruction', pretty_print=pretty_print)
        if self.RegulatoryCompliances is not None:
            self.RegulatoryCompliances.export(outfile, level, namespace_, name_='RegulatoryCompliances', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InventoryLine':
            obj_ = InventoryLineType.factory()
            obj_.build(child_)
            self.InventoryLine = obj_
            obj_.original_tagname_ = 'InventoryLine'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType.factory()
            obj_.build(child_)
            self.MasterItemAttribute = obj_
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType.factory()
            obj_.build(child_)
            self.PhysicalDetails = obj_
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'PalletInformation':
            obj_ = PalletInformationType.factory()
            obj_.build(child_)
            self.PalletInformation = obj_
            obj_.original_tagname_ = 'PalletInformation'
        elif nodeName_ == 'References':
            obj_ = ReferencesType6.factory()
            obj_.build(child_)
            self.References = obj_
            obj_.original_tagname_ = 'References'
        elif nodeName_ == 'Notes':
            obj_ = NotesType8.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'FloorReady':
            obj_ = FloorReadyType.factory()
            obj_.build(child_)
            self.FloorReady = obj_
            obj_.original_tagname_ = 'FloorReady'
        elif nodeName_ == 'Dates':
            obj_ = DatesType9.factory()
            obj_.build(child_)
            self.Dates = obj_
            obj_.original_tagname_ = 'Dates'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType10.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceDetails':
            obj_ = PriceDetailsType.factory()
            obj_.build(child_)
            self.PriceDetails = obj_
            obj_.original_tagname_ = 'PriceDetails'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Address':
            obj_ = AddressType11.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Subline':
            obj_ = SublineType.factory()
            obj_.build(child_)
            self.Subline = obj_
            obj_.original_tagname_ = 'Subline'
        elif nodeName_ == 'QuantitiesSchedulesLocations':
            obj_ = QuantitiesSchedulesLocationsType.factory()
            obj_.build(child_)
            self.QuantitiesSchedulesLocations = obj_
            obj_.original_tagname_ = 'QuantitiesSchedulesLocations'
        elif nodeName_ == 'Taxes':
            obj_ = TaxesType.factory()
            obj_.build(child_)
            self.Taxes = obj_
            obj_.original_tagname_ = 'Taxes'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail = obj_
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'HazardousInformation':
            obj_ = HazardousInformationType.factory()
            obj_.build(child_)
            self.HazardousInformation = obj_
            obj_.original_tagname_ = 'HazardousInformation'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'SpecialLabeling':
            obj_ = SpecialLabelingType.factory()
            obj_.build(child_)
            self.SpecialLabeling = obj_
            obj_.original_tagname_ = 'SpecialLabeling'
        elif nodeName_ == 'FOBRelatedInstruction':
            obj_ = FOBRelatedInstructionType.factory()
            obj_.build(child_)
            self.FOBRelatedInstruction = obj_
            obj_.original_tagname_ = 'FOBRelatedInstruction'
        elif nodeName_ == 'RegulatoryCompliances':
            obj_ = RegulatoryCompliancesType31.factory()
            obj_.build(child_)
            self.RegulatoryCompliances = obj_
            obj_.original_tagname_ = 'RegulatoryCompliances'
# end class LineItemType


class InventoryLineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, ExpirationDate=None, Gender=None, MaintenanceTypeCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.ExpirationDate = ExpirationDate
        self.Gender = Gender
        self.MaintenanceTypeCode = MaintenanceTypeCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InventoryLineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InventoryLineType.subclass:
            return InventoryLineType.subclass(*args_, **kwargs_)
        else:
            return InventoryLineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def get_Gender(self): return self.Gender
    def set_Gender(self, Gender): self.Gender = Gender
    def get_MaintenanceTypeCode(self): return self.MaintenanceTypeCode
    def set_MaintenanceTypeCode(self, MaintenanceTypeCode): self.MaintenanceTypeCode = MaintenanceTypeCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.ExpirationDate is not None or
            self.Gender is not None or
            self.MaintenanceTypeCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='InventoryLineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InventoryLineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='InventoryLineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InventoryLineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='InventoryLineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.ExpirationDate is not None:
            self.ExpirationDate.export(outfile, level, namespace_, name_='ExpirationDate', pretty_print=pretty_print)
        if self.Gender is not None:
            self.Gender.export(outfile, level, namespace_, name_='Gender', pretty_print=pretty_print)
        if self.MaintenanceTypeCode is not None:
            self.MaintenanceTypeCode.export(outfile, level, namespace_, name_='MaintenanceTypeCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'ExpirationDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExpirationDate = obj_
            obj_.original_tagname_ = 'ExpirationDate'
        elif nodeName_ == 'Gender':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Gender = obj_
            obj_.original_tagname_ = 'Gender'
        elif nodeName_ == 'MaintenanceTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MaintenanceTypeCode = obj_
            obj_.original_tagname_ = 'MaintenanceTypeCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class InventoryLineType


class ProductIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType.subclass:
            return ProductIDType.subclass(*args_, **kwargs_)
        else:
            return ProductIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType


class NRFStandardColorAndSizeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType.subclass:
            return NRFStandardColorAndSizeType.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType


class MasterItemAttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType.subclass:
            return MasterItemAttributeType.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def hasContent_(self):
        if (
            self.ItemAttribute is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttribute is not None:
            self.ItemAttribute.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType.factory()
            obj_.build(child_)
            self.ItemAttribute = obj_
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType


class ItemAttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType.subclass:
            return ItemAttributeType.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            self.ItemAttributeQualifier.export(outfile, level, namespace_, name_='ItemAttributeQualifier', pretty_print=pretty_print)
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            self.ValueUOM.export(outfile, level, namespace_, name_='ValueUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemAttributeQualifier = obj_
            obj_.original_tagname_ = 'ItemAttributeQualifier'
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ValueUOM = obj_
            obj_.original_tagname_ = 'ValueUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType


class MeasurementsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType.subclass:
            return MeasurementsType.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType


class PhysicalDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, DimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.DimensionUOM = DimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType.subclass:
            return PhysicalDetailsType.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_DimensionUOM(self): return self.DimensionUOM
    def set_DimensionUOM(self, DimensionUOM): self.DimensionUOM = DimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.DimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            self.PackQualifier.export(outfile, level, namespace_, name_='PackQualifier', pretty_print=pretty_print)
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            self.PackUOM.export(outfile, level, namespace_, name_='PackUOM', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            self.PackWeightUOM.export(outfile, level, namespace_, name_='PackWeightUOM', pretty_print=pretty_print)
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            self.PackVolumeUOM.export(outfile, level, namespace_, name_='PackVolumeUOM', pretty_print=pretty_print)
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.DimensionUOM is not None:
            self.DimensionUOM.export(outfile, level, namespace_, name_='DimensionUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackQualifier = obj_
            obj_.original_tagname_ = 'PackQualifier'
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackUOM = obj_
            obj_.original_tagname_ = 'PackUOM'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeightUOM = obj_
            obj_.original_tagname_ = 'PackWeightUOM'
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolumeUOM = obj_
            obj_.original_tagname_ = 'PackVolumeUOM'
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'DimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DimensionUOM = obj_
            obj_.original_tagname_ = 'DimensionUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType


class PalletInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PalletQualifier=None, PalletValue=None, PalletTypeCode=None, PalletTiers=None, PalletBlocks=None, UnitWeight=None, UnitWeightUOM=None, Length=None, Width=None, Height=None, DimensionUOM=None, WeightQualifier=None, PalletWeight=None, PalletWeightUOM=None, PalletVolume=None, PalletVolumeUOM=None, UnloadedHeight=None, UnloadedHeightUOM=None, PalletExchangeCode=None, PalletStructureCode=None):
        self.original_tagname_ = None
        self.PalletQualifier = PalletQualifier
        self.PalletValue = PalletValue
        self.PalletTypeCode = PalletTypeCode
        self.PalletTiers = PalletTiers
        self.PalletBlocks = PalletBlocks
        self.UnitWeight = UnitWeight
        self.UnitWeightUOM = UnitWeightUOM
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.DimensionUOM = DimensionUOM
        self.WeightQualifier = WeightQualifier
        self.PalletWeight = PalletWeight
        self.PalletWeightUOM = PalletWeightUOM
        self.PalletVolume = PalletVolume
        self.PalletVolumeUOM = PalletVolumeUOM
        self.UnloadedHeight = UnloadedHeight
        self.UnloadedHeightUOM = UnloadedHeightUOM
        self.PalletExchangeCode = PalletExchangeCode
        self.PalletStructureCode = PalletStructureCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletInformationType.subclass:
            return PalletInformationType.subclass(*args_, **kwargs_)
        else:
            return PalletInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletQualifier(self): return self.PalletQualifier
    def set_PalletQualifier(self, PalletQualifier): self.PalletQualifier = PalletQualifier
    def get_PalletValue(self): return self.PalletValue
    def set_PalletValue(self, PalletValue): self.PalletValue = PalletValue
    def get_PalletTypeCode(self): return self.PalletTypeCode
    def set_PalletTypeCode(self, PalletTypeCode): self.PalletTypeCode = PalletTypeCode
    def get_PalletTiers(self): return self.PalletTiers
    def set_PalletTiers(self, PalletTiers): self.PalletTiers = PalletTiers
    def get_PalletBlocks(self): return self.PalletBlocks
    def set_PalletBlocks(self, PalletBlocks): self.PalletBlocks = PalletBlocks
    def get_UnitWeight(self): return self.UnitWeight
    def set_UnitWeight(self, UnitWeight): self.UnitWeight = UnitWeight
    def get_UnitWeightUOM(self): return self.UnitWeightUOM
    def set_UnitWeightUOM(self, UnitWeightUOM): self.UnitWeightUOM = UnitWeightUOM
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_DimensionUOM(self): return self.DimensionUOM
    def set_DimensionUOM(self, DimensionUOM): self.DimensionUOM = DimensionUOM
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PalletWeight(self): return self.PalletWeight
    def set_PalletWeight(self, PalletWeight): self.PalletWeight = PalletWeight
    def get_PalletWeightUOM(self): return self.PalletWeightUOM
    def set_PalletWeightUOM(self, PalletWeightUOM): self.PalletWeightUOM = PalletWeightUOM
    def get_PalletVolume(self): return self.PalletVolume
    def set_PalletVolume(self, PalletVolume): self.PalletVolume = PalletVolume
    def get_PalletVolumeUOM(self): return self.PalletVolumeUOM
    def set_PalletVolumeUOM(self, PalletVolumeUOM): self.PalletVolumeUOM = PalletVolumeUOM
    def get_UnloadedHeight(self): return self.UnloadedHeight
    def set_UnloadedHeight(self, UnloadedHeight): self.UnloadedHeight = UnloadedHeight
    def get_UnloadedHeightUOM(self): return self.UnloadedHeightUOM
    def set_UnloadedHeightUOM(self, UnloadedHeightUOM): self.UnloadedHeightUOM = UnloadedHeightUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def get_PalletStructureCode(self): return self.PalletStructureCode
    def set_PalletStructureCode(self, PalletStructureCode): self.PalletStructureCode = PalletStructureCode
    def hasContent_(self):
        if (
            self.PalletQualifier is not None or
            self.PalletValue is not None or
            self.PalletTypeCode is not None or
            self.PalletTiers is not None or
            self.PalletBlocks is not None or
            self.UnitWeight is not None or
            self.UnitWeightUOM is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.DimensionUOM is not None or
            self.WeightQualifier is not None or
            self.PalletWeight is not None or
            self.PalletWeightUOM is not None or
            self.PalletVolume is not None or
            self.PalletVolumeUOM is not None or
            self.UnloadedHeight is not None or
            self.UnloadedHeightUOM is not None or
            self.PalletExchangeCode is not None or
            self.PalletStructureCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PalletInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PalletInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PalletInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PalletInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletQualifier is not None:
            self.PalletQualifier.export(outfile, level, namespace_, name_='PalletQualifier', pretty_print=pretty_print)
        if self.PalletValue is not None:
            self.PalletValue.export(outfile, level, namespace_, name_='PalletValue', pretty_print=pretty_print)
        if self.PalletTypeCode is not None:
            self.PalletTypeCode.export(outfile, level, namespace_, name_='PalletTypeCode', pretty_print=pretty_print)
        if self.PalletTiers is not None:
            self.PalletTiers.export(outfile, level, namespace_, name_='PalletTiers', pretty_print=pretty_print)
        if self.PalletBlocks is not None:
            self.PalletBlocks.export(outfile, level, namespace_, name_='PalletBlocks', pretty_print=pretty_print)
        if self.UnitWeight is not None:
            self.UnitWeight.export(outfile, level, namespace_, name_='UnitWeight', pretty_print=pretty_print)
        if self.UnitWeightUOM is not None:
            self.UnitWeightUOM.export(outfile, level, namespace_, name_='UnitWeightUOM', pretty_print=pretty_print)
        if self.Length is not None:
            self.Length.export(outfile, level, namespace_, name_='Length', pretty_print=pretty_print)
        if self.Width is not None:
            self.Width.export(outfile, level, namespace_, name_='Width', pretty_print=pretty_print)
        if self.Height is not None:
            self.Height.export(outfile, level, namespace_, name_='Height', pretty_print=pretty_print)
        if self.DimensionUOM is not None:
            self.DimensionUOM.export(outfile, level, namespace_, name_='DimensionUOM', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PalletWeight is not None:
            self.PalletWeight.export(outfile, level, namespace_, name_='PalletWeight', pretty_print=pretty_print)
        if self.PalletWeightUOM is not None:
            self.PalletWeightUOM.export(outfile, level, namespace_, name_='PalletWeightUOM', pretty_print=pretty_print)
        if self.PalletVolume is not None:
            self.PalletVolume.export(outfile, level, namespace_, name_='PalletVolume', pretty_print=pretty_print)
        if self.PalletVolumeUOM is not None:
            self.PalletVolumeUOM.export(outfile, level, namespace_, name_='PalletVolumeUOM', pretty_print=pretty_print)
        if self.UnloadedHeight is not None:
            self.UnloadedHeight.export(outfile, level, namespace_, name_='UnloadedHeight', pretty_print=pretty_print)
        if self.UnloadedHeightUOM is not None:
            self.UnloadedHeightUOM.export(outfile, level, namespace_, name_='UnloadedHeightUOM', pretty_print=pretty_print)
        if self.PalletExchangeCode is not None:
            self.PalletExchangeCode.export(outfile, level, namespace_, name_='PalletExchangeCode', pretty_print=pretty_print)
        if self.PalletStructureCode is not None:
            self.PalletStructureCode.export(outfile, level, namespace_, name_='PalletStructureCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletQualifier = obj_
            obj_.original_tagname_ = 'PalletQualifier'
        elif nodeName_ == 'PalletValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletValue = obj_
            obj_.original_tagname_ = 'PalletValue'
        elif nodeName_ == 'PalletTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTypeCode = obj_
            obj_.original_tagname_ = 'PalletTypeCode'
        elif nodeName_ == 'PalletTiers':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTiers = obj_
            obj_.original_tagname_ = 'PalletTiers'
        elif nodeName_ == 'PalletBlocks':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletBlocks = obj_
            obj_.original_tagname_ = 'PalletBlocks'
        elif nodeName_ == 'UnitWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeight = obj_
            obj_.original_tagname_ = 'UnitWeight'
        elif nodeName_ == 'UnitWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeightUOM = obj_
            obj_.original_tagname_ = 'UnitWeightUOM'
        elif nodeName_ == 'Length':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Length = obj_
            obj_.original_tagname_ = 'Length'
        elif nodeName_ == 'Width':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Width = obj_
            obj_.original_tagname_ = 'Width'
        elif nodeName_ == 'Height':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Height = obj_
            obj_.original_tagname_ = 'Height'
        elif nodeName_ == 'DimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DimensionUOM = obj_
            obj_.original_tagname_ = 'DimensionUOM'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PalletWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'PalletWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeightUOM = obj_
            obj_.original_tagname_ = 'PalletWeightUOM'
        elif nodeName_ == 'PalletVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolume = obj_
            obj_.original_tagname_ = 'PalletVolume'
        elif nodeName_ == 'PalletVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolumeUOM = obj_
            obj_.original_tagname_ = 'PalletVolumeUOM'
        elif nodeName_ == 'UnloadedHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnloadedHeight = obj_
            obj_.original_tagname_ = 'UnloadedHeight'
        elif nodeName_ == 'UnloadedHeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnloadedHeightUOM = obj_
            obj_.original_tagname_ = 'UnloadedHeightUOM'
        elif nodeName_ == 'PalletExchangeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletExchangeCode = obj_
            obj_.original_tagname_ = 'PalletExchangeCode'
        elif nodeName_ == 'PalletStructureCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletStructureCode = obj_
            obj_.original_tagname_ = 'PalletStructureCode'
# end class PalletInformationType


class ReferencesType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date=None, Time=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date = Date
        self.Time = Time
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferencesType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferencesType6.subclass:
            return ReferencesType6.subclass(*args_, **kwargs_)
        else:
            return ReferencesType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date is not None or
            self.Time is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferencesType6', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferencesType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferencesType6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferencesType6'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferencesType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType7.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferencesType6


class ReferenceIDsType7(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType7.subclass:
            return ReferenceIDsType7.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType7', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType7', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType7'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType7


class NotesType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, Note=None, LanguageCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.Note = Note
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType8.subclass:
            return NotesType8.subclass(*args_, **kwargs_)
        else:
            return NotesType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.Note is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType8', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType8'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.Note is not None:
            self.Note.export(outfile, level, namespace_, name_='Note', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'Note':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Note = obj_
            obj_.original_tagname_ = 'Note'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class NotesType8


class FloorReadyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FloorReadyRequired=None, FloorReadyTypeCode=None, FloorReadyDescription=None, FloorReadyID=None):
        self.original_tagname_ = None
        self.FloorReadyRequired = FloorReadyRequired
        self.FloorReadyTypeCode = FloorReadyTypeCode
        self.FloorReadyDescription = FloorReadyDescription
        self.FloorReadyID = FloorReadyID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FloorReadyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FloorReadyType.subclass:
            return FloorReadyType.subclass(*args_, **kwargs_)
        else:
            return FloorReadyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FloorReadyRequired(self): return self.FloorReadyRequired
    def set_FloorReadyRequired(self, FloorReadyRequired): self.FloorReadyRequired = FloorReadyRequired
    def get_FloorReadyTypeCode(self): return self.FloorReadyTypeCode
    def set_FloorReadyTypeCode(self, FloorReadyTypeCode): self.FloorReadyTypeCode = FloorReadyTypeCode
    def get_FloorReadyDescription(self): return self.FloorReadyDescription
    def set_FloorReadyDescription(self, FloorReadyDescription): self.FloorReadyDescription = FloorReadyDescription
    def get_FloorReadyID(self): return self.FloorReadyID
    def set_FloorReadyID(self, FloorReadyID): self.FloorReadyID = FloorReadyID
    def hasContent_(self):
        if (
            self.FloorReadyRequired is not None or
            self.FloorReadyTypeCode is not None or
            self.FloorReadyDescription is not None or
            self.FloorReadyID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FloorReadyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FloorReadyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FloorReadyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FloorReadyType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FloorReadyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FloorReadyRequired is not None:
            self.FloorReadyRequired.export(outfile, level, namespace_, name_='FloorReadyRequired', pretty_print=pretty_print)
        if self.FloorReadyTypeCode is not None:
            self.FloorReadyTypeCode.export(outfile, level, namespace_, name_='FloorReadyTypeCode', pretty_print=pretty_print)
        if self.FloorReadyDescription is not None:
            self.FloorReadyDescription.export(outfile, level, namespace_, name_='FloorReadyDescription', pretty_print=pretty_print)
        if self.FloorReadyID is not None:
            self.FloorReadyID.export(outfile, level, namespace_, name_='FloorReadyID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FloorReadyRequired':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FloorReadyRequired = obj_
            obj_.original_tagname_ = 'FloorReadyRequired'
        elif nodeName_ == 'FloorReadyTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FloorReadyTypeCode = obj_
            obj_.original_tagname_ = 'FloorReadyTypeCode'
        elif nodeName_ == 'FloorReadyDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FloorReadyDescription = obj_
            obj_.original_tagname_ = 'FloorReadyDescription'
        elif nodeName_ == 'FloorReadyID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FloorReadyID = obj_
            obj_.original_tagname_ = 'FloorReadyID'
# end class FloorReadyType


class DatesType9(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier=None, Date=None, Time=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier = DateTimeQualifier
        self.Date = Date
        self.Time = Time
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatesType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatesType9.subclass:
            return DatesType9.subclass(*args_, **kwargs_)
        else:
            return DatesType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier(self): return self.DateTimeQualifier
    def set_DateTimeQualifier(self, DateTimeQualifier): self.DateTimeQualifier = DateTimeQualifier
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier is not None or
            self.Date is not None or
            self.Time is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatesType9', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatesType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatesType9', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatesType9'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatesType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier is not None:
            self.DateTimeQualifier.export(outfile, level, namespace_, name_='DateTimeQualifier', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier = obj_
            obj_.original_tagname_ = 'DateTimeQualifier'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DatesType9


class MeasurementsType10(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType10)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType10.subclass:
            return MeasurementsType10.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType10', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType10', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType10'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType10


class PriceDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, ExpirationDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, UnitPriceBasisMultiplier=None, BuyersCurrency=None, SellersCurrency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None, PartnerID=None, PricingArea=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.ExpirationDate = ExpirationDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.UnitPriceBasisMultiplier = UnitPriceBasisMultiplier
        self.BuyersCurrency = BuyersCurrency
        self.SellersCurrency = SellersCurrency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
        self.PartnerID = PartnerID
        self.PricingArea = PricingArea
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceDetailsType.subclass:
            return PriceDetailsType.subclass(*args_, **kwargs_)
        else:
            return PriceDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_UnitPriceBasisMultiplier(self): return self.UnitPriceBasisMultiplier
    def set_UnitPriceBasisMultiplier(self, UnitPriceBasisMultiplier): self.UnitPriceBasisMultiplier = UnitPriceBasisMultiplier
    def get_BuyersCurrency(self): return self.BuyersCurrency
    def set_BuyersCurrency(self, BuyersCurrency): self.BuyersCurrency = BuyersCurrency
    def get_SellersCurrency(self): return self.SellersCurrency
    def set_SellersCurrency(self, SellersCurrency): self.SellersCurrency = SellersCurrency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PartnerID(self): return self.PartnerID
    def set_PartnerID(self, PartnerID): self.PartnerID = PartnerID
    def get_PricingArea(self): return self.PricingArea
    def set_PricingArea(self, PricingArea): self.PricingArea = PricingArea
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.ExpirationDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.UnitPriceBasisMultiplier is not None or
            self.BuyersCurrency is not None or
            self.SellersCurrency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None or
            self.PartnerID is not None or
            self.PricingArea is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.ExpirationDate is not None:
            self.ExpirationDate.export(outfile, level, namespace_, name_='ExpirationDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.UnitPriceBasisMultiplier is not None:
            self.UnitPriceBasisMultiplier.export(outfile, level, namespace_, name_='UnitPriceBasisMultiplier', pretty_print=pretty_print)
        if self.BuyersCurrency is not None:
            self.BuyersCurrency.export(outfile, level, namespace_, name_='BuyersCurrency', pretty_print=pretty_print)
        if self.SellersCurrency is not None:
            self.SellersCurrency.export(outfile, level, namespace_, name_='SellersCurrency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.PartnerID is not None:
            self.PartnerID.export(outfile, level, namespace_, name_='PartnerID', pretty_print=pretty_print)
        if self.PricingArea is not None:
            self.PricingArea.export(outfile, level, namespace_, name_='PricingArea', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'ExpirationDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExpirationDate = obj_
            obj_.original_tagname_ = 'ExpirationDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'UnitPriceBasisMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasisMultiplier = obj_
            obj_.original_tagname_ = 'UnitPriceBasisMultiplier'
        elif nodeName_ == 'BuyersCurrency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyersCurrency = obj_
            obj_.original_tagname_ = 'BuyersCurrency'
        elif nodeName_ == 'SellersCurrency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellersCurrency = obj_
            obj_.original_tagname_ = 'SellersCurrency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'PartnerID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartnerID = obj_
            obj_.original_tagname_ = 'PartnerID'
        elif nodeName_ == 'PricingArea':
            obj_ = PricingAreaType.factory()
            obj_.build(child_)
            self.PricingArea = obj_
            obj_.original_tagname_ = 'PricingArea'
# end class PriceDetailsType


class PricingAreaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PricingAreaQualifier=None, PricingAreaIdentifier=None, Description=None):
        self.original_tagname_ = None
        self.PricingAreaQualifier = PricingAreaQualifier
        self.PricingAreaIdentifier = PricingAreaIdentifier
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PricingAreaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PricingAreaType.subclass:
            return PricingAreaType.subclass(*args_, **kwargs_)
        else:
            return PricingAreaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PricingAreaQualifier(self): return self.PricingAreaQualifier
    def set_PricingAreaQualifier(self, PricingAreaQualifier): self.PricingAreaQualifier = PricingAreaQualifier
    def get_PricingAreaIdentifier(self): return self.PricingAreaIdentifier
    def set_PricingAreaIdentifier(self, PricingAreaIdentifier): self.PricingAreaIdentifier = PricingAreaIdentifier
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.PricingAreaQualifier is not None or
            self.PricingAreaIdentifier is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PricingAreaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PricingAreaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PricingAreaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PricingAreaType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PricingAreaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PricingAreaQualifier is not None:
            self.PricingAreaQualifier.export(outfile, level, namespace_, name_='PricingAreaQualifier', pretty_print=pretty_print)
        if self.PricingAreaIdentifier is not None:
            self.PricingAreaIdentifier.export(outfile, level, namespace_, name_='PricingAreaIdentifier', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PricingAreaQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PricingAreaQualifier = obj_
            obj_.original_tagname_ = 'PricingAreaQualifier'
        elif nodeName_ == 'PricingAreaIdentifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PricingAreaIdentifier = obj_
            obj_.original_tagname_ = 'PricingAreaIdentifier'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PricingAreaType


class ProductOrItemDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType.subclass:
            return ProductOrItemDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType


class AddressType11(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, References=None, Contacts=None, Dates=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.References = References
        self.Contacts = Contacts
        self.Dates = Dates
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType11)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType11.subclass:
            return AddressType11.subclass(*args_, **kwargs_)
        else:
            return AddressType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_References(self): return self.References
    def set_References(self, References): self.References = References
    def get_Contacts(self): return self.Contacts
    def set_Contacts(self, Contacts): self.Contacts = Contacts
    def get_Dates(self): return self.Dates
    def set_Dates(self, Dates): self.Dates = Dates
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.References is not None or
            self.Contacts is not None or
            self.Dates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType11', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType11')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType11', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType11'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.References is not None:
            self.References.export(outfile, level, namespace_, name_='References', pretty_print=pretty_print)
        if self.Contacts is not None:
            self.Contacts.export(outfile, level, namespace_, name_='Contacts', pretty_print=pretty_print)
        if self.Dates is not None:
            self.Dates.export(outfile, level, namespace_, name_='Dates', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'References':
            obj_ = ReferencesType12.factory()
            obj_.build(child_)
            self.References = obj_
            obj_.original_tagname_ = 'References'
        elif nodeName_ == 'Contacts':
            obj_ = ContactsType14.factory()
            obj_.build(child_)
            self.Contacts = obj_
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'Dates':
            obj_ = DatesType16.factory()
            obj_.build(child_)
            self.Dates = obj_
            obj_.original_tagname_ = 'Dates'
# end class AddressType11


class ReferencesType12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date=None, Time=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date = Date
        self.Time = Time
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferencesType12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferencesType12.subclass:
            return ReferencesType12.subclass(*args_, **kwargs_)
        else:
            return ReferencesType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date is not None or
            self.Time is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferencesType12', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferencesType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferencesType12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferencesType12'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferencesType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType13.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferencesType12


class ReferenceIDsType13(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType13)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType13.subclass:
            return ReferenceIDsType13.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType13', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType13')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType13', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType13'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType13


class ContactsType14(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactsType14)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactsType14.subclass:
            return ContactsType14.subclass(*args_, **kwargs_)
        else:
            return ContactsType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactsType14', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactsType14')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactsType14', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactsType14'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactsType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType15.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactsType14


class AdditionalContactDetailsType15(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType15.subclass:
            return AdditionalContactDetailsType15.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType15', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType15'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType15


class DatesType16(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier=None, Date=None, Time=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier = DateTimeQualifier
        self.Date = Date
        self.Time = Time
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatesType16)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatesType16.subclass:
            return DatesType16.subclass(*args_, **kwargs_)
        else:
            return DatesType16(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier(self): return self.DateTimeQualifier
    def set_DateTimeQualifier(self, DateTimeQualifier): self.DateTimeQualifier = DateTimeQualifier
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier is not None or
            self.Date is not None or
            self.Time is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatesType16', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatesType16')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatesType16', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatesType16'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatesType16', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier is not None:
            self.DateTimeQualifier.export(outfile, level, namespace_, name_='DateTimeQualifier', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier = obj_
            obj_.original_tagname_ = 'DateTimeQualifier'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DatesType16


class SublineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceDetails=None, ProductOrItemDescription=None, RegulatoryCompliances=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        self.PriceDetails = PriceDetails
        self.ProductOrItemDescription = ProductOrItemDescription
        self.RegulatoryCompliances = RegulatoryCompliances
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType.subclass:
            return SublineType.subclass(*args_, **kwargs_)
        else:
            return SublineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceDetails(self): return self.PriceDetails
    def set_PriceDetails(self, PriceDetails): self.PriceDetails = PriceDetails
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_RegulatoryCompliances(self): return self.RegulatoryCompliances
    def set_RegulatoryCompliances(self, RegulatoryCompliances): self.RegulatoryCompliances = RegulatoryCompliances
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceDetails is not None or
            self.ProductOrItemDescription is not None or
            self.RegulatoryCompliances is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        if self.PriceDetails is not None:
            self.PriceDetails.export(outfile, level, namespace_, name_='PriceDetails', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.RegulatoryCompliances is not None:
            self.RegulatoryCompliances.export(outfile, level, namespace_, name_='RegulatoryCompliances', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceDetails':
            obj_ = PriceDetailsType19.factory()
            obj_.build(child_)
            self.PriceDetails = obj_
            obj_.original_tagname_ = 'PriceDetails'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType20.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'RegulatoryCompliances':
            obj_ = RegulatoryCompliancesType21.factory()
            obj_.build(child_)
            self.RegulatoryCompliances = obj_
            obj_.original_tagname_ = 'RegulatoryCompliances'
# end class SublineType


class SublineItemDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, Gender=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.Gender = Gender
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType.subclass:
            return SublineItemDetailType.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_Gender(self): return self.Gender
    def set_Gender(self, Gender): self.Gender = Gender
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.Gender is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            self.QtyPerUOM.export(outfile, level, namespace_, name_='QtyPerUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.Gender is not None:
            self.Gender.export(outfile, level, namespace_, name_='Gender', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType17.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPerUOM = obj_
            obj_.original_tagname_ = 'QtyPerUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'Gender':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Gender = obj_
            obj_.original_tagname_ = 'Gender'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType18.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType


class ProductIDType17(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType17)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType17.subclass:
            return ProductIDType17.subclass(*args_, **kwargs_)
        else:
            return ProductIDType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType17', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType17')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType17', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType17'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType17', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType17


class NRFStandardColorAndSizeType18(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType18)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType18.subclass:
            return NRFStandardColorAndSizeType18.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType18(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType18', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType18')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType18', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType18'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType18', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType18


class PriceDetailsType19(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, UnitPriceBasisMultiplier=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.UnitPriceBasisMultiplier = UnitPriceBasisMultiplier
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceDetailsType19)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceDetailsType19.subclass:
            return PriceDetailsType19.subclass(*args_, **kwargs_)
        else:
            return PriceDetailsType19(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_UnitPriceBasisMultiplier(self): return self.UnitPriceBasisMultiplier
    def set_UnitPriceBasisMultiplier(self, UnitPriceBasisMultiplier): self.UnitPriceBasisMultiplier = UnitPriceBasisMultiplier
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.UnitPriceBasisMultiplier is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceDetailsType19', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceDetailsType19')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceDetailsType19', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceDetailsType19'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceDetailsType19', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.UnitPriceBasisMultiplier is not None:
            self.UnitPriceBasisMultiplier.export(outfile, level, namespace_, name_='UnitPriceBasisMultiplier', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'UnitPriceBasisMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasisMultiplier = obj_
            obj_.original_tagname_ = 'UnitPriceBasisMultiplier'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceDetailsType19


class ProductOrItemDescriptionType20(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType20)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType20.subclass:
            return ProductOrItemDescriptionType20.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType20', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType20')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType20', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType20'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType20


class RegulatoryCompliancesType21(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RegulatoryComplianceQual=None, YesOrNoResponse=None, RegulatoryComplianceID=None, RegulatoryAgency=None, Description=None):
        self.original_tagname_ = None
        self.RegulatoryComplianceQual = RegulatoryComplianceQual
        self.YesOrNoResponse = YesOrNoResponse
        self.RegulatoryComplianceID = RegulatoryComplianceID
        self.RegulatoryAgency = RegulatoryAgency
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegulatoryCompliancesType21)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegulatoryCompliancesType21.subclass:
            return RegulatoryCompliancesType21.subclass(*args_, **kwargs_)
        else:
            return RegulatoryCompliancesType21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RegulatoryComplianceQual(self): return self.RegulatoryComplianceQual
    def set_RegulatoryComplianceQual(self, RegulatoryComplianceQual): self.RegulatoryComplianceQual = RegulatoryComplianceQual
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_RegulatoryComplianceID(self): return self.RegulatoryComplianceID
    def set_RegulatoryComplianceID(self, RegulatoryComplianceID): self.RegulatoryComplianceID = RegulatoryComplianceID
    def get_RegulatoryAgency(self): return self.RegulatoryAgency
    def set_RegulatoryAgency(self, RegulatoryAgency): self.RegulatoryAgency = RegulatoryAgency
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.RegulatoryComplianceQual is not None or
            self.YesOrNoResponse is not None or
            self.RegulatoryComplianceID is not None or
            self.RegulatoryAgency is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RegulatoryCompliancesType21', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RegulatoryCompliancesType21')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RegulatoryCompliancesType21', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RegulatoryCompliancesType21'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RegulatoryCompliancesType21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegulatoryComplianceQual is not None:
            self.RegulatoryComplianceQual.export(outfile, level, namespace_, name_='RegulatoryComplianceQual', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.RegulatoryComplianceID is not None:
            self.RegulatoryComplianceID.export(outfile, level, namespace_, name_='RegulatoryComplianceID', pretty_print=pretty_print)
        if self.RegulatoryAgency is not None:
            self.RegulatoryAgency.export(outfile, level, namespace_, name_='RegulatoryAgency', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RegulatoryComplianceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryComplianceQual = obj_
            obj_.original_tagname_ = 'RegulatoryComplianceQual'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'RegulatoryComplianceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryComplianceID = obj_
            obj_.original_tagname_ = 'RegulatoryComplianceID'
        elif nodeName_ == 'RegulatoryAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryAgency = obj_
            obj_.original_tagname_ = 'RegulatoryAgency'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class RegulatoryCompliancesType21


class QuantitiesSchedulesLocationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, QuantityQualifier=None, TotalQty=None, TotalQtyUOM=None, QuantityDescription=None, LocationCodeQualifier=None, LocationDescription=None, LocationQuantity=None, Dates=None, AssignedID=None, LeadTimeCode=None, LeadTimeQuantity=None, LeadTimePeriodInterval=None, LeadTimeDate=None):
        self.original_tagname_ = None
        self.QuantityQualifier = QuantityQualifier
        self.TotalQty = TotalQty
        self.TotalQtyUOM = TotalQtyUOM
        self.QuantityDescription = QuantityDescription
        self.LocationCodeQualifier = LocationCodeQualifier
        self.LocationDescription = LocationDescription
        self.LocationQuantity = LocationQuantity
        self.Dates = Dates
        self.AssignedID = AssignedID
        self.LeadTimeCode = LeadTimeCode
        self.LeadTimeQuantity = LeadTimeQuantity
        self.LeadTimePeriodInterval = LeadTimePeriodInterval
        self.LeadTimeDate = LeadTimeDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantitiesSchedulesLocationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantitiesSchedulesLocationsType.subclass:
            return QuantitiesSchedulesLocationsType.subclass(*args_, **kwargs_)
        else:
            return QuantitiesSchedulesLocationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_QuantityQualifier(self): return self.QuantityQualifier
    def set_QuantityQualifier(self, QuantityQualifier): self.QuantityQualifier = QuantityQualifier
    def get_TotalQty(self): return self.TotalQty
    def set_TotalQty(self, TotalQty): self.TotalQty = TotalQty
    def get_TotalQtyUOM(self): return self.TotalQtyUOM
    def set_TotalQtyUOM(self, TotalQtyUOM): self.TotalQtyUOM = TotalQtyUOM
    def get_QuantityDescription(self): return self.QuantityDescription
    def set_QuantityDescription(self, QuantityDescription): self.QuantityDescription = QuantityDescription
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_LocationDescription(self): return self.LocationDescription
    def set_LocationDescription(self, LocationDescription): self.LocationDescription = LocationDescription
    def get_LocationQuantity(self): return self.LocationQuantity
    def set_LocationQuantity(self, LocationQuantity): self.LocationQuantity = LocationQuantity
    def get_Dates(self): return self.Dates
    def set_Dates(self, Dates): self.Dates = Dates
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_LeadTimeCode(self): return self.LeadTimeCode
    def set_LeadTimeCode(self, LeadTimeCode): self.LeadTimeCode = LeadTimeCode
    def get_LeadTimeQuantity(self): return self.LeadTimeQuantity
    def set_LeadTimeQuantity(self, LeadTimeQuantity): self.LeadTimeQuantity = LeadTimeQuantity
    def get_LeadTimePeriodInterval(self): return self.LeadTimePeriodInterval
    def set_LeadTimePeriodInterval(self, LeadTimePeriodInterval): self.LeadTimePeriodInterval = LeadTimePeriodInterval
    def get_LeadTimeDate(self): return self.LeadTimeDate
    def set_LeadTimeDate(self, LeadTimeDate): self.LeadTimeDate = LeadTimeDate
    def hasContent_(self):
        if (
            self.QuantityQualifier is not None or
            self.TotalQty is not None or
            self.TotalQtyUOM is not None or
            self.QuantityDescription is not None or
            self.LocationCodeQualifier is not None or
            self.LocationDescription is not None or
            self.LocationQuantity is not None or
            self.Dates is not None or
            self.AssignedID is not None or
            self.LeadTimeCode is not None or
            self.LeadTimeQuantity is not None or
            self.LeadTimePeriodInterval is not None or
            self.LeadTimeDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantitiesSchedulesLocationsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantitiesSchedulesLocationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantitiesSchedulesLocationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantitiesSchedulesLocationsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantitiesSchedulesLocationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QuantityQualifier is not None:
            self.QuantityQualifier.export(outfile, level, namespace_, name_='QuantityQualifier', pretty_print=pretty_print)
        if self.TotalQty is not None:
            self.TotalQty.export(outfile, level, namespace_, name_='TotalQty', pretty_print=pretty_print)
        if self.TotalQtyUOM is not None:
            self.TotalQtyUOM.export(outfile, level, namespace_, name_='TotalQtyUOM', pretty_print=pretty_print)
        if self.QuantityDescription is not None:
            self.QuantityDescription.export(outfile, level, namespace_, name_='QuantityDescription', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.LocationDescription is not None:
            self.LocationDescription.export(outfile, level, namespace_, name_='LocationDescription', pretty_print=pretty_print)
        if self.LocationQuantity is not None:
            self.LocationQuantity.export(outfile, level, namespace_, name_='LocationQuantity', pretty_print=pretty_print)
        if self.Dates is not None:
            self.Dates.export(outfile, level, namespace_, name_='Dates', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.LeadTimeCode is not None:
            self.LeadTimeCode.export(outfile, level, namespace_, name_='LeadTimeCode', pretty_print=pretty_print)
        if self.LeadTimeQuantity is not None:
            self.LeadTimeQuantity.export(outfile, level, namespace_, name_='LeadTimeQuantity', pretty_print=pretty_print)
        if self.LeadTimePeriodInterval is not None:
            self.LeadTimePeriodInterval.export(outfile, level, namespace_, name_='LeadTimePeriodInterval', pretty_print=pretty_print)
        if self.LeadTimeDate is not None:
            self.LeadTimeDate.export(outfile, level, namespace_, name_='LeadTimeDate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'QuantityQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityQualifier = obj_
            obj_.original_tagname_ = 'QuantityQualifier'
        elif nodeName_ == 'TotalQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalQty = obj_
            obj_.original_tagname_ = 'TotalQty'
        elif nodeName_ == 'TotalQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalQtyUOM = obj_
            obj_.original_tagname_ = 'TotalQtyUOM'
        elif nodeName_ == 'QuantityDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityDescription = obj_
            obj_.original_tagname_ = 'QuantityDescription'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'LocationDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationDescription = obj_
            obj_.original_tagname_ = 'LocationDescription'
        elif nodeName_ == 'LocationQuantity':
            obj_ = LocationQuantityType.factory()
            obj_.build(child_)
            self.LocationQuantity = obj_
            obj_.original_tagname_ = 'LocationQuantity'
        elif nodeName_ == 'Dates':
            obj_ = DatesType22.factory()
            obj_.build(child_)
            self.Dates = obj_
            obj_.original_tagname_ = 'Dates'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'LeadTimeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LeadTimeCode = obj_
            obj_.original_tagname_ = 'LeadTimeCode'
        elif nodeName_ == 'LeadTimeQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LeadTimeQuantity = obj_
            obj_.original_tagname_ = 'LeadTimeQuantity'
        elif nodeName_ == 'LeadTimePeriodInterval':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LeadTimePeriodInterval = obj_
            obj_.original_tagname_ = 'LeadTimePeriodInterval'
        elif nodeName_ == 'LeadTimeDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LeadTimeDate = obj_
            obj_.original_tagname_ = 'LeadTimeDate'
# end class QuantitiesSchedulesLocationsType


class LocationQuantityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Location=None, Qty=None):
        self.original_tagname_ = None
        self.Location = Location
        self.Qty = Qty
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationQuantityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationQuantityType.subclass:
            return LocationQuantityType.subclass(*args_, **kwargs_)
        else:
            return LocationQuantityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_Qty(self): return self.Qty
    def set_Qty(self, Qty): self.Qty = Qty
    def hasContent_(self):
        if (
            self.Location is not None or
            self.Qty is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LocationQuantityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationQuantityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LocationQuantityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LocationQuantityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LocationQuantityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Location is not None:
            self.Location.export(outfile, level, namespace_, name_='Location', pretty_print=pretty_print)
        if self.Qty is not None:
            self.Qty.export(outfile, level, namespace_, name_='Qty', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Location':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Location = obj_
            obj_.original_tagname_ = 'Location'
        elif nodeName_ == 'Qty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Qty = obj_
            obj_.original_tagname_ = 'Qty'
# end class LocationQuantityType


class DatesType22(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier=None, Date=None, Time=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier = DateTimeQualifier
        self.Date = Date
        self.Time = Time
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatesType22)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatesType22.subclass:
            return DatesType22.subclass(*args_, **kwargs_)
        else:
            return DatesType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier(self): return self.DateTimeQualifier
    def set_DateTimeQualifier(self, DateTimeQualifier): self.DateTimeQualifier = DateTimeQualifier
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier is not None or
            self.Date is not None or
            self.Time is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatesType22', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatesType22')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatesType22', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatesType22'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatesType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier is not None:
            self.DateTimeQualifier.export(outfile, level, namespace_, name_='DateTimeQualifier', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier = obj_
            obj_.original_tagname_ = 'DateTimeQualifier'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DatesType22


class TaxesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PercentDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PercentDollarBasis = PercentDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxesType.subclass:
            return TaxesType.subclass(*args_, **kwargs_)
        else:
            return TaxesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PercentDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxesType


class ChargesAllowancesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, CalculationSequence=None, Taxes=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.CalculationSequence = CalculationSequence
        self.Taxes = Taxes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType.subclass:
            return ChargesAllowancesType.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_CalculationSequence(self): return self.CalculationSequence
    def set_CalculationSequence(self, CalculationSequence): self.CalculationSequence = CalculationSequence
    def get_Taxes(self): return self.Taxes
    def set_Taxes(self, Taxes): self.Taxes = Taxes
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.CalculationSequence is not None or
            self.Taxes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.CalculationSequence is not None:
            self.CalculationSequence.export(outfile, level, namespace_, name_='CalculationSequence', pretty_print=pretty_print)
        if self.Taxes is not None:
            self.Taxes.export(outfile, level, namespace_, name_='Taxes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'CalculationSequence':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CalculationSequence = obj_
            obj_.original_tagname_ = 'CalculationSequence'
        elif nodeName_ == 'Taxes':
            obj_ = TaxesType23.factory()
            obj_.build(child_)
            self.Taxes = obj_
            obj_.original_tagname_ = 'Taxes'
# end class ChargesAllowancesType


class TaxesType23(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PercentDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PercentDollarBasis = PercentDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxesType23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxesType23.subclass:
            return TaxesType23.subclass(*args_, **kwargs_)
        else:
            return TaxesType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PercentDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxesType23', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxesType23')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxesType23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxesType23'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxesType23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxesType23


class CarrierInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None, SealNumbers=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
        self.SealNumbers = SealNumbers
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType.subclass:
            return CarrierInformationType.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_SealNumbers(self): return self.SealNumbers
    def set_SealNumbers(self, SealNumbers): self.SealNumbers = SealNumbers
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None or
            self.SealNumbers is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.SealNumbers is not None:
            self.SealNumbers.export(outfile, level, namespace_, name_='SealNumbers', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType24.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'SealNumbers':
            obj_ = SealNumbersType.factory()
            obj_.build(child_)
            self.SealNumbers = obj_
            obj_.original_tagname_ = 'SealNumbers'
# end class CarrierInformationType


class ServiceLevelCodesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType.subclass:
            return ServiceLevelCodesType.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType


class AddressType24(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Dates=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Dates = Dates
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType24.subclass:
            return AddressType24.subclass(*args_, **kwargs_)
        else:
            return AddressType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Dates(self): return self.Dates
    def set_Dates(self, Dates): self.Dates = Dates
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Dates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType24', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType24')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType24'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Dates is not None:
            self.Dates.export(outfile, level, namespace_, name_='Dates', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Dates':
            obj_ = DatesType25.factory()
            obj_.build(child_)
            self.Dates = obj_
            obj_.original_tagname_ = 'Dates'
# end class AddressType24


class DatesType25(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier=None, Date=None, Time=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier = DateTimeQualifier
        self.Date = Date
        self.Time = Time
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatesType25)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatesType25.subclass:
            return DatesType25.subclass(*args_, **kwargs_)
        else:
            return DatesType25(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier(self): return self.DateTimeQualifier
    def set_DateTimeQualifier(self, DateTimeQualifier): self.DateTimeQualifier = DateTimeQualifier
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier is not None or
            self.Date is not None or
            self.Time is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatesType25', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatesType25')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatesType25', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatesType25'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatesType25', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier is not None:
            self.DateTimeQualifier.export(outfile, level, namespace_, name_='DateTimeQualifier', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier = obj_
            obj_.original_tagname_ = 'DateTimeQualifier'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DatesType25


class SealNumbersType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SealStatusCode=None, SealNumber=None):
        self.original_tagname_ = None
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SealNumbersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SealNumbersType.subclass:
            return SealNumbersType.subclass(*args_, **kwargs_)
        else:
            return SealNumbersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def hasContent_(self):
        if (
            self.SealStatusCode is not None or
            self.SealNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SealNumbersType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SealNumbersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SealNumbersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SealNumbersType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SealNumbersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
# end class SealNumbersType


class CarrierSpecialHandlingDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.HazardousMaterialCode = HazardousMaterialCode
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType.subclass:
            return CarrierSpecialHandlingDetailType.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            self.SpecialHandlingCode.export(outfile, level, namespace_, name_='SpecialHandlingCode', pretty_print=pretty_print)
        if self.HazardousMaterialCode is not None:
            self.HazardousMaterialCode.export(outfile, level, namespace_, name_='HazardousMaterialCode', pretty_print=pretty_print)
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SpecialHandlingCode = obj_
            obj_.original_tagname_ = 'SpecialHandlingCode'
        elif nodeName_ == 'HazardousMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialCode = obj_
            obj_.original_tagname_ = 'HazardousMaterialCode'
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
# end class CarrierSpecialHandlingDetailType


class HazardousInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, QuantityUOM=None, UNIdentificationCode=None, PackingGroupCode=None, HazardousMaterialNameQualifier=None, HazardousMaterialName=None, CompartmentIDCode=None, FlashpointTemperature=None, TemperatureUOM=None, HazardousClassQualifier=None, HazardousClassification=None, References=None, Notes=None, Contacts=None):
        self.original_tagname_ = None
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.UNIdentificationCode = UNIdentificationCode
        self.PackingGroupCode = PackingGroupCode
        self.HazardousMaterialNameQualifier = HazardousMaterialNameQualifier
        self.HazardousMaterialName = HazardousMaterialName
        self.CompartmentIDCode = CompartmentIDCode
        self.FlashpointTemperature = FlashpointTemperature
        self.TemperatureUOM = TemperatureUOM
        self.HazardousClassQualifier = HazardousClassQualifier
        self.HazardousClassification = HazardousClassification
        self.References = References
        self.Notes = Notes
        self.Contacts = Contacts
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousInformationType.subclass:
            return HazardousInformationType.subclass(*args_, **kwargs_)
        else:
            return HazardousInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_UNIdentificationCode(self): return self.UNIdentificationCode
    def set_UNIdentificationCode(self, UNIdentificationCode): self.UNIdentificationCode = UNIdentificationCode
    def get_PackingGroupCode(self): return self.PackingGroupCode
    def set_PackingGroupCode(self, PackingGroupCode): self.PackingGroupCode = PackingGroupCode
    def get_HazardousMaterialNameQualifier(self): return self.HazardousMaterialNameQualifier
    def set_HazardousMaterialNameQualifier(self, HazardousMaterialNameQualifier): self.HazardousMaterialNameQualifier = HazardousMaterialNameQualifier
    def get_HazardousMaterialName(self): return self.HazardousMaterialName
    def set_HazardousMaterialName(self, HazardousMaterialName): self.HazardousMaterialName = HazardousMaterialName
    def get_CompartmentIDCode(self): return self.CompartmentIDCode
    def set_CompartmentIDCode(self, CompartmentIDCode): self.CompartmentIDCode = CompartmentIDCode
    def get_FlashpointTemperature(self): return self.FlashpointTemperature
    def set_FlashpointTemperature(self, FlashpointTemperature): self.FlashpointTemperature = FlashpointTemperature
    def get_TemperatureUOM(self): return self.TemperatureUOM
    def set_TemperatureUOM(self, TemperatureUOM): self.TemperatureUOM = TemperatureUOM
    def get_HazardousClassQualifier(self): return self.HazardousClassQualifier
    def set_HazardousClassQualifier(self, HazardousClassQualifier): self.HazardousClassQualifier = HazardousClassQualifier
    def get_HazardousClassification(self): return self.HazardousClassification
    def set_HazardousClassification(self, HazardousClassification): self.HazardousClassification = HazardousClassification
    def get_References(self): return self.References
    def set_References(self, References): self.References = References
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Contacts(self): return self.Contacts
    def set_Contacts(self, Contacts): self.Contacts = Contacts
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.UNIdentificationCode is not None or
            self.PackingGroupCode is not None or
            self.HazardousMaterialNameQualifier is not None or
            self.HazardousMaterialName is not None or
            self.CompartmentIDCode is not None or
            self.FlashpointTemperature is not None or
            self.TemperatureUOM is not None or
            self.HazardousClassQualifier is not None or
            self.HazardousClassification is not None or
            self.References is not None or
            self.Notes is not None or
            self.Contacts is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HazardousInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HazardousInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HazardousInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HazardousInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HazardousInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.UNIdentificationCode is not None:
            self.UNIdentificationCode.export(outfile, level, namespace_, name_='UNIdentificationCode', pretty_print=pretty_print)
        if self.PackingGroupCode is not None:
            self.PackingGroupCode.export(outfile, level, namespace_, name_='PackingGroupCode', pretty_print=pretty_print)
        if self.HazardousMaterialNameQualifier is not None:
            self.HazardousMaterialNameQualifier.export(outfile, level, namespace_, name_='HazardousMaterialNameQualifier', pretty_print=pretty_print)
        if self.HazardousMaterialName is not None:
            self.HazardousMaterialName.export(outfile, level, namespace_, name_='HazardousMaterialName', pretty_print=pretty_print)
        if self.CompartmentIDCode is not None:
            self.CompartmentIDCode.export(outfile, level, namespace_, name_='CompartmentIDCode', pretty_print=pretty_print)
        if self.FlashpointTemperature is not None:
            self.FlashpointTemperature.export(outfile, level, namespace_, name_='FlashpointTemperature', pretty_print=pretty_print)
        if self.TemperatureUOM is not None:
            self.TemperatureUOM.export(outfile, level, namespace_, name_='TemperatureUOM', pretty_print=pretty_print)
        if self.HazardousClassQualifier is not None:
            self.HazardousClassQualifier.export(outfile, level, namespace_, name_='HazardousClassQualifier', pretty_print=pretty_print)
        if self.HazardousClassification is not None:
            self.HazardousClassification.export(outfile, level, namespace_, name_='HazardousClassification', pretty_print=pretty_print)
        if self.References is not None:
            self.References.export(outfile, level, namespace_, name_='References', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Contacts is not None:
            self.Contacts.export(outfile, level, namespace_, name_='Contacts', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'UNIdentificationCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UNIdentificationCode = obj_
            obj_.original_tagname_ = 'UNIdentificationCode'
        elif nodeName_ == 'PackingGroupCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingGroupCode = obj_
            obj_.original_tagname_ = 'PackingGroupCode'
        elif nodeName_ == 'HazardousMaterialNameQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialNameQualifier = obj_
            obj_.original_tagname_ = 'HazardousMaterialNameQualifier'
        elif nodeName_ == 'HazardousMaterialName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialName = obj_
            obj_.original_tagname_ = 'HazardousMaterialName'
        elif nodeName_ == 'CompartmentIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompartmentIDCode = obj_
            obj_.original_tagname_ = 'CompartmentIDCode'
        elif nodeName_ == 'FlashpointTemperature':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FlashpointTemperature = obj_
            obj_.original_tagname_ = 'FlashpointTemperature'
        elif nodeName_ == 'TemperatureUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TemperatureUOM = obj_
            obj_.original_tagname_ = 'TemperatureUOM'
        elif nodeName_ == 'HazardousClassQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousClassQualifier = obj_
            obj_.original_tagname_ = 'HazardousClassQualifier'
        elif nodeName_ == 'HazardousClassification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousClassification = obj_
            obj_.original_tagname_ = 'HazardousClassification'
        elif nodeName_ == 'References':
            obj_ = ReferencesType26.factory()
            obj_.build(child_)
            self.References = obj_
            obj_.original_tagname_ = 'References'
        elif nodeName_ == 'Notes':
            obj_ = NotesType28.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Contacts':
            obj_ = ContactsType29.factory()
            obj_.build(child_)
            self.Contacts = obj_
            obj_.original_tagname_ = 'Contacts'
# end class HazardousInformationType


class ReferencesType26(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date=None, Time=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date = Date
        self.Time = Time
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferencesType26)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferencesType26.subclass:
            return ReferencesType26.subclass(*args_, **kwargs_)
        else:
            return ReferencesType26(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date is not None or
            self.Time is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferencesType26', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferencesType26')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferencesType26', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferencesType26'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferencesType26', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Time is not None:
            self.Time.export(outfile, level, namespace_, name_='Time', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Time':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time = obj_
            obj_.original_tagname_ = 'Time'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType27.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferencesType26


class ReferenceIDsType27(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType27)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType27.subclass:
            return ReferenceIDsType27.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType27', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType27')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType27', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType27'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType27', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType27


class NotesType28(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, Note=None, LanguageCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.Note = Note
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType28)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType28.subclass:
            return NotesType28.subclass(*args_, **kwargs_)
        else:
            return NotesType28(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.Note is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType28', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType28')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType28', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType28'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType28', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.Note is not None:
            self.Note.export(outfile, level, namespace_, name_='Note', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'Note':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Note = obj_
            obj_.original_tagname_ = 'Note'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class NotesType28


class ContactsType29(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactsType29)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactsType29.subclass:
            return ContactsType29.subclass(*args_, **kwargs_)
        else:
            return ContactsType29(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactsType29', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactsType29')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactsType29', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactsType29'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactsType29', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType30.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactsType29


class AdditionalContactDetailsType30(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType30)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType30.subclass:
            return AdditionalContactDetailsType30.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType30(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType30', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType30')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType30', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType30'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType30', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType30


class CommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None, Description=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class CommodityType


class SpecialLabelingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LabelName=None, Required=None, Compliant=None, LabelReason=None, RequirementLocations=None):
        self.original_tagname_ = None
        self.LabelName = LabelName
        self.Required = Required
        self.Compliant = Compliant
        self.LabelReason = LabelReason
        self.RequirementLocations = RequirementLocations
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialLabelingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialLabelingType.subclass:
            return SpecialLabelingType.subclass(*args_, **kwargs_)
        else:
            return SpecialLabelingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LabelName(self): return self.LabelName
    def set_LabelName(self, LabelName): self.LabelName = LabelName
    def get_Required(self): return self.Required
    def set_Required(self, Required): self.Required = Required
    def get_Compliant(self): return self.Compliant
    def set_Compliant(self, Compliant): self.Compliant = Compliant
    def get_LabelReason(self): return self.LabelReason
    def set_LabelReason(self, LabelReason): self.LabelReason = LabelReason
    def get_RequirementLocations(self): return self.RequirementLocations
    def set_RequirementLocations(self, RequirementLocations): self.RequirementLocations = RequirementLocations
    def hasContent_(self):
        if (
            self.LabelName is not None or
            self.Required is not None or
            self.Compliant is not None or
            self.LabelReason is not None or
            self.RequirementLocations is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SpecialLabelingType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialLabelingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SpecialLabelingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SpecialLabelingType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SpecialLabelingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelName is not None:
            self.LabelName.export(outfile, level, namespace_, name_='LabelName', pretty_print=pretty_print)
        if self.Required is not None:
            self.Required.export(outfile, level, namespace_, name_='Required', pretty_print=pretty_print)
        if self.Compliant is not None:
            self.Compliant.export(outfile, level, namespace_, name_='Compliant', pretty_print=pretty_print)
        if self.LabelReason is not None:
            self.LabelReason.export(outfile, level, namespace_, name_='LabelReason', pretty_print=pretty_print)
        if self.RequirementLocations is not None:
            self.RequirementLocations.export(outfile, level, namespace_, name_='RequirementLocations', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LabelName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LabelName = obj_
            obj_.original_tagname_ = 'LabelName'
        elif nodeName_ == 'Required':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Required = obj_
            obj_.original_tagname_ = 'Required'
        elif nodeName_ == 'Compliant':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Compliant = obj_
            obj_.original_tagname_ = 'Compliant'
        elif nodeName_ == 'LabelReason':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LabelReason = obj_
            obj_.original_tagname_ = 'LabelReason'
        elif nodeName_ == 'RequirementLocations':
            obj_ = RequirementLocationsType.factory()
            obj_.build(child_)
            self.RequirementLocations = obj_
            obj_.original_tagname_ = 'RequirementLocations'
# end class SpecialLabelingType


class RequirementLocationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, City=None, County=None, State=None, Province=None, Country=None):
        self.original_tagname_ = None
        self.City = City
        self.County = County
        self.State = State
        self.Province = Province
        self.Country = Country
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequirementLocationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequirementLocationsType.subclass:
            return RequirementLocationsType.subclass(*args_, **kwargs_)
        else:
            return RequirementLocationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_County(self): return self.County
    def set_County(self, County): self.County = County
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_Province(self): return self.Province
    def set_Province(self, Province): self.Province = Province
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def hasContent_(self):
        if (
            self.City is not None or
            self.County is not None or
            self.State is not None or
            self.Province is not None or
            self.Country is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RequirementLocationsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequirementLocationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RequirementLocationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RequirementLocationsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RequirementLocationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.County is not None:
            self.County.export(outfile, level, namespace_, name_='County', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.Province is not None:
            self.Province.export(outfile, level, namespace_, name_='Province', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'County':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.County = obj_
            obj_.original_tagname_ = 'County'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'Province':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Province = obj_
            obj_.original_tagname_ = 'Province'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
# end class RequirementLocationsType


class FOBRelatedInstructionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FOBPayCode=None, FOBLocationQualifier=None, FOBLocationDescription=None, FOBTitlePassageCode=None, FOBTitlePassageLocation=None, TransportationTermsType=None, TransportationTerms=None, RiskOfLossCode=None, Description=None):
        self.original_tagname_ = None
        self.FOBPayCode = FOBPayCode
        self.FOBLocationQualifier = FOBLocationQualifier
        self.FOBLocationDescription = FOBLocationDescription
        self.FOBTitlePassageCode = FOBTitlePassageCode
        self.FOBTitlePassageLocation = FOBTitlePassageLocation
        self.TransportationTermsType = TransportationTermsType
        self.TransportationTerms = TransportationTerms
        self.RiskOfLossCode = RiskOfLossCode
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOBRelatedInstructionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOBRelatedInstructionType.subclass:
            return FOBRelatedInstructionType.subclass(*args_, **kwargs_)
        else:
            return FOBRelatedInstructionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FOBPayCode(self): return self.FOBPayCode
    def set_FOBPayCode(self, FOBPayCode): self.FOBPayCode = FOBPayCode
    def get_FOBLocationQualifier(self): return self.FOBLocationQualifier
    def set_FOBLocationQualifier(self, FOBLocationQualifier): self.FOBLocationQualifier = FOBLocationQualifier
    def get_FOBLocationDescription(self): return self.FOBLocationDescription
    def set_FOBLocationDescription(self, FOBLocationDescription): self.FOBLocationDescription = FOBLocationDescription
    def get_FOBTitlePassageCode(self): return self.FOBTitlePassageCode
    def set_FOBTitlePassageCode(self, FOBTitlePassageCode): self.FOBTitlePassageCode = FOBTitlePassageCode
    def get_FOBTitlePassageLocation(self): return self.FOBTitlePassageLocation
    def set_FOBTitlePassageLocation(self, FOBTitlePassageLocation): self.FOBTitlePassageLocation = FOBTitlePassageLocation
    def get_TransportationTermsType(self): return self.TransportationTermsType
    def set_TransportationTermsType(self, TransportationTermsType): self.TransportationTermsType = TransportationTermsType
    def get_TransportationTerms(self): return self.TransportationTerms
    def set_TransportationTerms(self, TransportationTerms): self.TransportationTerms = TransportationTerms
    def get_RiskOfLossCode(self): return self.RiskOfLossCode
    def set_RiskOfLossCode(self, RiskOfLossCode): self.RiskOfLossCode = RiskOfLossCode
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.FOBPayCode is not None or
            self.FOBLocationQualifier is not None or
            self.FOBLocationDescription is not None or
            self.FOBTitlePassageCode is not None or
            self.FOBTitlePassageLocation is not None or
            self.TransportationTermsType is not None or
            self.TransportationTerms is not None or
            self.RiskOfLossCode is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOBRelatedInstructionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FOBRelatedInstructionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOBRelatedInstructionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FOBPayCode is not None:
            self.FOBPayCode.export(outfile, level, namespace_, name_='FOBPayCode', pretty_print=pretty_print)
        if self.FOBLocationQualifier is not None:
            self.FOBLocationQualifier.export(outfile, level, namespace_, name_='FOBLocationQualifier', pretty_print=pretty_print)
        if self.FOBLocationDescription is not None:
            self.FOBLocationDescription.export(outfile, level, namespace_, name_='FOBLocationDescription', pretty_print=pretty_print)
        if self.FOBTitlePassageCode is not None:
            self.FOBTitlePassageCode.export(outfile, level, namespace_, name_='FOBTitlePassageCode', pretty_print=pretty_print)
        if self.FOBTitlePassageLocation is not None:
            self.FOBTitlePassageLocation.export(outfile, level, namespace_, name_='FOBTitlePassageLocation', pretty_print=pretty_print)
        if self.TransportationTermsType is not None:
            self.TransportationTermsType.export(outfile, level, namespace_, name_='TransportationTermsType', pretty_print=pretty_print)
        if self.TransportationTerms is not None:
            self.TransportationTerms.export(outfile, level, namespace_, name_='TransportationTerms', pretty_print=pretty_print)
        if self.RiskOfLossCode is not None:
            self.RiskOfLossCode.export(outfile, level, namespace_, name_='RiskOfLossCode', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FOBPayCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBPayCode = obj_
            obj_.original_tagname_ = 'FOBPayCode'
        elif nodeName_ == 'FOBLocationQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBLocationQualifier = obj_
            obj_.original_tagname_ = 'FOBLocationQualifier'
        elif nodeName_ == 'FOBLocationDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBLocationDescription = obj_
            obj_.original_tagname_ = 'FOBLocationDescription'
        elif nodeName_ == 'FOBTitlePassageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBTitlePassageCode = obj_
            obj_.original_tagname_ = 'FOBTitlePassageCode'
        elif nodeName_ == 'FOBTitlePassageLocation':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBTitlePassageLocation = obj_
            obj_.original_tagname_ = 'FOBTitlePassageLocation'
        elif nodeName_ == 'TransportationTermsType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransportationTermsType = obj_
            obj_.original_tagname_ = 'TransportationTermsType'
        elif nodeName_ == 'TransportationTerms':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransportationTerms = obj_
            obj_.original_tagname_ = 'TransportationTerms'
        elif nodeName_ == 'RiskOfLossCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RiskOfLossCode = obj_
            obj_.original_tagname_ = 'RiskOfLossCode'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class FOBRelatedInstructionType


class RegulatoryCompliancesType31(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RegulatoryComplianceQual=None, YesOrNoResponse=None, RegulatoryComplianceID=None, RegulatoryAgency=None, Description=None):
        self.original_tagname_ = None
        self.RegulatoryComplianceQual = RegulatoryComplianceQual
        self.YesOrNoResponse = YesOrNoResponse
        self.RegulatoryComplianceID = RegulatoryComplianceID
        self.RegulatoryAgency = RegulatoryAgency
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegulatoryCompliancesType31)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegulatoryCompliancesType31.subclass:
            return RegulatoryCompliancesType31.subclass(*args_, **kwargs_)
        else:
            return RegulatoryCompliancesType31(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RegulatoryComplianceQual(self): return self.RegulatoryComplianceQual
    def set_RegulatoryComplianceQual(self, RegulatoryComplianceQual): self.RegulatoryComplianceQual = RegulatoryComplianceQual
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_RegulatoryComplianceID(self): return self.RegulatoryComplianceID
    def set_RegulatoryComplianceID(self, RegulatoryComplianceID): self.RegulatoryComplianceID = RegulatoryComplianceID
    def get_RegulatoryAgency(self): return self.RegulatoryAgency
    def set_RegulatoryAgency(self, RegulatoryAgency): self.RegulatoryAgency = RegulatoryAgency
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.RegulatoryComplianceQual is not None or
            self.YesOrNoResponse is not None or
            self.RegulatoryComplianceID is not None or
            self.RegulatoryAgency is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RegulatoryCompliancesType31', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RegulatoryCompliancesType31')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RegulatoryCompliancesType31', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RegulatoryCompliancesType31'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RegulatoryCompliancesType31', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegulatoryComplianceQual is not None:
            self.RegulatoryComplianceQual.export(outfile, level, namespace_, name_='RegulatoryComplianceQual', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.RegulatoryComplianceID is not None:
            self.RegulatoryComplianceID.export(outfile, level, namespace_, name_='RegulatoryComplianceID', pretty_print=pretty_print)
        if self.RegulatoryAgency is not None:
            self.RegulatoryAgency.export(outfile, level, namespace_, name_='RegulatoryAgency', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RegulatoryComplianceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryComplianceQual = obj_
            obj_.original_tagname_ = 'RegulatoryComplianceQual'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'RegulatoryComplianceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryComplianceID = obj_
            obj_.original_tagname_ = 'RegulatoryComplianceID'
        elif nodeName_ == 'RegulatoryAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RegulatoryAgency = obj_
            obj_.original_tagname_ = 'RegulatoryAgency'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class RegulatoryCompliancesType31


class SummaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TotalAmount=None, TotalLineItemNumber=None, TotalQuantity=None):
        self.original_tagname_ = None
        self.TotalAmount = TotalAmount
        self.TotalLineItemNumber = TotalLineItemNumber
        self.TotalQuantity = TotalQuantity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SummaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SummaryType.subclass:
            return SummaryType.subclass(*args_, **kwargs_)
        else:
            return SummaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TotalAmount(self): return self.TotalAmount
    def set_TotalAmount(self, TotalAmount): self.TotalAmount = TotalAmount
    def get_TotalLineItemNumber(self): return self.TotalLineItemNumber
    def set_TotalLineItemNumber(self, TotalLineItemNumber): self.TotalLineItemNumber = TotalLineItemNumber
    def get_TotalQuantity(self): return self.TotalQuantity
    def set_TotalQuantity(self, TotalQuantity): self.TotalQuantity = TotalQuantity
    def hasContent_(self):
        if (
            self.TotalAmount is not None or
            self.TotalLineItemNumber is not None or
            self.TotalQuantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SummaryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SummaryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SummaryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SummaryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SummaryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TotalAmount is not None:
            self.TotalAmount.export(outfile, level, namespace_, name_='TotalAmount', pretty_print=pretty_print)
        if self.TotalLineItemNumber is not None:
            self.TotalLineItemNumber.export(outfile, level, namespace_, name_='TotalLineItemNumber', pretty_print=pretty_print)
        if self.TotalQuantity is not None:
            self.TotalQuantity.export(outfile, level, namespace_, name_='TotalQuantity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TotalAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalAmount = obj_
            obj_.original_tagname_ = 'TotalAmount'
        elif nodeName_ == 'TotalLineItemNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalLineItemNumber = obj_
            obj_.original_tagname_ = 'TotalLineItemNumber'
        elif nodeName_ == 'TotalQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalQuantity = obj_
            obj_.original_tagname_ = 'TotalQuantity'
# end class SummaryType


GDSClassesMapping = {
    'ActionCode': attributes_string,
    'AdditionalContactDetails': AdditionalContactDetailsType30,
    'Address': AddressType24,
    'Address1': attributes_string,
    'Address2': attributes_string,
    'Address3': attributes_string,
    'Address4': attributes_string,
    'AddressAlternateName': attributes_string,
    'AddressAlternateName2': attributes_string,
    'AddressLocationNumber': attributes_string,
    'AddressName': attributes_string,
    'AddressTaxExemptNumber': attributes_string,
    'AddressTaxIdNumber': attributes_string,
    'AddressTypeCode': attributes_string,
    'AgencyQualifierCode': attributes_string,
    'AllowChrgAgency': attributes_string,
    'AllowChrgAgencyCode': attributes_string,
    'AllowChrgAmt': attributes_string,
    'AllowChrgCode': attributes_string,
    'AllowChrgHandlingCode': attributes_string,
    'AllowChrgHandlingDescription': attributes_string,
    'AllowChrgIndicator': attributes_string,
    'AllowChrgPercent': attributes_string,
    'AllowChrgPercentQual': attributes_string,
    'AllowChrgQty': attributes_string,
    'AllowChrgQty2': attributes_string,
    'AllowChrgQtyUOM': attributes_string,
    'AllowChrgRate': attributes_string,
    'ApplicationId': attributes_string,
    'AssignedID': attributes_string,
    'BatchID': attributes_string,
    'BatchPart': attributes_string,
    'BatchTotal': attributes_string,
    'BuyerPartNumber': attributes_string,
    'BuyersCurrency': attributes_string,
    'CalculationSequence': attributes_string,
    'CarrierAlphaCode': attributes_string,
    'CarrierEquipmentInitial': attributes_string,
    'CarrierEquipmentNumber': attributes_string,
    'CarrierInformation': CarrierInformationType,
    'CarrierRouting': attributes_string,
    'CarrierSpecialHandlingDetail': CarrierSpecialHandlingDetailType,
    'CarrierTransMethodCode': attributes_string,
    'ChangeReasonCode': attributes_string,
    'ChargesAllowances': ChargesAllowancesType,
    'City': attributes_string,
    'ClassOfTradeCode': attributes_string,
    'Classification': attributes_string,
    'ClassificationDescription': attributes_string,
    'ColorCategoryName': attributes_string,
    'ColorPrimaryDescription': attributes_string,
    'Comments': attributes_string,
    'Commodity': CommodityType,
    'CommodityCode': attributes_string,
    'CommodityCodeQualifier': attributes_string,
    'CompartmentIDCode': attributes_string,
    'Compliant': attributes_string,
    'CompositeUOM': attributes_string,
    'ConditionValue': attributes_string,
    'ConsumerPackageCode': attributes_string,
    'ContactID': attributes_string,
    'ContactName': attributes_string,
    'ContactQual': attributes_string,
    'ContactReference': attributes_string,
    'ContactTypeCode': attributes_string,
    'Contacts': ContactsType29,
    'Country': attributes_string,
    'CountrySubDivision': attributes_string,
    'County': attributes_string,
    'Date': attributes_string,
    'DateTimePeriod': attributes_string,
    'DateTimeQualifier': attributes_string,
    'Dates': DatesType25,
    'Department': attributes_string,
    'DepartmentDescription': attributes_string,
    'Description': attributes_string,
    'DimensionUOM': attributes_string,
    'Division': attributes_string,
    'DocumentControlIdentifier': attributes_string,
    'DocumentControlNumber': attributes_string,
    'DocumentId': attributes_string,
    'EAN': attributes_string,
    'EffectiveDate': attributes_string,
    'EquipmentDescriptionCode': attributes_string,
    'EquipmentType': attributes_string,
    'ExceptionNumber': attributes_string,
    'ExchangeRate': attributes_string,
    'ExpirationDate': attributes_string,
    'FOBLocationDescription': attributes_string,
    'FOBLocationQualifier': attributes_string,
    'FOBPayCode': attributes_string,
    'FOBRelatedInstruction': FOBRelatedInstructionType,
    'FOBTitlePassageCode': attributes_string,
    'FOBTitlePassageLocation': attributes_string,
    'FlashpointTemperature': attributes_string,
    'FloorReady': FloorReadyType,
    'FloorReadyDescription': attributes_string,
    'FloorReadyID': attributes_string,
    'FloorReadyRequired': attributes_string,
    'FloorReadyTypeCode': attributes_string,
    'GTIN': attributes_string,
    'Gender': attributes_string,
    'GroupControlIdentifier': attributes_string,
    'GroupControlNumber': attributes_string,
    'GroupReceiverID': attributes_string,
    'GroupSenderID': attributes_string,
    'HazardousClassQualifier': attributes_string,
    'HazardousClassification': attributes_string,
    'HazardousInformation': HazardousInformationType,
    'HazardousMaterialClass': attributes_string,
    'HazardousMaterialCode': attributes_string,
    'HazardousMaterialName': attributes_string,
    'HazardousMaterialNameQualifier': attributes_string,
    'Header': HeaderType,
    'HeaderReport': HeaderReportType,
    'Height': attributes_string,
    'IndustryCode': attributes_string,
    'IndustryCodeQualifier': attributes_string,
    'InterchangeControlNumber': attributes_string,
    'InterchangeReceiverID': attributes_string,
    'InterchangeSenderID': attributes_string,
    'InternationalStandardBookNumber': attributes_string,
    'InventoryDate': attributes_string,
    'InventoryLine': InventoryLineType,
    'InventoryTime': attributes_string,
    'IsDropShip': attributes_string,
    'ItemAttribute': ItemAttributeType,
    'ItemAttributeQualifier': attributes_string,
    'ItemRegistry': ItemRegistryType,
    'JurisdictionCode': attributes_string,
    'JurisdictionQual': attributes_string,
    'LabelName': attributes_string,
    'LabelReason': attributes_string,
    'LanguageCode': attributes_string,
    'LeadTimeCode': attributes_string,
    'LeadTimeDate': attributes_string,
    'LeadTimePeriodInterval': attributes_string,
    'LeadTimeQuantity': attributes_string,
    'Length': attributes_string,
    'LineItem': LineItemType,
    'LineSequenceNumber': attributes_string,
    'Location': attributes_string,
    'LocationCodeQualifier': attributes_string,
    'LocationDescription': attributes_string,
    'LocationID': attributes_string,
    'LocationQuantity': LocationQuantityType,
    'MaintenanceTypeCode': attributes_string,
    'MasterItemAttribute': MasterItemAttributeType,
    'MeasurementAttributeCode': attributes_string,
    'MeasurementQualifier': attributes_string,
    'MeasurementRefIDCode': attributes_string,
    'MeasurementSignificanceCode': attributes_string,
    'MeasurementValue': attributes_string,
    'Measurements': MeasurementsType,
    'Meta': MetaType,
    'MultiplePriceQuantity': attributes_string,
    'NRFColorCode': attributes_string,
    'NRFSizeCode': attributes_string,
    'NRFStandardColorAndSize': NRFStandardColorAndSizeType18,
    'NatlDrugCode': attributes_string,
    'Note': attributes_string,
    'NoteCode': attributes_string,
    'Notes': NotesType28,
    'OptionNumber': attributes_string,
    'OrderManagement': attributes_string,
    'OwnershipCode': attributes_string,
    'PackHeight': attributes_string,
    'PackLength': attributes_string,
    'PackQualifier': attributes_string,
    'PackSize': attributes_string,
    'PackUOM': attributes_string,
    'PackValue': attributes_string,
    'PackVolume': attributes_string,
    'PackVolumeUOM': attributes_string,
    'PackWeight': attributes_string,
    'PackWeightUOM': attributes_string,
    'PackWidth': attributes_string,
    'PackingGroupCode': attributes_string,
    'PackingMaterial': attributes_string,
    'PackingMedium': attributes_string,
    'PalletBlocks': attributes_string,
    'PalletExchangeCode': attributes_string,
    'PalletInformation': PalletInformationType,
    'PalletQualifier': attributes_string,
    'PalletStructureCode': attributes_string,
    'PalletTiers': attributes_string,
    'PalletTypeCode': attributes_string,
    'PalletValue': attributes_string,
    'PalletVolume': attributes_string,
    'PalletVolumeUOM': attributes_string,
    'PalletWeight': attributes_string,
    'PalletWeightUOM': attributes_string,
    'PartNumber': attributes_string,
    'PartNumberQual': attributes_string,
    'PartnerID': attributes_string,
    'PercentDollarBasis': attributes_string,
    'PhysicalDetails': PhysicalDetailsType,
    'PostalCode': attributes_string,
    'PriceDetails': PriceDetailsType19,
    'PriceMultiplier': attributes_string,
    'PriceMultiplierQual': attributes_string,
    'PriceTypeIDCode': attributes_string,
    'PricingArea': PricingAreaType,
    'PricingAreaIdentifier': attributes_string,
    'PricingAreaQualifier': attributes_string,
    'PrimaryEmail': attributes_string,
    'PrimaryFax': attributes_string,
    'PrimaryPhone': attributes_string,
    'ProductCharacteristicCode': attributes_string,
    'ProductColorCode': attributes_string,
    'ProductColorDescription': attributes_string,
    'ProductDescription': attributes_string,
    'ProductDescriptionCode': attributes_string,
    'ProductID': ProductIDType17,
    'ProductMaterialCode': attributes_string,
    'ProductMaterialDescription': attributes_string,
    'ProductOrItemDescription': ProductOrItemDescriptionType20,
    'ProductProcessCode': attributes_string,
    'ProductProcessDescription': attributes_string,
    'ProductSizeCode': attributes_string,
    'ProductSizeDescription': attributes_string,
    'ProductType': attributes_string,
    'ProductTypes': ProductTypesType,
    'Province': attributes_string,
    'PurchasePrice': attributes_string,
    'PurchasePriceBasis': attributes_string,
    'PurchasePriceType': attributes_string,
    'Qty': attributes_string,
    'QtyPer': attributes_string,
    'QtyPerUOM': attributes_string,
    'QuantitiesSchedulesLocations': QuantitiesSchedulesLocationsType,
    'Quantity': attributes_string,
    'QuantityDescription': attributes_string,
    'QuantityQualifier': attributes_string,
    'QuantityUOM': attributes_string,
    'RangeMaximum': attributes_string,
    'RangeMinimum': attributes_string,
    'RebateAmount': attributes_string,
    'ReceiverCompanyName': attributes_string,
    'ReceiverUniqueID': attributes_string,
    'ReferenceID': attributes_string,
    'ReferenceIDs': ReferenceIDsType27,
    'ReferenceIdentification': attributes_string,
    'ReferenceQual': attributes_string,
    'References': ReferencesType26,
    'RegulatoryAgency': attributes_string,
    'RegulatoryComplianceID': attributes_string,
    'RegulatoryComplianceQual': attributes_string,
    'RegulatoryCompliances': RegulatoryCompliancesType21,
    'RelationshipCode': attributes_string,
    'ReportTypeCode': attributes_string,
    'Required': attributes_string,
    'RequirementLocations': RequirementLocationsType,
    'RiskOfLossCode': attributes_string,
    'RoutingSequenceCode': attributes_string,
    'SealNumber': attributes_string,
    'SealNumbers': SealNumbersType,
    'SealStatusCode': attributes_string,
    'SellersCurrency': attributes_string,
    'SenderCompanyName': attributes_string,
    'SenderUniqueID': attributes_string,
    'ServiceLevelCode': attributes_string,
    'ServiceLevelCodes': ServiceLevelCodesType,
    'SizeCategoryName': attributes_string,
    'SizeHeading1': attributes_string,
    'SizeHeading2': attributes_string,
    'SizeHeading3': attributes_string,
    'SizeHeading4': attributes_string,
    'SizePrimaryDescription': attributes_string,
    'SizeSecondaryDescription': attributes_string,
    'SizeTableName': attributes_string,
    'SourceSubqualifier': attributes_string,
    'SpecialHandlingCode': attributes_string,
    'SpecialLabeling': SpecialLabelingType,
    'State': attributes_string,
    'StatusCode': attributes_string,
    'Structure': StructureType,
    'SubClassification': attributes_string,
    'SubClassificationDescription': attributes_string,
    'Subline': SublineType,
    'SublineItemDetail': SublineItemDetailType,
    'Summary': SummaryType,
    'SurfaceLayerPositionCode': attributes_string,
    'TaxAmount': attributes_string,
    'TaxExemptCode': attributes_string,
    'TaxHandlingCode': attributes_string,
    'TaxID': attributes_string,
    'TaxPercent': attributes_string,
    'TaxPercentQual': attributes_string,
    'TaxTypeCode': attributes_string,
    'Taxes': TaxesType23,
    'TemperatureUOM': attributes_string,
    'Time': attributes_string,
    'TotalAmount': attributes_string,
    'TotalLineItemNumber': attributes_string,
    'TotalQty': attributes_string,
    'TotalQtyUOM': attributes_string,
    'TotalQuantity': attributes_string,
    'TradingPartnerId': attributes_string,
    'TransitDirectionCode': attributes_string,
    'TransitTime': attributes_string,
    'TransitTimeQual': attributes_string,
    'TransportationTerms': attributes_string,
    'TransportationTermsType': attributes_string,
    'TsetPurposeCode': attributes_string,
    'UNIdentificationCode': attributes_string,
    'UPCCaseCode': attributes_string,
    'UnitPrice': attributes_string,
    'UnitPriceBasis': attributes_string,
    'UnitPriceBasisMultiplier': attributes_string,
    'UnitWeight': attributes_string,
    'UnitWeightUOM': attributes_string,
    'UnloadedHeight': attributes_string,
    'UnloadedHeightUOM': attributes_string,
    'Validation': attributes_string,
    'Value': attributes_string,
    'ValueUOM': attributes_string,
    'Vendor': attributes_string,
    'VendorPartNumber': attributes_string,
    'Version': attributes_string,
    'WeightQualifier': attributes_string,
    'Width': attributes_string,
    'YesOrNoResponse': attributes_string,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ItemRegistries'
        rootClass = ItemRegistries
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ItemRegistries'
        rootClass = ItemRegistries
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ItemRegistries'
        rootClass = ItemRegistries
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ItemRegistries'
        rootClass = ItemRegistries
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from ire-7.7 import *\n\n')
        sys.stdout.write('import ire-7.7 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AdditionalContactDetailsType",
    "AdditionalContactDetailsType15",
    "AdditionalContactDetailsType2",
    "AdditionalContactDetailsType30",
    "AddressType",
    "AddressType11",
    "AddressType24",
    "CarrierInformationType",
    "CarrierSpecialHandlingDetailType",
    "ChargesAllowancesType",
    "CommodityType",
    "ContactsType",
    "ContactsType1",
    "ContactsType14",
    "ContactsType29",
    "DatesType",
    "DatesType16",
    "DatesType22",
    "DatesType25",
    "DatesType3",
    "DatesType9",
    "FOBRelatedInstructionType",
    "FloorReadyType",
    "HazardousInformationType",
    "HeaderReportType",
    "HeaderType",
    "InventoryLineType",
    "ItemAttributeType",
    "ItemRegistries",
    "ItemRegistryType",
    "LineItemType",
    "LocationQuantityType",
    "MasterItemAttributeType",
    "MeasurementsType",
    "MeasurementsType10",
    "MetaType",
    "NRFStandardColorAndSizeType",
    "NRFStandardColorAndSizeType18",
    "NotesType",
    "NotesType28",
    "NotesType8",
    "PalletInformationType",
    "PhysicalDetailsType",
    "PriceDetailsType",
    "PriceDetailsType19",
    "PricingAreaType",
    "ProductIDType",
    "ProductIDType17",
    "ProductOrItemDescriptionType",
    "ProductOrItemDescriptionType20",
    "ProductTypesType",
    "QuantitiesSchedulesLocationsType",
    "ReferenceIDsType",
    "ReferenceIDsType13",
    "ReferenceIDsType27",
    "ReferenceIDsType5",
    "ReferenceIDsType7",
    "ReferencesType",
    "ReferencesType12",
    "ReferencesType26",
    "ReferencesType4",
    "ReferencesType6",
    "RegulatoryCompliancesType",
    "RegulatoryCompliancesType21",
    "RegulatoryCompliancesType31",
    "RequirementLocationsType",
    "SealNumbersType",
    "ServiceLevelCodesType",
    "SpecialLabelingType",
    "StructureType",
    "SublineItemDetailType",
    "SublineType",
    "SummaryType",
    "TaxesType",
    "TaxesType23",
    "attributes_string"
]
