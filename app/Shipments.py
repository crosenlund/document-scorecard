#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sun Jan  8 10:47:29 2017 by generateDS.py version 2.22a.
#
# Command line options:
#   ('-f', '')
#   ('-o', 'app/Shipments.py')
#   ('-s', 'Shipment.py')
#   ('--super', 'Shipments')
#
# Command line arguments:
#   app/SCHEMAS/Shipment-7.6.xsd
#
# Command line:
#   generateDS/generateDS.py -f -o "app/Shipments.py" -s "Shipment.py" --super="Shipments" app/SCHEMAS/Shipment-7.6.xsd
#
# Current working directory (os.getcwd()):
#   document-scorecard-v2
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Shipments(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Shipment=None):
        self.original_tagname_ = None
        self.Shipment = Shipment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Shipments)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Shipments.subclass:
            return Shipments.subclass(*args_, **kwargs_)
        else:
            return Shipments(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Shipment(self): return self.Shipment
    def set_Shipment(self, Shipment): self.Shipment = Shipment
    def hasContent_(self):
        if (
            self.Shipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Shipments', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Shipments')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Shipments', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Shipments'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Shipments', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Shipment is not None:
            self.Shipment.export(outfile, level, namespace_, name_='Shipment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Shipment':
            obj_ = Shipment.factory()
            obj_.build(child_)
            self.Shipment = obj_
            obj_.original_tagname_ = 'Shipment'
# end class Shipments


class Shipment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Meta=None, Header=None, ContainerLevel=None, OrderLevel=None, PackLevel=None, ItemLevel=None, Summary=None):
        self.original_tagname_ = None
        self.Meta = Meta
        self.Header = Header
        self.ContainerLevel = ContainerLevel
        self.OrderLevel = OrderLevel
        self.PackLevel = PackLevel
        self.ItemLevel = ItemLevel
        self.Summary = Summary
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Shipment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Shipment.subclass:
            return Shipment.subclass(*args_, **kwargs_)
        else:
            return Shipment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Meta(self): return self.Meta
    def set_Meta(self, Meta): self.Meta = Meta
    def get_Header(self): return self.Header
    def set_Header(self, Header): self.Header = Header
    def get_ContainerLevel(self): return self.ContainerLevel
    def set_ContainerLevel(self, ContainerLevel): self.ContainerLevel = ContainerLevel
    def get_OrderLevel(self): return self.OrderLevel
    def set_OrderLevel(self, OrderLevel): self.OrderLevel = OrderLevel
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def get_Summary(self): return self.Summary
    def set_Summary(self, Summary): self.Summary = Summary
    def hasContent_(self):
        if (
            self.Meta is not None or
            self.Header is not None or
            self.ContainerLevel is not None or
            self.OrderLevel is not None or
            self.PackLevel is not None or
            self.ItemLevel is not None or
            self.Summary is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Shipment', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Shipment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Shipment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Shipment'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Shipment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Meta is not None:
            self.Meta.export(outfile, level, namespace_, name_='Meta', pretty_print=pretty_print)
        if self.Header is not None:
            self.Header.export(outfile, level, namespace_, name_='Header', pretty_print=pretty_print)
        if self.ContainerLevel is not None:
            self.ContainerLevel.export(outfile, level, namespace_, name_='ContainerLevel', pretty_print=pretty_print)
        if self.OrderLevel is not None:
            self.OrderLevel.export(outfile, level, namespace_, name_='OrderLevel', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        if self.ItemLevel is not None:
            self.ItemLevel.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        if self.Summary is not None:
            self.Summary.export(outfile, level, namespace_, name_='Summary', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Meta':
            obj_ = MetaType.factory()
            obj_.build(child_)
            self.Meta = obj_
            obj_.original_tagname_ = 'Meta'
        elif nodeName_ == 'Header':
            obj_ = HeaderType.factory()
            obj_.build(child_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'ContainerLevel':
            obj_ = ContainerLevel.factory()
            obj_.build(child_)
            self.ContainerLevel = obj_
            obj_.original_tagname_ = 'ContainerLevel'
        elif nodeName_ == 'OrderLevel':
            obj_ = OrderLevelType.factory()
            obj_.build(child_)
            self.OrderLevel = obj_
            obj_.original_tagname_ = 'OrderLevel'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevel.factory()
            obj_.build(child_)
            self.ItemLevel = obj_
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'Summary':
            obj_ = SummaryType.factory()
            obj_.build(child_)
            self.Summary = obj_
            obj_.original_tagname_ = 'Summary'
# end class Shipment


class ContainerLevel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Container=None, Date=None, Reference=None, Notes=None, QuantityAndWeight=None, CarrierInformation=None, Address=None, OrderLevel=None, PackLevel=None, ItemLevel=None):
        self.original_tagname_ = None
        self.Container = Container
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.QuantityAndWeight = QuantityAndWeight
        self.CarrierInformation = CarrierInformation
        self.Address = Address
        self.OrderLevel = OrderLevel
        self.PackLevel = PackLevel
        self.ItemLevel = ItemLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContainerLevel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContainerLevel.subclass:
            return ContainerLevel.subclass(*args_, **kwargs_)
        else:
            return ContainerLevel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Container(self): return self.Container
    def set_Container(self, Container): self.Container = Container
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_OrderLevel(self): return self.OrderLevel
    def set_OrderLevel(self, OrderLevel): self.OrderLevel = OrderLevel
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def hasContent_(self):
        if (
            self.Container is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.QuantityAndWeight is not None or
            self.CarrierInformation is not None or
            self.Address is not None or
            self.OrderLevel is not None or
            self.PackLevel is not None or
            self.ItemLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContainerLevel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContainerLevel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContainerLevel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContainerLevel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContainerLevel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Container is not None:
            self.Container.export(outfile, level, namespace_, name_='Container', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.QuantityAndWeight is not None:
            self.QuantityAndWeight.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.OrderLevel is not None:
            self.OrderLevel.export(outfile, level, namespace_, name_='OrderLevel', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        if self.ItemLevel is not None:
            self.ItemLevel.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Container':
            obj_ = ContainerType.factory()
            obj_.build(child_)
            self.Container = obj_
            obj_.original_tagname_ = 'Container'
        elif nodeName_ == 'Date':
            obj_ = DateType182.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType183.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType185.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType186.factory()
            obj_.build(child_)
            self.QuantityAndWeight = obj_
            obj_.original_tagname_ = 'QuantityAndWeight'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType187.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Address':
            obj_ = AddressType191.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'OrderLevel':
            obj_ = OrderLevel.factory()
            obj_.build(child_)
            self.OrderLevel = obj_
            obj_.original_tagname_ = 'OrderLevel'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevel.factory()
            obj_.build(child_)
            self.ItemLevel = obj_
            obj_.original_tagname_ = 'ItemLevel'
# end class ContainerLevel


class OrderLevel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OrderHeader=None, QuantityAndWeight=None, CarrierInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, Commodity=None, PackLevel=None, ItemLevel=None, ContainerLevel=None):
        self.original_tagname_ = None
        self.OrderHeader = OrderHeader
        self.QuantityAndWeight = QuantityAndWeight
        self.CarrierInformation = CarrierInformation
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Address = Address
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.Commodity = Commodity
        self.PackLevel = PackLevel
        self.ItemLevel = ItemLevel
        self.ContainerLevel = ContainerLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderLevel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderLevel.subclass:
            return OrderLevel.subclass(*args_, **kwargs_)
        else:
            return OrderLevel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OrderHeader(self): return self.OrderHeader
    def set_OrderHeader(self, OrderHeader): self.OrderHeader = OrderHeader
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def get_ContainerLevel(self): return self.ContainerLevel
    def set_ContainerLevel(self, ContainerLevel): self.ContainerLevel = ContainerLevel
    def hasContent_(self):
        if (
            self.OrderHeader is not None or
            self.QuantityAndWeight is not None or
            self.CarrierInformation is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Address is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.Commodity is not None or
            self.PackLevel is not None or
            self.ItemLevel is not None or
            self.ContainerLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderLevel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderLevel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderLevel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderLevel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderLevel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrderHeader is not None:
            self.OrderHeader.export(outfile, level, namespace_, name_='OrderHeader', pretty_print=pretty_print)
        if self.QuantityAndWeight is not None:
            self.QuantityAndWeight.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        if self.ItemLevel is not None:
            self.ItemLevel.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        if self.ContainerLevel is not None:
            self.ContainerLevel.export(outfile, level, namespace_, name_='ContainerLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OrderHeader':
            obj_ = OrderHeaderType197.factory()
            obj_.build(child_)
            self.OrderHeader = obj_
            obj_.original_tagname_ = 'OrderHeader'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType198.factory()
            obj_.build(child_)
            self.QuantityAndWeight = obj_
            obj_.original_tagname_ = 'QuantityAndWeight'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType199.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType203.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType204.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType206.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType207.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType213.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType214.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType216.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevel.factory()
            obj_.build(child_)
            self.ItemLevel = obj_
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'ContainerLevel':
            obj_ = ContainerLevel.factory()
            obj_.build(child_)
            self.ContainerLevel = obj_
            obj_.original_tagname_ = 'ContainerLevel'
# end class OrderLevel


class PackLevel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Pack=None, PhysicalDetails=None, MarksAndNumbersCollection=None, PalletInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, CarrierInformation=None, Packaging=None, ItemLevel=None, PackLevel_member=None):
        self.original_tagname_ = None
        self.Pack = Pack
        self.PhysicalDetails = PhysicalDetails
        self.MarksAndNumbersCollection = MarksAndNumbersCollection
        self.PalletInformation = PalletInformation
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Address = Address
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.CarrierInformation = CarrierInformation
        self.Packaging = Packaging
        self.ItemLevel = ItemLevel
        self.PackLevel = PackLevel_member
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackLevel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackLevel.subclass:
            return PackLevel.subclass(*args_, **kwargs_)
        else:
            return PackLevel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Pack(self): return self.Pack
    def set_Pack(self, Pack): self.Pack = Pack
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def get_MarksAndNumbersCollection(self): return self.MarksAndNumbersCollection
    def set_MarksAndNumbersCollection(self, MarksAndNumbersCollection): self.MarksAndNumbersCollection = MarksAndNumbersCollection
    def get_PalletInformation(self): return self.PalletInformation
    def set_PalletInformation(self, PalletInformation): self.PalletInformation = PalletInformation
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def hasContent_(self):
        if (
            self.Pack is not None or
            self.PhysicalDetails is not None or
            self.MarksAndNumbersCollection is not None or
            self.PalletInformation is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Address is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.CarrierInformation is not None or
            self.Packaging is not None or
            self.ItemLevel is not None or
            self.PackLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackLevel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackLevel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackLevel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackLevel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackLevel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Pack is not None:
            self.Pack.export(outfile, level, namespace_, name_='Pack', pretty_print=pretty_print)
        if self.PhysicalDetails is not None:
            self.PhysicalDetails.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        if self.MarksAndNumbersCollection is not None:
            self.MarksAndNumbersCollection.export(outfile, level, namespace_, name_='MarksAndNumbersCollection', pretty_print=pretty_print)
        if self.PalletInformation is not None:
            self.PalletInformation.export(outfile, level, namespace_, name_='PalletInformation', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Packaging is not None:
            self.Packaging.export(outfile, level, namespace_, name_='Packaging', pretty_print=pretty_print)
        if self.ItemLevel is not None:
            self.ItemLevel.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Pack':
            obj_ = PackType217.factory()
            obj_.build(child_)
            self.Pack = obj_
            obj_.original_tagname_ = 'Pack'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType218.factory()
            obj_.build(child_)
            self.PhysicalDetails = obj_
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'MarksAndNumbersCollection':
            obj_ = MarksAndNumbersCollectionType219.factory()
            obj_.build(child_)
            self.MarksAndNumbersCollection = obj_
            obj_.original_tagname_ = 'MarksAndNumbersCollection'
        elif nodeName_ == 'PalletInformation':
            obj_ = PalletInformationType220.factory()
            obj_.build(child_)
            self.PalletInformation = obj_
            obj_.original_tagname_ = 'PalletInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType221.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType222.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType224.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType225.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType231.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType232.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType234.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Packaging':
            obj_ = PackagingType238.factory()
            obj_.build(child_)
            self.Packaging = obj_
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevel.factory()
            obj_.build(child_)
            self.ItemLevel = obj_
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
# end class PackLevel


class ItemLevel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentLine=None, PhysicalDetails=None, CarrierSpecialHandlingDetail=None, CarrierInformation=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, Date=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, Tax=None, ChargesAllowances=None, ItemLoadInfo=None, PackLevel=None, OrderLevel=None):
        self.original_tagname_ = None
        self.ShipmentLine = ShipmentLine
        self.PhysicalDetails = PhysicalDetails
        self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        self.CarrierInformation = CarrierInformation
        self.Measurements = Measurements
        self.PriceInformation = PriceInformation
        self.ProductOrItemDescription = ProductOrItemDescription
        self.MasterItemAttribute = MasterItemAttribute
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Commodity = Commodity
        self.Address = Address
        self.Sublines = Sublines
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.ItemLoadInfo = ItemLoadInfo
        self.PackLevel = PackLevel
        self.OrderLevel = OrderLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLevel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLevel.subclass:
            return ItemLevel.subclass(*args_, **kwargs_)
        else:
            return ItemLevel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentLine(self): return self.ShipmentLine
    def set_ShipmentLine(self, ShipmentLine): self.ShipmentLine = ShipmentLine
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_ItemLoadInfo(self): return self.ItemLoadInfo
    def set_ItemLoadInfo(self, ItemLoadInfo): self.ItemLoadInfo = ItemLoadInfo
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def get_OrderLevel(self): return self.OrderLevel
    def set_OrderLevel(self, OrderLevel): self.OrderLevel = OrderLevel
    def hasContent_(self):
        if (
            self.ShipmentLine is not None or
            self.PhysicalDetails is not None or
            self.CarrierSpecialHandlingDetail is not None or
            self.CarrierInformation is not None or
            self.Measurements is not None or
            self.PriceInformation is not None or
            self.ProductOrItemDescription is not None or
            self.MasterItemAttribute is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Commodity is not None or
            self.Address is not None or
            self.Sublines is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.ItemLoadInfo is not None or
            self.PackLevel is not None or
            self.OrderLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLevel', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLevel')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLevel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLevel'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLevel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentLine is not None:
            self.ShipmentLine.export(outfile, level, namespace_, name_='ShipmentLine', pretty_print=pretty_print)
        if self.PhysicalDetails is not None:
            self.PhysicalDetails.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        if self.CarrierSpecialHandlingDetail is not None:
            self.CarrierSpecialHandlingDetail.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        if self.PriceInformation is not None:
            self.PriceInformation.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.MasterItemAttribute is not None:
            self.MasterItemAttribute.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.ItemLoadInfo is not None:
            self.ItemLoadInfo.export(outfile, level, namespace_, name_='ItemLoadInfo', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        if self.OrderLevel is not None:
            self.OrderLevel.export(outfile, level, namespace_, name_='OrderLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentLine':
            obj_ = ShipmentLineType239.factory()
            obj_.build(child_)
            self.ShipmentLine = obj_
            obj_.original_tagname_ = 'ShipmentLine'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType242.factory()
            obj_.build(child_)
            self.PhysicalDetails = obj_
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType243.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail = obj_
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType244.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType248.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType249.factory()
            obj_.build(child_)
            self.PriceInformation = obj_
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType250.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType251.factory()
            obj_.build(child_)
            self.MasterItemAttribute = obj_
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'Date':
            obj_ = DateType254.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType255.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType257.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType258.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType259.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType265.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'Tax':
            obj_ = TaxType273.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType274.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'ItemLoadInfo':
            obj_ = ItemLoadInfoType276.factory()
            obj_.build(child_)
            self.ItemLoadInfo = obj_
            obj_.original_tagname_ = 'ItemLoadInfo'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'OrderLevel':
            obj_ = OrderLevel.factory()
            obj_.build(child_)
            self.OrderLevel = obj_
            obj_.original_tagname_ = 'OrderLevel'
# end class ItemLevel


class attributes_string(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, not_equal=None, requires_others=None, score=None, qualified_rep=None, requires_one=None, valueOf_=None):
        self.original_tagname_ = None
        self.not_equal = _cast(None, not_equal)
        self.requires_others = _cast(None, requires_others)
        self.score = _cast(None, score)
        self.qualified_rep = _cast(None, qualified_rep)
        self.requires_one = _cast(None, requires_one)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attributes_string)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attributes_string.subclass:
            return attributes_string.subclass(*args_, **kwargs_)
        else:
            return attributes_string(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_not_equal(self): return self.not_equal
    def set_not_equal(self, not_equal): self.not_equal = not_equal
    def get_requires_others(self): return self.requires_others
    def set_requires_others(self, requires_others): self.requires_others = requires_others
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def get_qualified_rep(self): return self.qualified_rep
    def set_qualified_rep(self, qualified_rep): self.qualified_rep = qualified_rep
    def get_requires_one(self): return self.requires_one
    def set_requires_one(self, requires_one): self.requires_one = requires_one
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='attributes-string', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attributes-string')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='attributes-string', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attributes-string'):
        if self.not_equal is not None and 'not_equal' not in already_processed:
            already_processed.add('not_equal')
            outfile.write(' not-equal=%s' % (quote_attrib(self.not_equal), ))
        if self.requires_others is not None and 'requires_others' not in already_processed:
            already_processed.add('requires_others')
            outfile.write(' requires-others=%s' % (quote_attrib(self.requires_others), ))
        if self.score is not None and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score=%s' % (quote_attrib(self.score), ))
        if self.qualified_rep is not None and 'qualified_rep' not in already_processed:
            already_processed.add('qualified_rep')
            outfile.write(' qualified-rep=%s' % (quote_attrib(self.qualified_rep), ))
        if self.requires_one is not None and 'requires_one' not in already_processed:
            already_processed.add('requires_one')
            outfile.write(' requires-one=%s' % (quote_attrib(self.requires_one), ))
    def exportChildren(self, outfile, level, namespace_='', name_='attributes-string', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('not-equal', node)
        if value is not None and 'not-equal' not in already_processed:
            already_processed.add('not-equal')
            self.not_equal = value
        value = find_attr_value_('requires-others', node)
        if value is not None and 'requires-others' not in already_processed:
            already_processed.add('requires-others')
            self.requires_others = value
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            self.score = value
        value = find_attr_value_('qualified-rep', node)
        if value is not None and 'qualified-rep' not in already_processed:
            already_processed.add('qualified-rep')
            self.qualified_rep = value
        value = find_attr_value_('requires-one', node)
        if value is not None and 'requires-one' not in already_processed:
            already_processed.add('requires-one')
            self.requires_one = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attributes_string


class MetaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SenderUniqueID=None, SenderCompanyName=None, ReceiverUniqueID=None, ReceiverCompanyName=None, IsDropShip=None, InterchangeControlNumber=None, GroupControlIdentifier=None, GroupControlNumber=None, DocumentControlIdentifier=None, DocumentControlNumber=None, InterchangeSenderID=None, InterchangeReceiverID=None, GroupSenderID=None, GroupReceiverID=None, BatchPart=None, BatchTotal=None, BatchID=None, Comments=None, Validation=None, OrderManagement=None, Version=None):
        self.original_tagname_ = None
        self.SenderUniqueID = SenderUniqueID
        self.SenderCompanyName = SenderCompanyName
        self.ReceiverUniqueID = ReceiverUniqueID
        self.ReceiverCompanyName = ReceiverCompanyName
        self.IsDropShip = IsDropShip
        self.InterchangeControlNumber = InterchangeControlNumber
        self.GroupControlIdentifier = GroupControlIdentifier
        self.GroupControlNumber = GroupControlNumber
        self.DocumentControlIdentifier = DocumentControlIdentifier
        self.DocumentControlNumber = DocumentControlNumber
        self.InterchangeSenderID = InterchangeSenderID
        self.InterchangeReceiverID = InterchangeReceiverID
        self.GroupSenderID = GroupSenderID
        self.GroupReceiverID = GroupReceiverID
        self.BatchPart = BatchPart
        self.BatchTotal = BatchTotal
        self.BatchID = BatchID
        self.Comments = Comments
        self.Validation = Validation
        self.OrderManagement = OrderManagement
        self.Version = Version
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetaType.subclass:
            return MetaType.subclass(*args_, **kwargs_)
        else:
            return MetaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SenderUniqueID(self): return self.SenderUniqueID
    def set_SenderUniqueID(self, SenderUniqueID): self.SenderUniqueID = SenderUniqueID
    def get_SenderCompanyName(self): return self.SenderCompanyName
    def set_SenderCompanyName(self, SenderCompanyName): self.SenderCompanyName = SenderCompanyName
    def get_ReceiverUniqueID(self): return self.ReceiverUniqueID
    def set_ReceiverUniqueID(self, ReceiverUniqueID): self.ReceiverUniqueID = ReceiverUniqueID
    def get_ReceiverCompanyName(self): return self.ReceiverCompanyName
    def set_ReceiverCompanyName(self, ReceiverCompanyName): self.ReceiverCompanyName = ReceiverCompanyName
    def get_IsDropShip(self): return self.IsDropShip
    def set_IsDropShip(self, IsDropShip): self.IsDropShip = IsDropShip
    def get_InterchangeControlNumber(self): return self.InterchangeControlNumber
    def set_InterchangeControlNumber(self, InterchangeControlNumber): self.InterchangeControlNumber = InterchangeControlNumber
    def get_GroupControlIdentifier(self): return self.GroupControlIdentifier
    def set_GroupControlIdentifier(self, GroupControlIdentifier): self.GroupControlIdentifier = GroupControlIdentifier
    def get_GroupControlNumber(self): return self.GroupControlNumber
    def set_GroupControlNumber(self, GroupControlNumber): self.GroupControlNumber = GroupControlNumber
    def get_DocumentControlIdentifier(self): return self.DocumentControlIdentifier
    def set_DocumentControlIdentifier(self, DocumentControlIdentifier): self.DocumentControlIdentifier = DocumentControlIdentifier
    def get_DocumentControlNumber(self): return self.DocumentControlNumber
    def set_DocumentControlNumber(self, DocumentControlNumber): self.DocumentControlNumber = DocumentControlNumber
    def get_InterchangeSenderID(self): return self.InterchangeSenderID
    def set_InterchangeSenderID(self, InterchangeSenderID): self.InterchangeSenderID = InterchangeSenderID
    def get_InterchangeReceiverID(self): return self.InterchangeReceiverID
    def set_InterchangeReceiverID(self, InterchangeReceiverID): self.InterchangeReceiverID = InterchangeReceiverID
    def get_GroupSenderID(self): return self.GroupSenderID
    def set_GroupSenderID(self, GroupSenderID): self.GroupSenderID = GroupSenderID
    def get_GroupReceiverID(self): return self.GroupReceiverID
    def set_GroupReceiverID(self, GroupReceiverID): self.GroupReceiverID = GroupReceiverID
    def get_BatchPart(self): return self.BatchPart
    def set_BatchPart(self, BatchPart): self.BatchPart = BatchPart
    def get_BatchTotal(self): return self.BatchTotal
    def set_BatchTotal(self, BatchTotal): self.BatchTotal = BatchTotal
    def get_BatchID(self): return self.BatchID
    def set_BatchID(self, BatchID): self.BatchID = BatchID
    def get_Comments(self): return self.Comments
    def set_Comments(self, Comments): self.Comments = Comments
    def get_Validation(self): return self.Validation
    def set_Validation(self, Validation): self.Validation = Validation
    def get_OrderManagement(self): return self.OrderManagement
    def set_OrderManagement(self, OrderManagement): self.OrderManagement = OrderManagement
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def hasContent_(self):
        if (
            self.SenderUniqueID is not None or
            self.SenderCompanyName is not None or
            self.ReceiverUniqueID is not None or
            self.ReceiverCompanyName is not None or
            self.IsDropShip is not None or
            self.InterchangeControlNumber is not None or
            self.GroupControlIdentifier is not None or
            self.GroupControlNumber is not None or
            self.DocumentControlIdentifier is not None or
            self.DocumentControlNumber is not None or
            self.InterchangeSenderID is not None or
            self.InterchangeReceiverID is not None or
            self.GroupSenderID is not None or
            self.GroupReceiverID is not None or
            self.BatchPart is not None or
            self.BatchTotal is not None or
            self.BatchID is not None or
            self.Comments is not None or
            self.Validation is not None or
            self.OrderManagement is not None or
            self.Version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetaType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MetaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SenderUniqueID is not None:
            self.SenderUniqueID.export(outfile, level, namespace_, name_='SenderUniqueID', pretty_print=pretty_print)
        if self.SenderCompanyName is not None:
            self.SenderCompanyName.export(outfile, level, namespace_, name_='SenderCompanyName', pretty_print=pretty_print)
        if self.ReceiverUniqueID is not None:
            self.ReceiverUniqueID.export(outfile, level, namespace_, name_='ReceiverUniqueID', pretty_print=pretty_print)
        if self.ReceiverCompanyName is not None:
            self.ReceiverCompanyName.export(outfile, level, namespace_, name_='ReceiverCompanyName', pretty_print=pretty_print)
        if self.IsDropShip is not None:
            self.IsDropShip.export(outfile, level, namespace_, name_='IsDropShip', pretty_print=pretty_print)
        if self.InterchangeControlNumber is not None:
            self.InterchangeControlNumber.export(outfile, level, namespace_, name_='InterchangeControlNumber', pretty_print=pretty_print)
        if self.GroupControlIdentifier is not None:
            self.GroupControlIdentifier.export(outfile, level, namespace_, name_='GroupControlIdentifier', pretty_print=pretty_print)
        if self.GroupControlNumber is not None:
            self.GroupControlNumber.export(outfile, level, namespace_, name_='GroupControlNumber', pretty_print=pretty_print)
        if self.DocumentControlIdentifier is not None:
            self.DocumentControlIdentifier.export(outfile, level, namespace_, name_='DocumentControlIdentifier', pretty_print=pretty_print)
        if self.DocumentControlNumber is not None:
            self.DocumentControlNumber.export(outfile, level, namespace_, name_='DocumentControlNumber', pretty_print=pretty_print)
        if self.InterchangeSenderID is not None:
            self.InterchangeSenderID.export(outfile, level, namespace_, name_='InterchangeSenderID', pretty_print=pretty_print)
        if self.InterchangeReceiverID is not None:
            self.InterchangeReceiverID.export(outfile, level, namespace_, name_='InterchangeReceiverID', pretty_print=pretty_print)
        if self.GroupSenderID is not None:
            self.GroupSenderID.export(outfile, level, namespace_, name_='GroupSenderID', pretty_print=pretty_print)
        if self.GroupReceiverID is not None:
            self.GroupReceiverID.export(outfile, level, namespace_, name_='GroupReceiverID', pretty_print=pretty_print)
        if self.BatchPart is not None:
            self.BatchPart.export(outfile, level, namespace_, name_='BatchPart', pretty_print=pretty_print)
        if self.BatchTotal is not None:
            self.BatchTotal.export(outfile, level, namespace_, name_='BatchTotal', pretty_print=pretty_print)
        if self.BatchID is not None:
            self.BatchID.export(outfile, level, namespace_, name_='BatchID', pretty_print=pretty_print)
        if self.Comments is not None:
            self.Comments.export(outfile, level, namespace_, name_='Comments', pretty_print=pretty_print)
        if self.Validation is not None:
            self.Validation.export(outfile, level, namespace_, name_='Validation', pretty_print=pretty_print)
        if self.OrderManagement is not None:
            self.OrderManagement.export(outfile, level, namespace_, name_='OrderManagement', pretty_print=pretty_print)
        if self.Version is not None:
            self.Version.export(outfile, level, namespace_, name_='Version', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SenderUniqueID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SenderUniqueID = obj_
            obj_.original_tagname_ = 'SenderUniqueID'
        elif nodeName_ == 'SenderCompanyName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SenderCompanyName = obj_
            obj_.original_tagname_ = 'SenderCompanyName'
        elif nodeName_ == 'ReceiverUniqueID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReceiverUniqueID = obj_
            obj_.original_tagname_ = 'ReceiverUniqueID'
        elif nodeName_ == 'ReceiverCompanyName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReceiverCompanyName = obj_
            obj_.original_tagname_ = 'ReceiverCompanyName'
        elif nodeName_ == 'IsDropShip':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IsDropShip = obj_
            obj_.original_tagname_ = 'IsDropShip'
        elif nodeName_ == 'InterchangeControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeControlNumber = obj_
            obj_.original_tagname_ = 'InterchangeControlNumber'
        elif nodeName_ == 'GroupControlIdentifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupControlIdentifier = obj_
            obj_.original_tagname_ = 'GroupControlIdentifier'
        elif nodeName_ == 'GroupControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupControlNumber = obj_
            obj_.original_tagname_ = 'GroupControlNumber'
        elif nodeName_ == 'DocumentControlIdentifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentControlIdentifier = obj_
            obj_.original_tagname_ = 'DocumentControlIdentifier'
        elif nodeName_ == 'DocumentControlNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentControlNumber = obj_
            obj_.original_tagname_ = 'DocumentControlNumber'
        elif nodeName_ == 'InterchangeSenderID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeSenderID = obj_
            obj_.original_tagname_ = 'InterchangeSenderID'
        elif nodeName_ == 'InterchangeReceiverID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InterchangeReceiverID = obj_
            obj_.original_tagname_ = 'InterchangeReceiverID'
        elif nodeName_ == 'GroupSenderID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupSenderID = obj_
            obj_.original_tagname_ = 'GroupSenderID'
        elif nodeName_ == 'GroupReceiverID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GroupReceiverID = obj_
            obj_.original_tagname_ = 'GroupReceiverID'
        elif nodeName_ == 'BatchPart':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchPart = obj_
            obj_.original_tagname_ = 'BatchPart'
        elif nodeName_ == 'BatchTotal':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchTotal = obj_
            obj_.original_tagname_ = 'BatchTotal'
        elif nodeName_ == 'BatchID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BatchID = obj_
            obj_.original_tagname_ = 'BatchID'
        elif nodeName_ == 'Comments':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Comments = obj_
            obj_.original_tagname_ = 'Comments'
        elif nodeName_ == 'Validation':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Validation = obj_
            obj_.original_tagname_ = 'Validation'
        elif nodeName_ == 'OrderManagement':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderManagement = obj_
            obj_.original_tagname_ = 'OrderManagement'
        elif nodeName_ == 'Version':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
# end class MetaType


class HeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentHeader=None, Date=None, Reference=None, Notes=None, Contact=None, Address=None, CarrierInformation=None, QuantityAndWeight=None, CarrierSpecialHandlingDetail=None, Tax=None, ChargesAllowances=None, FOBRelatedInstruction=None):
        self.original_tagname_ = None
        self.ShipmentHeader = ShipmentHeader
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Contact = Contact
        self.Address = Address
        self.CarrierInformation = CarrierInformation
        self.QuantityAndWeight = QuantityAndWeight
        self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.FOBRelatedInstruction = FOBRelatedInstruction
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType.subclass:
            return HeaderType.subclass(*args_, **kwargs_)
        else:
            return HeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentHeader(self): return self.ShipmentHeader
    def set_ShipmentHeader(self, ShipmentHeader): self.ShipmentHeader = ShipmentHeader
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_FOBRelatedInstruction(self): return self.FOBRelatedInstruction
    def set_FOBRelatedInstruction(self, FOBRelatedInstruction): self.FOBRelatedInstruction = FOBRelatedInstruction
    def hasContent_(self):
        if (
            self.ShipmentHeader is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Contact is not None or
            self.Address is not None or
            self.CarrierInformation is not None or
            self.QuantityAndWeight is not None or
            self.CarrierSpecialHandlingDetail is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.FOBRelatedInstruction is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentHeader is not None:
            self.ShipmentHeader.export(outfile, level, namespace_, name_='ShipmentHeader', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.QuantityAndWeight is not None:
            self.QuantityAndWeight.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
        if self.CarrierSpecialHandlingDetail is not None:
            self.CarrierSpecialHandlingDetail.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.FOBRelatedInstruction is not None:
            self.FOBRelatedInstruction.export(outfile, level, namespace_, name_='FOBRelatedInstruction', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentHeader':
            obj_ = ShipmentHeaderType.factory()
            obj_.build(child_)
            self.ShipmentHeader = obj_
            obj_.original_tagname_ = 'ShipmentHeader'
        elif nodeName_ == 'Date':
            obj_ = DateType.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Contact':
            obj_ = ContactType.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType.factory()
            obj_.build(child_)
            self.QuantityAndWeight = obj_
            obj_.original_tagname_ = 'QuantityAndWeight'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail = obj_
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'Tax':
            obj_ = TaxType.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'FOBRelatedInstruction':
            obj_ = FOBRelatedInstructionType.factory()
            obj_.build(child_)
            self.FOBRelatedInstruction = obj_
            obj_.original_tagname_ = 'FOBRelatedInstruction'
# end class HeaderType


class ShipmentHeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TradingPartnerId=None, ShipmentIdentification=None, ShipDate=None, ShipmentTime=None, TsetPurposeCode=None, TsetTypeCode=None, ShipNoticeDate=None, ShipNoticeTime=None, ASNStructureCode=None, FairLaborCompliant=None, BuyersCurrency=None, SellersCurrency=None, ExchangeRate=None, StatusReasonCode=None, BillOfLadingNumber=None, CarrierProNumber=None, AppointmentNumber=None, PickupNumber=None, RequestedPickupDate=None, RequestedPickupTime=None, ScheduledShipDate=None, ScheduledShipTime=None, CurrentScheduledDeliveryDate=None, CurrentScheduledDeliveryTime=None, CurrentScheduledShipDate=None, CurrentScheduledShipTime=None, DocumentVersion=None, DocumentRevision=None):
        self.original_tagname_ = None
        self.TradingPartnerId = TradingPartnerId
        self.ShipmentIdentification = ShipmentIdentification
        self.ShipDate = ShipDate
        self.ShipmentTime = ShipmentTime
        self.TsetPurposeCode = TsetPurposeCode
        self.TsetTypeCode = TsetTypeCode
        self.ShipNoticeDate = ShipNoticeDate
        self.ShipNoticeTime = ShipNoticeTime
        self.ASNStructureCode = ASNStructureCode
        self.FairLaborCompliant = FairLaborCompliant
        self.BuyersCurrency = BuyersCurrency
        self.SellersCurrency = SellersCurrency
        self.ExchangeRate = ExchangeRate
        self.StatusReasonCode = StatusReasonCode
        self.BillOfLadingNumber = BillOfLadingNumber
        self.CarrierProNumber = CarrierProNumber
        self.AppointmentNumber = AppointmentNumber
        self.PickupNumber = PickupNumber
        self.RequestedPickupDate = RequestedPickupDate
        self.RequestedPickupTime = RequestedPickupTime
        self.ScheduledShipDate = ScheduledShipDate
        self.ScheduledShipTime = ScheduledShipTime
        self.CurrentScheduledDeliveryDate = CurrentScheduledDeliveryDate
        self.CurrentScheduledDeliveryTime = CurrentScheduledDeliveryTime
        self.CurrentScheduledShipDate = CurrentScheduledShipDate
        self.CurrentScheduledShipTime = CurrentScheduledShipTime
        self.DocumentVersion = DocumentVersion
        self.DocumentRevision = DocumentRevision
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentHeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentHeaderType.subclass:
            return ShipmentHeaderType.subclass(*args_, **kwargs_)
        else:
            return ShipmentHeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TradingPartnerId(self): return self.TradingPartnerId
    def set_TradingPartnerId(self, TradingPartnerId): self.TradingPartnerId = TradingPartnerId
    def get_ShipmentIdentification(self): return self.ShipmentIdentification
    def set_ShipmentIdentification(self, ShipmentIdentification): self.ShipmentIdentification = ShipmentIdentification
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_ShipmentTime(self): return self.ShipmentTime
    def set_ShipmentTime(self, ShipmentTime): self.ShipmentTime = ShipmentTime
    def get_TsetPurposeCode(self): return self.TsetPurposeCode
    def set_TsetPurposeCode(self, TsetPurposeCode): self.TsetPurposeCode = TsetPurposeCode
    def get_TsetTypeCode(self): return self.TsetTypeCode
    def set_TsetTypeCode(self, TsetTypeCode): self.TsetTypeCode = TsetTypeCode
    def get_ShipNoticeDate(self): return self.ShipNoticeDate
    def set_ShipNoticeDate(self, ShipNoticeDate): self.ShipNoticeDate = ShipNoticeDate
    def get_ShipNoticeTime(self): return self.ShipNoticeTime
    def set_ShipNoticeTime(self, ShipNoticeTime): self.ShipNoticeTime = ShipNoticeTime
    def get_ASNStructureCode(self): return self.ASNStructureCode
    def set_ASNStructureCode(self, ASNStructureCode): self.ASNStructureCode = ASNStructureCode
    def get_FairLaborCompliant(self): return self.FairLaborCompliant
    def set_FairLaborCompliant(self, FairLaborCompliant): self.FairLaborCompliant = FairLaborCompliant
    def get_BuyersCurrency(self): return self.BuyersCurrency
    def set_BuyersCurrency(self, BuyersCurrency): self.BuyersCurrency = BuyersCurrency
    def get_SellersCurrency(self): return self.SellersCurrency
    def set_SellersCurrency(self, SellersCurrency): self.SellersCurrency = SellersCurrency
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_StatusReasonCode(self): return self.StatusReasonCode
    def set_StatusReasonCode(self, StatusReasonCode): self.StatusReasonCode = StatusReasonCode
    def get_BillOfLadingNumber(self): return self.BillOfLadingNumber
    def set_BillOfLadingNumber(self, BillOfLadingNumber): self.BillOfLadingNumber = BillOfLadingNumber
    def get_CarrierProNumber(self): return self.CarrierProNumber
    def set_CarrierProNumber(self, CarrierProNumber): self.CarrierProNumber = CarrierProNumber
    def get_AppointmentNumber(self): return self.AppointmentNumber
    def set_AppointmentNumber(self, AppointmentNumber): self.AppointmentNumber = AppointmentNumber
    def get_PickupNumber(self): return self.PickupNumber
    def set_PickupNumber(self, PickupNumber): self.PickupNumber = PickupNumber
    def get_RequestedPickupDate(self): return self.RequestedPickupDate
    def set_RequestedPickupDate(self, RequestedPickupDate): self.RequestedPickupDate = RequestedPickupDate
    def get_RequestedPickupTime(self): return self.RequestedPickupTime
    def set_RequestedPickupTime(self, RequestedPickupTime): self.RequestedPickupTime = RequestedPickupTime
    def get_ScheduledShipDate(self): return self.ScheduledShipDate
    def set_ScheduledShipDate(self, ScheduledShipDate): self.ScheduledShipDate = ScheduledShipDate
    def get_ScheduledShipTime(self): return self.ScheduledShipTime
    def set_ScheduledShipTime(self, ScheduledShipTime): self.ScheduledShipTime = ScheduledShipTime
    def get_CurrentScheduledDeliveryDate(self): return self.CurrentScheduledDeliveryDate
    def set_CurrentScheduledDeliveryDate(self, CurrentScheduledDeliveryDate): self.CurrentScheduledDeliveryDate = CurrentScheduledDeliveryDate
    def get_CurrentScheduledDeliveryTime(self): return self.CurrentScheduledDeliveryTime
    def set_CurrentScheduledDeliveryTime(self, CurrentScheduledDeliveryTime): self.CurrentScheduledDeliveryTime = CurrentScheduledDeliveryTime
    def get_CurrentScheduledShipDate(self): return self.CurrentScheduledShipDate
    def set_CurrentScheduledShipDate(self, CurrentScheduledShipDate): self.CurrentScheduledShipDate = CurrentScheduledShipDate
    def get_CurrentScheduledShipTime(self): return self.CurrentScheduledShipTime
    def set_CurrentScheduledShipTime(self, CurrentScheduledShipTime): self.CurrentScheduledShipTime = CurrentScheduledShipTime
    def get_DocumentVersion(self): return self.DocumentVersion
    def set_DocumentVersion(self, DocumentVersion): self.DocumentVersion = DocumentVersion
    def get_DocumentRevision(self): return self.DocumentRevision
    def set_DocumentRevision(self, DocumentRevision): self.DocumentRevision = DocumentRevision
    def hasContent_(self):
        if (
            self.TradingPartnerId is not None or
            self.ShipmentIdentification is not None or
            self.ShipDate is not None or
            self.ShipmentTime is not None or
            self.TsetPurposeCode is not None or
            self.TsetTypeCode is not None or
            self.ShipNoticeDate is not None or
            self.ShipNoticeTime is not None or
            self.ASNStructureCode is not None or
            self.FairLaborCompliant is not None or
            self.BuyersCurrency is not None or
            self.SellersCurrency is not None or
            self.ExchangeRate is not None or
            self.StatusReasonCode is not None or
            self.BillOfLadingNumber is not None or
            self.CarrierProNumber is not None or
            self.AppointmentNumber is not None or
            self.PickupNumber is not None or
            self.RequestedPickupDate is not None or
            self.RequestedPickupTime is not None or
            self.ScheduledShipDate is not None or
            self.ScheduledShipTime is not None or
            self.CurrentScheduledDeliveryDate is not None or
            self.CurrentScheduledDeliveryTime is not None or
            self.CurrentScheduledShipDate is not None or
            self.CurrentScheduledShipTime is not None or
            self.DocumentVersion is not None or
            self.DocumentRevision is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentHeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentHeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentHeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentHeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentHeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TradingPartnerId is not None:
            self.TradingPartnerId.export(outfile, level, namespace_, name_='TradingPartnerId', pretty_print=pretty_print)
        if self.ShipmentIdentification is not None:
            self.ShipmentIdentification.export(outfile, level, namespace_, name_='ShipmentIdentification', pretty_print=pretty_print)
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.ShipmentTime is not None:
            self.ShipmentTime.export(outfile, level, namespace_, name_='ShipmentTime', pretty_print=pretty_print)
        if self.TsetPurposeCode is not None:
            self.TsetPurposeCode.export(outfile, level, namespace_, name_='TsetPurposeCode', pretty_print=pretty_print)
        if self.TsetTypeCode is not None:
            self.TsetTypeCode.export(outfile, level, namespace_, name_='TsetTypeCode', pretty_print=pretty_print)
        if self.ShipNoticeDate is not None:
            self.ShipNoticeDate.export(outfile, level, namespace_, name_='ShipNoticeDate', pretty_print=pretty_print)
        if self.ShipNoticeTime is not None:
            self.ShipNoticeTime.export(outfile, level, namespace_, name_='ShipNoticeTime', pretty_print=pretty_print)
        if self.ASNStructureCode is not None:
            self.ASNStructureCode.export(outfile, level, namespace_, name_='ASNStructureCode', pretty_print=pretty_print)
        if self.FairLaborCompliant is not None:
            self.FairLaborCompliant.export(outfile, level, namespace_, name_='FairLaborCompliant', pretty_print=pretty_print)
        if self.BuyersCurrency is not None:
            self.BuyersCurrency.export(outfile, level, namespace_, name_='BuyersCurrency', pretty_print=pretty_print)
        if self.SellersCurrency is not None:
            self.SellersCurrency.export(outfile, level, namespace_, name_='SellersCurrency', pretty_print=pretty_print)
        if self.ExchangeRate is not None:
            self.ExchangeRate.export(outfile, level, namespace_, name_='ExchangeRate', pretty_print=pretty_print)
        if self.StatusReasonCode is not None:
            self.StatusReasonCode.export(outfile, level, namespace_, name_='StatusReasonCode', pretty_print=pretty_print)
        if self.BillOfLadingNumber is not None:
            self.BillOfLadingNumber.export(outfile, level, namespace_, name_='BillOfLadingNumber', pretty_print=pretty_print)
        if self.CarrierProNumber is not None:
            self.CarrierProNumber.export(outfile, level, namespace_, name_='CarrierProNumber', pretty_print=pretty_print)
        if self.AppointmentNumber is not None:
            self.AppointmentNumber.export(outfile, level, namespace_, name_='AppointmentNumber', pretty_print=pretty_print)
        if self.PickupNumber is not None:
            self.PickupNumber.export(outfile, level, namespace_, name_='PickupNumber', pretty_print=pretty_print)
        if self.RequestedPickupDate is not None:
            self.RequestedPickupDate.export(outfile, level, namespace_, name_='RequestedPickupDate', pretty_print=pretty_print)
        if self.RequestedPickupTime is not None:
            self.RequestedPickupTime.export(outfile, level, namespace_, name_='RequestedPickupTime', pretty_print=pretty_print)
        if self.ScheduledShipDate is not None:
            self.ScheduledShipDate.export(outfile, level, namespace_, name_='ScheduledShipDate', pretty_print=pretty_print)
        if self.ScheduledShipTime is not None:
            self.ScheduledShipTime.export(outfile, level, namespace_, name_='ScheduledShipTime', pretty_print=pretty_print)
        if self.CurrentScheduledDeliveryDate is not None:
            self.CurrentScheduledDeliveryDate.export(outfile, level, namespace_, name_='CurrentScheduledDeliveryDate', pretty_print=pretty_print)
        if self.CurrentScheduledDeliveryTime is not None:
            self.CurrentScheduledDeliveryTime.export(outfile, level, namespace_, name_='CurrentScheduledDeliveryTime', pretty_print=pretty_print)
        if self.CurrentScheduledShipDate is not None:
            self.CurrentScheduledShipDate.export(outfile, level, namespace_, name_='CurrentScheduledShipDate', pretty_print=pretty_print)
        if self.CurrentScheduledShipTime is not None:
            self.CurrentScheduledShipTime.export(outfile, level, namespace_, name_='CurrentScheduledShipTime', pretty_print=pretty_print)
        if self.DocumentVersion is not None:
            self.DocumentVersion.export(outfile, level, namespace_, name_='DocumentVersion', pretty_print=pretty_print)
        if self.DocumentRevision is not None:
            self.DocumentRevision.export(outfile, level, namespace_, name_='DocumentRevision', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TradingPartnerId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TradingPartnerId = obj_
            obj_.original_tagname_ = 'TradingPartnerId'
        elif nodeName_ == 'ShipmentIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipmentIdentification = obj_
            obj_.original_tagname_ = 'ShipmentIdentification'
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'ShipmentTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipmentTime = obj_
            obj_.original_tagname_ = 'ShipmentTime'
        elif nodeName_ == 'TsetPurposeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TsetPurposeCode = obj_
            obj_.original_tagname_ = 'TsetPurposeCode'
        elif nodeName_ == 'TsetTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TsetTypeCode = obj_
            obj_.original_tagname_ = 'TsetTypeCode'
        elif nodeName_ == 'ShipNoticeDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipNoticeDate = obj_
            obj_.original_tagname_ = 'ShipNoticeDate'
        elif nodeName_ == 'ShipNoticeTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipNoticeTime = obj_
            obj_.original_tagname_ = 'ShipNoticeTime'
        elif nodeName_ == 'ASNStructureCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ASNStructureCode = obj_
            obj_.original_tagname_ = 'ASNStructureCode'
        elif nodeName_ == 'FairLaborCompliant':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FairLaborCompliant = obj_
            obj_.original_tagname_ = 'FairLaborCompliant'
        elif nodeName_ == 'BuyersCurrency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyersCurrency = obj_
            obj_.original_tagname_ = 'BuyersCurrency'
        elif nodeName_ == 'SellersCurrency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellersCurrency = obj_
            obj_.original_tagname_ = 'SellersCurrency'
        elif nodeName_ == 'ExchangeRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExchangeRate = obj_
            obj_.original_tagname_ = 'ExchangeRate'
        elif nodeName_ == 'StatusReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusReasonCode = obj_
            obj_.original_tagname_ = 'StatusReasonCode'
        elif nodeName_ == 'BillOfLadingNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BillOfLadingNumber = obj_
            obj_.original_tagname_ = 'BillOfLadingNumber'
        elif nodeName_ == 'CarrierProNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierProNumber = obj_
            obj_.original_tagname_ = 'CarrierProNumber'
        elif nodeName_ == 'AppointmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AppointmentNumber = obj_
            obj_.original_tagname_ = 'AppointmentNumber'
        elif nodeName_ == 'PickupNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PickupNumber = obj_
            obj_.original_tagname_ = 'PickupNumber'
        elif nodeName_ == 'RequestedPickupDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RequestedPickupDate = obj_
            obj_.original_tagname_ = 'RequestedPickupDate'
        elif nodeName_ == 'RequestedPickupTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RequestedPickupTime = obj_
            obj_.original_tagname_ = 'RequestedPickupTime'
        elif nodeName_ == 'ScheduledShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ScheduledShipDate = obj_
            obj_.original_tagname_ = 'ScheduledShipDate'
        elif nodeName_ == 'ScheduledShipTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ScheduledShipTime = obj_
            obj_.original_tagname_ = 'ScheduledShipTime'
        elif nodeName_ == 'CurrentScheduledDeliveryDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CurrentScheduledDeliveryDate = obj_
            obj_.original_tagname_ = 'CurrentScheduledDeliveryDate'
        elif nodeName_ == 'CurrentScheduledDeliveryTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CurrentScheduledDeliveryTime = obj_
            obj_.original_tagname_ = 'CurrentScheduledDeliveryTime'
        elif nodeName_ == 'CurrentScheduledShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CurrentScheduledShipDate = obj_
            obj_.original_tagname_ = 'CurrentScheduledShipDate'
        elif nodeName_ == 'CurrentScheduledShipTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CurrentScheduledShipTime = obj_
            obj_.original_tagname_ = 'CurrentScheduledShipTime'
        elif nodeName_ == 'DocumentVersion':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentVersion = obj_
            obj_.original_tagname_ = 'DocumentVersion'
        elif nodeName_ == 'DocumentRevision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DocumentRevision = obj_
            obj_.original_tagname_ = 'DocumentRevision'
# end class ShipmentHeaderType


class DateType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType.subclass:
            return DateType.subclass(*args_, **kwargs_)
        else:
            return DateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType


class ReferenceIDsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType.subclass:
            return ReferenceIDsType.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType


class NotesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType.subclass:
            return NotesType.subclass(*args_, **kwargs_)
        else:
            return NotesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType


class ContactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType.subclass:
            return ContactType.subclass(*args_, **kwargs_)
        else:
            return ContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType


class AdditionalContactDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType.subclass:
            return AdditionalContactDetailsType.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType1.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType3.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType5.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType


class ReferenceType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType1.subclass:
            return ReferenceType1.subclass(*args_, **kwargs_)
        else:
            return ReferenceType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType2.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType1


class ReferenceIDsType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType2.subclass:
            return ReferenceIDsType2.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType2


class ContactType3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType3.subclass:
            return ContactType3.subclass(*args_, **kwargs_)
        else:
            return ContactType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType4.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType3


class AdditionalContactDetailsType4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType4.subclass:
            return AdditionalContactDetailsType4.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType4


class DateType5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType5.subclass:
            return DateType5.subclass(*args_, **kwargs_)
        else:
            return DateType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType5'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType5


class CarrierInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType.subclass:
            return CarrierInformationType.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType6.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType


class ServiceLevelCodesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType.subclass:
            return ServiceLevelCodesType.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType


class AddressType6(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType6.subclass:
            return AddressType6.subclass(*args_, **kwargs_)
        else:
            return AddressType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType6', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType6'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType7.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType6


class DateType7(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType7.subclass:
            return DateType7.subclass(*args_, **kwargs_)
        else:
            return DateType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType7', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType7', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType7'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType7


class QuantityAndWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.PalletExchangeCode = PalletExchangeCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType.subclass:
            return QuantityAndWeightType.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.LadingQuantity is not None:
            self.LadingQuantity.export(outfile, level, namespace_, name_='LadingQuantity', pretty_print=pretty_print)
        if self.LadingDescription is not None:
            self.LadingDescription.export(outfile, level, namespace_, name_='LadingDescription', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.WeightUOM is not None:
            self.WeightUOM.export(outfile, level, namespace_, name_='WeightUOM', pretty_print=pretty_print)
        if self.Volume is not None:
            self.Volume.export(outfile, level, namespace_, name_='Volume', pretty_print=pretty_print)
        if self.VolumeUOM is not None:
            self.VolumeUOM.export(outfile, level, namespace_, name_='VolumeUOM', pretty_print=pretty_print)
        if self.PalletExchangeCode is not None:
            self.PalletExchangeCode.export(outfile, level, namespace_, name_='PalletExchangeCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'LadingQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingQuantity = obj_
            obj_.original_tagname_ = 'LadingQuantity'
        elif nodeName_ == 'LadingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingDescription = obj_
            obj_.original_tagname_ = 'LadingDescription'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'Weight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightUOM = obj_
            obj_.original_tagname_ = 'WeightUOM'
        elif nodeName_ == 'Volume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
        elif nodeName_ == 'VolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VolumeUOM = obj_
            obj_.original_tagname_ = 'VolumeUOM'
        elif nodeName_ == 'PalletExchangeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletExchangeCode = obj_
            obj_.original_tagname_ = 'PalletExchangeCode'
# end class QuantityAndWeightType


class CarrierSpecialHandlingDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.HazardousMaterialCode = HazardousMaterialCode
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType.subclass:
            return CarrierSpecialHandlingDetailType.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            self.SpecialHandlingCode.export(outfile, level, namespace_, name_='SpecialHandlingCode', pretty_print=pretty_print)
        if self.HazardousMaterialCode is not None:
            self.HazardousMaterialCode.export(outfile, level, namespace_, name_='HazardousMaterialCode', pretty_print=pretty_print)
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SpecialHandlingCode = obj_
            obj_.original_tagname_ = 'SpecialHandlingCode'
        elif nodeName_ == 'HazardousMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialCode = obj_
            obj_.original_tagname_ = 'HazardousMaterialCode'
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
# end class CarrierSpecialHandlingDetailType


class TaxType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType.subclass:
            return TaxType.subclass(*args_, **kwargs_)
        else:
            return TaxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType


class ChargesAllowancesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType.subclass:
            return ChargesAllowancesType.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType8.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType


class TaxType8(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType8.subclass:
            return TaxType8.subclass(*args_, **kwargs_)
        else:
            return TaxType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType8', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType8'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType8


class FOBRelatedInstructionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FOBPayCode=None, FOBLocationQualifier=None, FOBLocationDescription=None, FOBTitlePassageCode=None, FOBTitlePassageLocation=None, TransportationTermsQualifierCode=None, TransportationTermsCode=None, RiskOfLossCode=None, Description=None):
        self.original_tagname_ = None
        self.FOBPayCode = FOBPayCode
        self.FOBLocationQualifier = FOBLocationQualifier
        self.FOBLocationDescription = FOBLocationDescription
        self.FOBTitlePassageCode = FOBTitlePassageCode
        self.FOBTitlePassageLocation = FOBTitlePassageLocation
        self.TransportationTermsQualifierCode = TransportationTermsQualifierCode
        self.TransportationTermsCode = TransportationTermsCode
        self.RiskOfLossCode = RiskOfLossCode
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOBRelatedInstructionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOBRelatedInstructionType.subclass:
            return FOBRelatedInstructionType.subclass(*args_, **kwargs_)
        else:
            return FOBRelatedInstructionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FOBPayCode(self): return self.FOBPayCode
    def set_FOBPayCode(self, FOBPayCode): self.FOBPayCode = FOBPayCode
    def get_FOBLocationQualifier(self): return self.FOBLocationQualifier
    def set_FOBLocationQualifier(self, FOBLocationQualifier): self.FOBLocationQualifier = FOBLocationQualifier
    def get_FOBLocationDescription(self): return self.FOBLocationDescription
    def set_FOBLocationDescription(self, FOBLocationDescription): self.FOBLocationDescription = FOBLocationDescription
    def get_FOBTitlePassageCode(self): return self.FOBTitlePassageCode
    def set_FOBTitlePassageCode(self, FOBTitlePassageCode): self.FOBTitlePassageCode = FOBTitlePassageCode
    def get_FOBTitlePassageLocation(self): return self.FOBTitlePassageLocation
    def set_FOBTitlePassageLocation(self, FOBTitlePassageLocation): self.FOBTitlePassageLocation = FOBTitlePassageLocation
    def get_TransportationTermsQualifierCode(self): return self.TransportationTermsQualifierCode
    def set_TransportationTermsQualifierCode(self, TransportationTermsQualifierCode): self.TransportationTermsQualifierCode = TransportationTermsQualifierCode
    def get_TransportationTermsCode(self): return self.TransportationTermsCode
    def set_TransportationTermsCode(self, TransportationTermsCode): self.TransportationTermsCode = TransportationTermsCode
    def get_RiskOfLossCode(self): return self.RiskOfLossCode
    def set_RiskOfLossCode(self, RiskOfLossCode): self.RiskOfLossCode = RiskOfLossCode
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.FOBPayCode is not None or
            self.FOBLocationQualifier is not None or
            self.FOBLocationDescription is not None or
            self.FOBTitlePassageCode is not None or
            self.FOBTitlePassageLocation is not None or
            self.TransportationTermsQualifierCode is not None or
            self.TransportationTermsCode is not None or
            self.RiskOfLossCode is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOBRelatedInstructionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FOBRelatedInstructionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOBRelatedInstructionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOBRelatedInstructionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FOBPayCode is not None:
            self.FOBPayCode.export(outfile, level, namespace_, name_='FOBPayCode', pretty_print=pretty_print)
        if self.FOBLocationQualifier is not None:
            self.FOBLocationQualifier.export(outfile, level, namespace_, name_='FOBLocationQualifier', pretty_print=pretty_print)
        if self.FOBLocationDescription is not None:
            self.FOBLocationDescription.export(outfile, level, namespace_, name_='FOBLocationDescription', pretty_print=pretty_print)
        if self.FOBTitlePassageCode is not None:
            self.FOBTitlePassageCode.export(outfile, level, namespace_, name_='FOBTitlePassageCode', pretty_print=pretty_print)
        if self.FOBTitlePassageLocation is not None:
            self.FOBTitlePassageLocation.export(outfile, level, namespace_, name_='FOBTitlePassageLocation', pretty_print=pretty_print)
        if self.TransportationTermsQualifierCode is not None:
            self.TransportationTermsQualifierCode.export(outfile, level, namespace_, name_='TransportationTermsQualifierCode', pretty_print=pretty_print)
        if self.TransportationTermsCode is not None:
            self.TransportationTermsCode.export(outfile, level, namespace_, name_='TransportationTermsCode', pretty_print=pretty_print)
        if self.RiskOfLossCode is not None:
            self.RiskOfLossCode.export(outfile, level, namespace_, name_='RiskOfLossCode', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FOBPayCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBPayCode = obj_
            obj_.original_tagname_ = 'FOBPayCode'
        elif nodeName_ == 'FOBLocationQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBLocationQualifier = obj_
            obj_.original_tagname_ = 'FOBLocationQualifier'
        elif nodeName_ == 'FOBLocationDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBLocationDescription = obj_
            obj_.original_tagname_ = 'FOBLocationDescription'
        elif nodeName_ == 'FOBTitlePassageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBTitlePassageCode = obj_
            obj_.original_tagname_ = 'FOBTitlePassageCode'
        elif nodeName_ == 'FOBTitlePassageLocation':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.FOBTitlePassageLocation = obj_
            obj_.original_tagname_ = 'FOBTitlePassageLocation'
        elif nodeName_ == 'TransportationTermsQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransportationTermsQualifierCode = obj_
            obj_.original_tagname_ = 'TransportationTermsQualifierCode'
        elif nodeName_ == 'TransportationTermsCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransportationTermsCode = obj_
            obj_.original_tagname_ = 'TransportationTermsCode'
        elif nodeName_ == 'RiskOfLossCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RiskOfLossCode = obj_
            obj_.original_tagname_ = 'RiskOfLossCode'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class FOBRelatedInstructionType


class OrderLevelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OrderHeader=None, QuantityAndWeight=None, CarrierInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, Commodity=None, PackLevel=None, ItemLevel=None, ContainerLevel=None):
        self.original_tagname_ = None
        self.OrderHeader = OrderHeader
        self.QuantityAndWeight = QuantityAndWeight
        self.CarrierInformation = CarrierInformation
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Address = Address
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.Commodity = Commodity
        self.PackLevel = PackLevel
        self.ItemLevel = ItemLevel
        self.ContainerLevel = ContainerLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderLevelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderLevelType.subclass:
            return OrderLevelType.subclass(*args_, **kwargs_)
        else:
            return OrderLevelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OrderHeader(self): return self.OrderHeader
    def set_OrderHeader(self, OrderHeader): self.OrderHeader = OrderHeader
    def get_QuantityAndWeight(self): return self.QuantityAndWeight
    def set_QuantityAndWeight(self, QuantityAndWeight): self.QuantityAndWeight = QuantityAndWeight
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def get_ContainerLevel(self): return self.ContainerLevel
    def set_ContainerLevel(self, ContainerLevel): self.ContainerLevel = ContainerLevel
    def hasContent_(self):
        if (
            self.OrderHeader is not None or
            self.QuantityAndWeight is not None or
            self.CarrierInformation is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Address is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.Commodity is not None or
            self.PackLevel is not None or
            self.ItemLevel is not None or
            self.ContainerLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderLevelType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderLevelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderLevelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderLevelType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderLevelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrderHeader is not None:
            self.OrderHeader.export(outfile, level, namespace_, name_='OrderHeader', pretty_print=pretty_print)
        if self.QuantityAndWeight is not None:
            self.QuantityAndWeight.export(outfile, level, namespace_, name_='QuantityAndWeight', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
        if self.ItemLevel is not None:
            self.ItemLevel.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        if self.ContainerLevel is not None:
            self.ContainerLevel.export(outfile, level, namespace_, name_='ContainerLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OrderHeader':
            obj_ = OrderHeaderType.factory()
            obj_.build(child_)
            self.OrderHeader = obj_
            obj_.original_tagname_ = 'OrderHeader'
        elif nodeName_ == 'QuantityAndWeight':
            obj_ = QuantityAndWeightType9.factory()
            obj_.build(child_)
            self.QuantityAndWeight = obj_
            obj_.original_tagname_ = 'QuantityAndWeight'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType10.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType14.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType15.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType17.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType18.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType24.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType25.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevelType.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevelType139.factory()
            obj_.build(child_)
            self.ItemLevel = obj_
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'ContainerLevel':
            obj_ = ContainerLevel.factory()
            obj_.build(child_)
            self.ContainerLevel = obj_
            obj_.original_tagname_ = 'ContainerLevel'
# end class OrderLevelType


class OrderHeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DepositorOrderNumber=None, InternalOrderNumber=None, InternalOrderDate=None, InvoiceNumber=None, InvoiceDate=None, PurchaseOrderNumber=None, ReleaseNumber=None, PurchaseOrderDate=None, Department=None, DepartmentDescription=None, Vendor=None, JobNumber=None, Division=None, CustomerAccountNumber=None, CustomerOrderNumber=None, PromotionDealNumber=None, PromotionDealDescription=None, DeliveryDate=None, DeliveryTime=None):
        self.original_tagname_ = None
        self.DepositorOrderNumber = DepositorOrderNumber
        self.InternalOrderNumber = InternalOrderNumber
        self.InternalOrderDate = InternalOrderDate
        self.InvoiceNumber = InvoiceNumber
        self.InvoiceDate = InvoiceDate
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.ReleaseNumber = ReleaseNumber
        self.PurchaseOrderDate = PurchaseOrderDate
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Vendor = Vendor
        self.JobNumber = JobNumber
        self.Division = Division
        self.CustomerAccountNumber = CustomerAccountNumber
        self.CustomerOrderNumber = CustomerOrderNumber
        self.PromotionDealNumber = PromotionDealNumber
        self.PromotionDealDescription = PromotionDealDescription
        self.DeliveryDate = DeliveryDate
        self.DeliveryTime = DeliveryTime
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderHeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderHeaderType.subclass:
            return OrderHeaderType.subclass(*args_, **kwargs_)
        else:
            return OrderHeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DepositorOrderNumber(self): return self.DepositorOrderNumber
    def set_DepositorOrderNumber(self, DepositorOrderNumber): self.DepositorOrderNumber = DepositorOrderNumber
    def get_InternalOrderNumber(self): return self.InternalOrderNumber
    def set_InternalOrderNumber(self, InternalOrderNumber): self.InternalOrderNumber = InternalOrderNumber
    def get_InternalOrderDate(self): return self.InternalOrderDate
    def set_InternalOrderDate(self, InternalOrderDate): self.InternalOrderDate = InternalOrderDate
    def get_InvoiceNumber(self): return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber): self.InvoiceNumber = InvoiceNumber
    def get_InvoiceDate(self): return self.InvoiceDate
    def set_InvoiceDate(self, InvoiceDate): self.InvoiceDate = InvoiceDate
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_ReleaseNumber(self): return self.ReleaseNumber
    def set_ReleaseNumber(self, ReleaseNumber): self.ReleaseNumber = ReleaseNumber
    def get_PurchaseOrderDate(self): return self.PurchaseOrderDate
    def set_PurchaseOrderDate(self, PurchaseOrderDate): self.PurchaseOrderDate = PurchaseOrderDate
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Vendor(self): return self.Vendor
    def set_Vendor(self, Vendor): self.Vendor = Vendor
    def get_JobNumber(self): return self.JobNumber
    def set_JobNumber(self, JobNumber): self.JobNumber = JobNumber
    def get_Division(self): return self.Division
    def set_Division(self, Division): self.Division = Division
    def get_CustomerAccountNumber(self): return self.CustomerAccountNumber
    def set_CustomerAccountNumber(self, CustomerAccountNumber): self.CustomerAccountNumber = CustomerAccountNumber
    def get_CustomerOrderNumber(self): return self.CustomerOrderNumber
    def set_CustomerOrderNumber(self, CustomerOrderNumber): self.CustomerOrderNumber = CustomerOrderNumber
    def get_PromotionDealNumber(self): return self.PromotionDealNumber
    def set_PromotionDealNumber(self, PromotionDealNumber): self.PromotionDealNumber = PromotionDealNumber
    def get_PromotionDealDescription(self): return self.PromotionDealDescription
    def set_PromotionDealDescription(self, PromotionDealDescription): self.PromotionDealDescription = PromotionDealDescription
    def get_DeliveryDate(self): return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate): self.DeliveryDate = DeliveryDate
    def get_DeliveryTime(self): return self.DeliveryTime
    def set_DeliveryTime(self, DeliveryTime): self.DeliveryTime = DeliveryTime
    def hasContent_(self):
        if (
            self.DepositorOrderNumber is not None or
            self.InternalOrderNumber is not None or
            self.InternalOrderDate is not None or
            self.InvoiceNumber is not None or
            self.InvoiceDate is not None or
            self.PurchaseOrderNumber is not None or
            self.ReleaseNumber is not None or
            self.PurchaseOrderDate is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Vendor is not None or
            self.JobNumber is not None or
            self.Division is not None or
            self.CustomerAccountNumber is not None or
            self.CustomerOrderNumber is not None or
            self.PromotionDealNumber is not None or
            self.PromotionDealDescription is not None or
            self.DeliveryDate is not None or
            self.DeliveryTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderHeaderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderHeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderHeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderHeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderHeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DepositorOrderNumber is not None:
            self.DepositorOrderNumber.export(outfile, level, namespace_, name_='DepositorOrderNumber', pretty_print=pretty_print)
        if self.InternalOrderNumber is not None:
            self.InternalOrderNumber.export(outfile, level, namespace_, name_='InternalOrderNumber', pretty_print=pretty_print)
        if self.InternalOrderDate is not None:
            self.InternalOrderDate.export(outfile, level, namespace_, name_='InternalOrderDate', pretty_print=pretty_print)
        if self.InvoiceNumber is not None:
            self.InvoiceNumber.export(outfile, level, namespace_, name_='InvoiceNumber', pretty_print=pretty_print)
        if self.InvoiceDate is not None:
            self.InvoiceDate.export(outfile, level, namespace_, name_='InvoiceDate', pretty_print=pretty_print)
        if self.PurchaseOrderNumber is not None:
            self.PurchaseOrderNumber.export(outfile, level, namespace_, name_='PurchaseOrderNumber', pretty_print=pretty_print)
        if self.ReleaseNumber is not None:
            self.ReleaseNumber.export(outfile, level, namespace_, name_='ReleaseNumber', pretty_print=pretty_print)
        if self.PurchaseOrderDate is not None:
            self.PurchaseOrderDate.export(outfile, level, namespace_, name_='PurchaseOrderDate', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Vendor is not None:
            self.Vendor.export(outfile, level, namespace_, name_='Vendor', pretty_print=pretty_print)
        if self.JobNumber is not None:
            self.JobNumber.export(outfile, level, namespace_, name_='JobNumber', pretty_print=pretty_print)
        if self.Division is not None:
            self.Division.export(outfile, level, namespace_, name_='Division', pretty_print=pretty_print)
        if self.CustomerAccountNumber is not None:
            self.CustomerAccountNumber.export(outfile, level, namespace_, name_='CustomerAccountNumber', pretty_print=pretty_print)
        if self.CustomerOrderNumber is not None:
            self.CustomerOrderNumber.export(outfile, level, namespace_, name_='CustomerOrderNumber', pretty_print=pretty_print)
        if self.PromotionDealNumber is not None:
            self.PromotionDealNumber.export(outfile, level, namespace_, name_='PromotionDealNumber', pretty_print=pretty_print)
        if self.PromotionDealDescription is not None:
            self.PromotionDealDescription.export(outfile, level, namespace_, name_='PromotionDealDescription', pretty_print=pretty_print)
        if self.DeliveryDate is not None:
            self.DeliveryDate.export(outfile, level, namespace_, name_='DeliveryDate', pretty_print=pretty_print)
        if self.DeliveryTime is not None:
            self.DeliveryTime.export(outfile, level, namespace_, name_='DeliveryTime', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DepositorOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepositorOrderNumber = obj_
            obj_.original_tagname_ = 'DepositorOrderNumber'
        elif nodeName_ == 'InternalOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternalOrderNumber = obj_
            obj_.original_tagname_ = 'InternalOrderNumber'
        elif nodeName_ == 'InternalOrderDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternalOrderDate = obj_
            obj_.original_tagname_ = 'InternalOrderDate'
        elif nodeName_ == 'InvoiceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InvoiceNumber = obj_
            obj_.original_tagname_ = 'InvoiceNumber'
        elif nodeName_ == 'InvoiceDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InvoiceDate = obj_
            obj_.original_tagname_ = 'InvoiceDate'
        elif nodeName_ == 'PurchaseOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchaseOrderNumber = obj_
            obj_.original_tagname_ = 'PurchaseOrderNumber'
        elif nodeName_ == 'ReleaseNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReleaseNumber = obj_
            obj_.original_tagname_ = 'ReleaseNumber'
        elif nodeName_ == 'PurchaseOrderDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchaseOrderDate = obj_
            obj_.original_tagname_ = 'PurchaseOrderDate'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Vendor':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Vendor = obj_
            obj_.original_tagname_ = 'Vendor'
        elif nodeName_ == 'JobNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JobNumber = obj_
            obj_.original_tagname_ = 'JobNumber'
        elif nodeName_ == 'Division':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Division = obj_
            obj_.original_tagname_ = 'Division'
        elif nodeName_ == 'CustomerAccountNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CustomerAccountNumber = obj_
            obj_.original_tagname_ = 'CustomerAccountNumber'
        elif nodeName_ == 'CustomerOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CustomerOrderNumber = obj_
            obj_.original_tagname_ = 'CustomerOrderNumber'
        elif nodeName_ == 'PromotionDealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PromotionDealNumber = obj_
            obj_.original_tagname_ = 'PromotionDealNumber'
        elif nodeName_ == 'PromotionDealDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PromotionDealDescription = obj_
            obj_.original_tagname_ = 'PromotionDealDescription'
        elif nodeName_ == 'DeliveryDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DeliveryDate = obj_
            obj_.original_tagname_ = 'DeliveryDate'
        elif nodeName_ == 'DeliveryTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DeliveryTime = obj_
            obj_.original_tagname_ = 'DeliveryTime'
# end class OrderHeaderType


class QuantityAndWeightType9(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.PalletExchangeCode = PalletExchangeCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType9.subclass:
            return QuantityAndWeightType9.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType9', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType9', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType9'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.LadingQuantity is not None:
            self.LadingQuantity.export(outfile, level, namespace_, name_='LadingQuantity', pretty_print=pretty_print)
        if self.LadingDescription is not None:
            self.LadingDescription.export(outfile, level, namespace_, name_='LadingDescription', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.WeightUOM is not None:
            self.WeightUOM.export(outfile, level, namespace_, name_='WeightUOM', pretty_print=pretty_print)
        if self.Volume is not None:
            self.Volume.export(outfile, level, namespace_, name_='Volume', pretty_print=pretty_print)
        if self.VolumeUOM is not None:
            self.VolumeUOM.export(outfile, level, namespace_, name_='VolumeUOM', pretty_print=pretty_print)
        if self.PalletExchangeCode is not None:
            self.PalletExchangeCode.export(outfile, level, namespace_, name_='PalletExchangeCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'LadingQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingQuantity = obj_
            obj_.original_tagname_ = 'LadingQuantity'
        elif nodeName_ == 'LadingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingDescription = obj_
            obj_.original_tagname_ = 'LadingDescription'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'Weight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightUOM = obj_
            obj_.original_tagname_ = 'WeightUOM'
        elif nodeName_ == 'Volume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
        elif nodeName_ == 'VolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VolumeUOM = obj_
            obj_.original_tagname_ = 'VolumeUOM'
        elif nodeName_ == 'PalletExchangeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletExchangeCode = obj_
            obj_.original_tagname_ = 'PalletExchangeCode'
# end class QuantityAndWeightType9


class CarrierInformationType10(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType10)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType10.subclass:
            return CarrierInformationType10.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType10', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType10', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType10'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType11.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType12.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType10


class ServiceLevelCodesType11(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType11)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType11.subclass:
            return ServiceLevelCodesType11.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType11', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType11')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType11', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType11'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType11


class AddressType12(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType12.subclass:
            return AddressType12.subclass(*args_, **kwargs_)
        else:
            return AddressType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType12', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType12'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType13.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType12


class DateType13(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType13)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType13.subclass:
            return DateType13.subclass(*args_, **kwargs_)
        else:
            return DateType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType13', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType13')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType13', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType13'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType13


class DateType14(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType14)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType14.subclass:
            return DateType14.subclass(*args_, **kwargs_)
        else:
            return DateType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType14', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType14')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType14', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType14'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType14


class ReferenceType15(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType15.subclass:
            return ReferenceType15.subclass(*args_, **kwargs_)
        else:
            return ReferenceType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType15', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType15'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType16.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType15


class ReferenceIDsType16(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType16)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType16.subclass:
            return ReferenceIDsType16.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType16(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType16', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType16')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType16', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType16'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType16', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType16


class NotesType17(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType17)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType17.subclass:
            return NotesType17.subclass(*args_, **kwargs_)
        else:
            return NotesType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType17', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType17')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType17', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType17'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType17', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType17


class AddressType18(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType18)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType18.subclass:
            return AddressType18.subclass(*args_, **kwargs_)
        else:
            return AddressType18(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType18', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType18')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType18', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType18'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType18', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType19.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType21.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType23.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType18


class ReferenceType19(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType19)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType19.subclass:
            return ReferenceType19.subclass(*args_, **kwargs_)
        else:
            return ReferenceType19(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType19', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType19')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType19', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType19'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType19', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType20.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType19


class ReferenceIDsType20(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType20)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType20.subclass:
            return ReferenceIDsType20.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType20', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType20')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType20', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType20'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType20


class ContactType21(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType21)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType21.subclass:
            return ContactType21.subclass(*args_, **kwargs_)
        else:
            return ContactType21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType21', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType21')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType21', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType21'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType22.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType21


class AdditionalContactDetailsType22(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType22)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType22.subclass:
            return AdditionalContactDetailsType22.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType22', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType22')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType22', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType22'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType22


class DateType23(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType23.subclass:
            return DateType23.subclass(*args_, **kwargs_)
        else:
            return DateType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType23', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType23')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType23'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType23


class TaxType24(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType24.subclass:
            return TaxType24.subclass(*args_, **kwargs_)
        else:
            return TaxType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType24', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType24')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType24'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType24


class ChargesAllowancesType25(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType25)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType25.subclass:
            return ChargesAllowancesType25.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType25(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType25', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType25')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType25', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType25'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType25', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType26.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType25


class TaxType26(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType26)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType26.subclass:
            return TaxType26.subclass(*args_, **kwargs_)
        else:
            return TaxType26(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType26', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType26')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType26', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType26'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType26', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType26


class CommodityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType


class PackLevelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Pack=None, PhysicalDetails=None, MarksAndNumbersCollection=None, PalletInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, CarrierInformation=None, Packaging=None, ItemLevel=None, PackLevel=None):
        self.original_tagname_ = None
        self.Pack = Pack
        self.PhysicalDetails = PhysicalDetails
        self.MarksAndNumbersCollection = MarksAndNumbersCollection
        self.PalletInformation = PalletInformation
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Address = Address
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.CarrierInformation = CarrierInformation
        self.Packaging = Packaging
        self.ItemLevel = ItemLevel
        self.PackLevel = PackLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackLevelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackLevelType.subclass:
            return PackLevelType.subclass(*args_, **kwargs_)
        else:
            return PackLevelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Pack(self): return self.Pack
    def set_Pack(self, Pack): self.Pack = Pack
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def get_MarksAndNumbersCollection(self): return self.MarksAndNumbersCollection
    def set_MarksAndNumbersCollection(self, MarksAndNumbersCollection): self.MarksAndNumbersCollection = MarksAndNumbersCollection
    def get_PalletInformation(self): return self.PalletInformation
    def set_PalletInformation(self, PalletInformation): self.PalletInformation = PalletInformation
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def hasContent_(self):
        if (
            self.Pack is not None or
            self.PhysicalDetails is not None or
            self.MarksAndNumbersCollection is not None or
            self.PalletInformation is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Address is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.CarrierInformation is not None or
            self.Packaging is not None or
            self.ItemLevel is not None or
            self.PackLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackLevelType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackLevelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackLevelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackLevelType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackLevelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Pack is not None:
            self.Pack.export(outfile, level, namespace_, name_='Pack', pretty_print=pretty_print)
        if self.PhysicalDetails is not None:
            self.PhysicalDetails.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        if self.MarksAndNumbersCollection is not None:
            self.MarksAndNumbersCollection.export(outfile, level, namespace_, name_='MarksAndNumbersCollection', pretty_print=pretty_print)
        if self.PalletInformation is not None:
            self.PalletInformation.export(outfile, level, namespace_, name_='PalletInformation', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Packaging is not None:
            self.Packaging.export(outfile, level, namespace_, name_='Packaging', pretty_print=pretty_print)
        if self.ItemLevel is not None:
            self.ItemLevel.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Pack':
            obj_ = PackType.factory()
            obj_.build(child_)
            self.Pack = obj_
            obj_.original_tagname_ = 'Pack'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType.factory()
            obj_.build(child_)
            self.PhysicalDetails = obj_
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'MarksAndNumbersCollection':
            obj_ = MarksAndNumbersCollectionType.factory()
            obj_.build(child_)
            self.MarksAndNumbersCollection = obj_
            obj_.original_tagname_ = 'MarksAndNumbersCollection'
        elif nodeName_ == 'PalletInformation':
            obj_ = PalletInformationType.factory()
            obj_.build(child_)
            self.PalletInformation = obj_
            obj_.original_tagname_ = 'PalletInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType27.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType28.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType30.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType31.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType37.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType38.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType40.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Packaging':
            obj_ = PackagingType.factory()
            obj_.build(child_)
            self.Packaging = obj_
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevelType.factory()
            obj_.build(child_)
            self.ItemLevel = obj_
            obj_.original_tagname_ = 'ItemLevel'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevelType73.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
# end class PackLevelType


class PackType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackLevelType=None, ShippingSerialID=None, CarrierPackageID=None):
        self.original_tagname_ = None
        self.PackLevelType = PackLevelType
        self.ShippingSerialID = ShippingSerialID
        self.CarrierPackageID = CarrierPackageID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackType.subclass:
            return PackType.subclass(*args_, **kwargs_)
        else:
            return PackType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackLevelType(self): return self.PackLevelType
    def set_PackLevelType(self, PackLevelType): self.PackLevelType = PackLevelType
    def get_ShippingSerialID(self): return self.ShippingSerialID
    def set_ShippingSerialID(self, ShippingSerialID): self.ShippingSerialID = ShippingSerialID
    def get_CarrierPackageID(self): return self.CarrierPackageID
    def set_CarrierPackageID(self, CarrierPackageID): self.CarrierPackageID = CarrierPackageID
    def hasContent_(self):
        if (
            self.PackLevelType is not None or
            self.ShippingSerialID is not None or
            self.CarrierPackageID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackLevelType is not None:
            self.PackLevelType.export(outfile, level, namespace_, name_='PackLevelType', pretty_print=pretty_print)
        if self.ShippingSerialID is not None:
            self.ShippingSerialID.export(outfile, level, namespace_, name_='ShippingSerialID', pretty_print=pretty_print)
        if self.CarrierPackageID is not None:
            self.CarrierPackageID.export(outfile, level, namespace_, name_='CarrierPackageID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackLevelType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLevelType = obj_
            obj_.original_tagname_ = 'PackLevelType'
        elif nodeName_ == 'ShippingSerialID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShippingSerialID = obj_
            obj_.original_tagname_ = 'ShippingSerialID'
        elif nodeName_ == 'CarrierPackageID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierPackageID = obj_
            obj_.original_tagname_ = 'CarrierPackageID'
# end class PackType


class PhysicalDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType.subclass:
            return PhysicalDetailsType.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            self.PackQualifier.export(outfile, level, namespace_, name_='PackQualifier', pretty_print=pretty_print)
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            self.PackUOM.export(outfile, level, namespace_, name_='PackUOM', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            self.PackWeightUOM.export(outfile, level, namespace_, name_='PackWeightUOM', pretty_print=pretty_print)
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            self.PackVolumeUOM.export(outfile, level, namespace_, name_='PackVolumeUOM', pretty_print=pretty_print)
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            self.PackDimensionUOM.export(outfile, level, namespace_, name_='PackDimensionUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackQualifier = obj_
            obj_.original_tagname_ = 'PackQualifier'
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackUOM = obj_
            obj_.original_tagname_ = 'PackUOM'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeightUOM = obj_
            obj_.original_tagname_ = 'PackWeightUOM'
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolumeUOM = obj_
            obj_.original_tagname_ = 'PackVolumeUOM'
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackDimensionUOM = obj_
            obj_.original_tagname_ = 'PackDimensionUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType


class MarksAndNumbersCollectionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarksAndNumbersQualifier1=None, MarksAndNumbers1=None):
        self.original_tagname_ = None
        self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
        self.MarksAndNumbers1 = MarksAndNumbers1
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarksAndNumbersCollectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarksAndNumbersCollectionType.subclass:
            return MarksAndNumbersCollectionType.subclass(*args_, **kwargs_)
        else:
            return MarksAndNumbersCollectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarksAndNumbersQualifier1(self): return self.MarksAndNumbersQualifier1
    def set_MarksAndNumbersQualifier1(self, MarksAndNumbersQualifier1): self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
    def get_MarksAndNumbers1(self): return self.MarksAndNumbers1
    def set_MarksAndNumbers1(self, MarksAndNumbers1): self.MarksAndNumbers1 = MarksAndNumbers1
    def hasContent_(self):
        if (
            self.MarksAndNumbersQualifier1 is not None or
            self.MarksAndNumbers1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarksAndNumbersCollectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MarksAndNumbersCollectionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MarksAndNumbersCollectionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarksAndNumbersQualifier1 is not None:
            self.MarksAndNumbersQualifier1.export(outfile, level, namespace_, name_='MarksAndNumbersQualifier1', pretty_print=pretty_print)
        if self.MarksAndNumbers1 is not None:
            self.MarksAndNumbers1.export(outfile, level, namespace_, name_='MarksAndNumbers1', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarksAndNumbersQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbersQualifier1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbersQualifier1'
        elif nodeName_ == 'MarksAndNumbers1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbers1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbers1'
# end class MarksAndNumbersCollectionType


class PalletInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PalletQualifier=None, PalletValue=None, PalletTypeCode=None, PalletTiers=None, PalletBlocks=None, UnitWeight=None, UnitWeightUOM=None, Length=None, Width=None, Height=None, UnitOfMeasure=None, WeightQualifier=None, PalletWeight=None, PalletWeightUOM=None, PalletVolume=None, PalletVolumeUOM=None, PalletExchangeCode=None, PalletStructureCode=None):
        self.original_tagname_ = None
        self.PalletQualifier = PalletQualifier
        self.PalletValue = PalletValue
        self.PalletTypeCode = PalletTypeCode
        self.PalletTiers = PalletTiers
        self.PalletBlocks = PalletBlocks
        self.UnitWeight = UnitWeight
        self.UnitWeightUOM = UnitWeightUOM
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.UnitOfMeasure = UnitOfMeasure
        self.WeightQualifier = WeightQualifier
        self.PalletWeight = PalletWeight
        self.PalletWeightUOM = PalletWeightUOM
        self.PalletVolume = PalletVolume
        self.PalletVolumeUOM = PalletVolumeUOM
        self.PalletExchangeCode = PalletExchangeCode
        self.PalletStructureCode = PalletStructureCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletInformationType.subclass:
            return PalletInformationType.subclass(*args_, **kwargs_)
        else:
            return PalletInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletQualifier(self): return self.PalletQualifier
    def set_PalletQualifier(self, PalletQualifier): self.PalletQualifier = PalletQualifier
    def get_PalletValue(self): return self.PalletValue
    def set_PalletValue(self, PalletValue): self.PalletValue = PalletValue
    def get_PalletTypeCode(self): return self.PalletTypeCode
    def set_PalletTypeCode(self, PalletTypeCode): self.PalletTypeCode = PalletTypeCode
    def get_PalletTiers(self): return self.PalletTiers
    def set_PalletTiers(self, PalletTiers): self.PalletTiers = PalletTiers
    def get_PalletBlocks(self): return self.PalletBlocks
    def set_PalletBlocks(self, PalletBlocks): self.PalletBlocks = PalletBlocks
    def get_UnitWeight(self): return self.UnitWeight
    def set_UnitWeight(self, UnitWeight): self.UnitWeight = UnitWeight
    def get_UnitWeightUOM(self): return self.UnitWeightUOM
    def set_UnitWeightUOM(self, UnitWeightUOM): self.UnitWeightUOM = UnitWeightUOM
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PalletWeight(self): return self.PalletWeight
    def set_PalletWeight(self, PalletWeight): self.PalletWeight = PalletWeight
    def get_PalletWeightUOM(self): return self.PalletWeightUOM
    def set_PalletWeightUOM(self, PalletWeightUOM): self.PalletWeightUOM = PalletWeightUOM
    def get_PalletVolume(self): return self.PalletVolume
    def set_PalletVolume(self, PalletVolume): self.PalletVolume = PalletVolume
    def get_PalletVolumeUOM(self): return self.PalletVolumeUOM
    def set_PalletVolumeUOM(self, PalletVolumeUOM): self.PalletVolumeUOM = PalletVolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def get_PalletStructureCode(self): return self.PalletStructureCode
    def set_PalletStructureCode(self, PalletStructureCode): self.PalletStructureCode = PalletStructureCode
    def hasContent_(self):
        if (
            self.PalletQualifier is not None or
            self.PalletValue is not None or
            self.PalletTypeCode is not None or
            self.PalletTiers is not None or
            self.PalletBlocks is not None or
            self.UnitWeight is not None or
            self.UnitWeightUOM is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.UnitOfMeasure is not None or
            self.WeightQualifier is not None or
            self.PalletWeight is not None or
            self.PalletWeightUOM is not None or
            self.PalletVolume is not None or
            self.PalletVolumeUOM is not None or
            self.PalletExchangeCode is not None or
            self.PalletStructureCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PalletInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PalletInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PalletInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PalletInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletQualifier is not None:
            self.PalletQualifier.export(outfile, level, namespace_, name_='PalletQualifier', pretty_print=pretty_print)
        if self.PalletValue is not None:
            self.PalletValue.export(outfile, level, namespace_, name_='PalletValue', pretty_print=pretty_print)
        if self.PalletTypeCode is not None:
            self.PalletTypeCode.export(outfile, level, namespace_, name_='PalletTypeCode', pretty_print=pretty_print)
        if self.PalletTiers is not None:
            self.PalletTiers.export(outfile, level, namespace_, name_='PalletTiers', pretty_print=pretty_print)
        if self.PalletBlocks is not None:
            self.PalletBlocks.export(outfile, level, namespace_, name_='PalletBlocks', pretty_print=pretty_print)
        if self.UnitWeight is not None:
            self.UnitWeight.export(outfile, level, namespace_, name_='UnitWeight', pretty_print=pretty_print)
        if self.UnitWeightUOM is not None:
            self.UnitWeightUOM.export(outfile, level, namespace_, name_='UnitWeightUOM', pretty_print=pretty_print)
        if self.Length is not None:
            self.Length.export(outfile, level, namespace_, name_='Length', pretty_print=pretty_print)
        if self.Width is not None:
            self.Width.export(outfile, level, namespace_, name_='Width', pretty_print=pretty_print)
        if self.Height is not None:
            self.Height.export(outfile, level, namespace_, name_='Height', pretty_print=pretty_print)
        if self.UnitOfMeasure is not None:
            self.UnitOfMeasure.export(outfile, level, namespace_, name_='UnitOfMeasure', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PalletWeight is not None:
            self.PalletWeight.export(outfile, level, namespace_, name_='PalletWeight', pretty_print=pretty_print)
        if self.PalletWeightUOM is not None:
            self.PalletWeightUOM.export(outfile, level, namespace_, name_='PalletWeightUOM', pretty_print=pretty_print)
        if self.PalletVolume is not None:
            self.PalletVolume.export(outfile, level, namespace_, name_='PalletVolume', pretty_print=pretty_print)
        if self.PalletVolumeUOM is not None:
            self.PalletVolumeUOM.export(outfile, level, namespace_, name_='PalletVolumeUOM', pretty_print=pretty_print)
        if self.PalletExchangeCode is not None:
            self.PalletExchangeCode.export(outfile, level, namespace_, name_='PalletExchangeCode', pretty_print=pretty_print)
        if self.PalletStructureCode is not None:
            self.PalletStructureCode.export(outfile, level, namespace_, name_='PalletStructureCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletQualifier = obj_
            obj_.original_tagname_ = 'PalletQualifier'
        elif nodeName_ == 'PalletValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletValue = obj_
            obj_.original_tagname_ = 'PalletValue'
        elif nodeName_ == 'PalletTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTypeCode = obj_
            obj_.original_tagname_ = 'PalletTypeCode'
        elif nodeName_ == 'PalletTiers':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTiers = obj_
            obj_.original_tagname_ = 'PalletTiers'
        elif nodeName_ == 'PalletBlocks':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletBlocks = obj_
            obj_.original_tagname_ = 'PalletBlocks'
        elif nodeName_ == 'UnitWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeight = obj_
            obj_.original_tagname_ = 'UnitWeight'
        elif nodeName_ == 'UnitWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeightUOM = obj_
            obj_.original_tagname_ = 'UnitWeightUOM'
        elif nodeName_ == 'Length':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Length = obj_
            obj_.original_tagname_ = 'Length'
        elif nodeName_ == 'Width':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Width = obj_
            obj_.original_tagname_ = 'Width'
        elif nodeName_ == 'Height':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Height = obj_
            obj_.original_tagname_ = 'Height'
        elif nodeName_ == 'UnitOfMeasure':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitOfMeasure = obj_
            obj_.original_tagname_ = 'UnitOfMeasure'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PalletWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'PalletWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeightUOM = obj_
            obj_.original_tagname_ = 'PalletWeightUOM'
        elif nodeName_ == 'PalletVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolume = obj_
            obj_.original_tagname_ = 'PalletVolume'
        elif nodeName_ == 'PalletVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolumeUOM = obj_
            obj_.original_tagname_ = 'PalletVolumeUOM'
        elif nodeName_ == 'PalletExchangeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletExchangeCode = obj_
            obj_.original_tagname_ = 'PalletExchangeCode'
        elif nodeName_ == 'PalletStructureCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletStructureCode = obj_
            obj_.original_tagname_ = 'PalletStructureCode'
# end class PalletInformationType


class DateType27(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType27)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType27.subclass:
            return DateType27.subclass(*args_, **kwargs_)
        else:
            return DateType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType27', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType27')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType27', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType27'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType27', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType27


class ReferenceType28(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType28)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType28.subclass:
            return ReferenceType28.subclass(*args_, **kwargs_)
        else:
            return ReferenceType28(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType28', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType28')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType28', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType28'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType28', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType29.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType28


class ReferenceIDsType29(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType29)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType29.subclass:
            return ReferenceIDsType29.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType29(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType29', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType29')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType29', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType29'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType29', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType29


class NotesType30(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType30)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType30.subclass:
            return NotesType30.subclass(*args_, **kwargs_)
        else:
            return NotesType30(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType30', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType30')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType30', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType30'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType30', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType30


class AddressType31(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType31)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType31.subclass:
            return AddressType31.subclass(*args_, **kwargs_)
        else:
            return AddressType31(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType31', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType31')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType31', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType31'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType31', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType32.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType34.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType36.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType31


class ReferenceType32(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType32)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType32.subclass:
            return ReferenceType32.subclass(*args_, **kwargs_)
        else:
            return ReferenceType32(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType32', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType32')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType32', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType32'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType32', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType33.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType32


class ReferenceIDsType33(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType33)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType33.subclass:
            return ReferenceIDsType33.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType33(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType33', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType33')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType33', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType33'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType33', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType33


class ContactType34(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType34)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType34.subclass:
            return ContactType34.subclass(*args_, **kwargs_)
        else:
            return ContactType34(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType34', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType34')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType34', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType34'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType34', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType35.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType34


class AdditionalContactDetailsType35(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType35)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType35.subclass:
            return AdditionalContactDetailsType35.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType35(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType35', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType35')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType35', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType35'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType35', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType35


class DateType36(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType36)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType36.subclass:
            return DateType36.subclass(*args_, **kwargs_)
        else:
            return DateType36(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType36', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType36')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType36', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType36'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType36', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType36


class TaxType37(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType37)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType37.subclass:
            return TaxType37.subclass(*args_, **kwargs_)
        else:
            return TaxType37(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType37', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType37')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType37', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType37'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType37', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType37


class ChargesAllowancesType38(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType38)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType38.subclass:
            return ChargesAllowancesType38.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType38(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType38', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType38')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType38', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType38'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType38', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType39.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType38


class TaxType39(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType39)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType39.subclass:
            return TaxType39.subclass(*args_, **kwargs_)
        else:
            return TaxType39(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType39', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType39')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType39', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType39'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType39', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType39


class CarrierInformationType40(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType40)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType40.subclass:
            return CarrierInformationType40.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType40(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType40', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType40')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType40', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType40'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType40', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType41.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType42.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType40


class ServiceLevelCodesType41(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType41)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType41.subclass:
            return ServiceLevelCodesType41.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType41(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType41', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType41')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType41', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType41'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType41', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType41


class AddressType42(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType42)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType42.subclass:
            return AddressType42.subclass(*args_, **kwargs_)
        else:
            return AddressType42(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType42', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType42')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType42', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType42'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType42', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType43.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType42


class DateType43(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType43)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType43.subclass:
            return DateType43.subclass(*args_, **kwargs_)
        else:
            return DateType43(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType43', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType43')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType43', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType43'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType43', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType43


class PackagingType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, PackagingCharacteristicCode=None, AgencyQualifierCode=None, PackagingDescriptionCode=None, PackagingDescription=None, UnitLoadOptionCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.PackagingCharacteristicCode = PackagingCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.PackagingDescriptionCode = PackagingDescriptionCode
        self.PackagingDescription = PackagingDescription
        self.UnitLoadOptionCode = UnitLoadOptionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingType.subclass:
            return PackagingType.subclass(*args_, **kwargs_)
        else:
            return PackagingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_PackagingCharacteristicCode(self): return self.PackagingCharacteristicCode
    def set_PackagingCharacteristicCode(self, PackagingCharacteristicCode): self.PackagingCharacteristicCode = PackagingCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_PackagingDescriptionCode(self): return self.PackagingDescriptionCode
    def set_PackagingDescriptionCode(self, PackagingDescriptionCode): self.PackagingDescriptionCode = PackagingDescriptionCode
    def get_PackagingDescription(self): return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription): self.PackagingDescription = PackagingDescription
    def get_UnitLoadOptionCode(self): return self.UnitLoadOptionCode
    def set_UnitLoadOptionCode(self, UnitLoadOptionCode): self.UnitLoadOptionCode = UnitLoadOptionCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.PackagingCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.PackagingDescriptionCode is not None or
            self.PackagingDescription is not None or
            self.UnitLoadOptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackagingType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackagingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackagingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackagingType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackagingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.PackagingCharacteristicCode is not None:
            self.PackagingCharacteristicCode.export(outfile, level, namespace_, name_='PackagingCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.PackagingDescriptionCode is not None:
            self.PackagingDescriptionCode.export(outfile, level, namespace_, name_='PackagingDescriptionCode', pretty_print=pretty_print)
        if self.PackagingDescription is not None:
            self.PackagingDescription.export(outfile, level, namespace_, name_='PackagingDescription', pretty_print=pretty_print)
        if self.UnitLoadOptionCode is not None:
            self.UnitLoadOptionCode.export(outfile, level, namespace_, name_='UnitLoadOptionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'PackagingCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingCharacteristicCode = obj_
            obj_.original_tagname_ = 'PackagingCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'PackagingDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescriptionCode = obj_
            obj_.original_tagname_ = 'PackagingDescriptionCode'
        elif nodeName_ == 'PackagingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'UnitLoadOptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitLoadOptionCode = obj_
            obj_.original_tagname_ = 'UnitLoadOptionCode'
# end class PackagingType


class ItemLevelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentLine=None, PhysicalDetails=None, CarrierSpecialHandlingDetail=None, CarrierInformation=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, Date=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, Tax=None, ChargesAllowances=None, ItemLoadInfo=None, PackLevel=None):
        self.original_tagname_ = None
        self.ShipmentLine = ShipmentLine
        self.PhysicalDetails = PhysicalDetails
        self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        self.CarrierInformation = CarrierInformation
        self.Measurements = Measurements
        self.PriceInformation = PriceInformation
        self.ProductOrItemDescription = ProductOrItemDescription
        self.MasterItemAttribute = MasterItemAttribute
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Commodity = Commodity
        self.Address = Address
        self.Sublines = Sublines
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.ItemLoadInfo = ItemLoadInfo
        self.PackLevel = PackLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLevelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLevelType.subclass:
            return ItemLevelType.subclass(*args_, **kwargs_)
        else:
            return ItemLevelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentLine(self): return self.ShipmentLine
    def set_ShipmentLine(self, ShipmentLine): self.ShipmentLine = ShipmentLine
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_ItemLoadInfo(self): return self.ItemLoadInfo
    def set_ItemLoadInfo(self, ItemLoadInfo): self.ItemLoadInfo = ItemLoadInfo
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def hasContent_(self):
        if (
            self.ShipmentLine is not None or
            self.PhysicalDetails is not None or
            self.CarrierSpecialHandlingDetail is not None or
            self.CarrierInformation is not None or
            self.Measurements is not None or
            self.PriceInformation is not None or
            self.ProductOrItemDescription is not None or
            self.MasterItemAttribute is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Commodity is not None or
            self.Address is not None or
            self.Sublines is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.ItemLoadInfo is not None or
            self.PackLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLevelType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLevelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLevelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLevelType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLevelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentLine is not None:
            self.ShipmentLine.export(outfile, level, namespace_, name_='ShipmentLine', pretty_print=pretty_print)
        if self.PhysicalDetails is not None:
            self.PhysicalDetails.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        if self.CarrierSpecialHandlingDetail is not None:
            self.CarrierSpecialHandlingDetail.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        if self.PriceInformation is not None:
            self.PriceInformation.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.MasterItemAttribute is not None:
            self.MasterItemAttribute.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.ItemLoadInfo is not None:
            self.ItemLoadInfo.export(outfile, level, namespace_, name_='ItemLoadInfo', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentLine':
            obj_ = ShipmentLineType.factory()
            obj_.build(child_)
            self.ShipmentLine = obj_
            obj_.original_tagname_ = 'ShipmentLine'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType44.factory()
            obj_.build(child_)
            self.PhysicalDetails = obj_
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType45.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail = obj_
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType46.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType.factory()
            obj_.build(child_)
            self.PriceInformation = obj_
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType.factory()
            obj_.build(child_)
            self.MasterItemAttribute = obj_
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'Date':
            obj_ = DateType51.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType52.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType54.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType55.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType56.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'Tax':
            obj_ = TaxType67.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType68.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'ItemLoadInfo':
            obj_ = ItemLoadInfoType.factory()
            obj_.build(child_)
            self.ItemLoadInfo = obj_
            obj_.original_tagname_ = 'ItemLoadInfo'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
# end class ItemLevelType


class ShipmentLineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ItemStatusCode=None, ShipQty=None, ShipQtyUOM=None, ShipDate=None, QtyLeftToReceive=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.ItemStatusCode = ItemStatusCode
        self.ShipQty = ShipQty
        self.ShipQtyUOM = ShipQtyUOM
        self.ShipDate = ShipDate
        self.QtyLeftToReceive = QtyLeftToReceive
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLineType.subclass:
            return ShipmentLineType.subclass(*args_, **kwargs_)
        else:
            return ShipmentLineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ShipQty(self): return self.ShipQty
    def set_ShipQty(self, ShipQty): self.ShipQty = ShipQty
    def get_ShipQtyUOM(self): return self.ShipQtyUOM
    def set_ShipQtyUOM(self, ShipQtyUOM): self.ShipQtyUOM = ShipQtyUOM
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_QtyLeftToReceive(self): return self.QtyLeftToReceive
    def set_QtyLeftToReceive(self, QtyLeftToReceive): self.QtyLeftToReceive = QtyLeftToReceive
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ItemStatusCode is not None or
            self.ShipQty is not None or
            self.ShipQtyUOM is not None or
            self.ShipDate is not None or
            self.QtyLeftToReceive is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentLineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentLineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentLineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentLineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentLineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            self.OrderQty.export(outfile, level, namespace_, name_='OrderQty', pretty_print=pretty_print)
        if self.OrderQtyUOM is not None:
            self.OrderQtyUOM.export(outfile, level, namespace_, name_='OrderQtyUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.ItemStatusCode is not None:
            self.ItemStatusCode.export(outfile, level, namespace_, name_='ItemStatusCode', pretty_print=pretty_print)
        if self.ShipQty is not None:
            self.ShipQty.export(outfile, level, namespace_, name_='ShipQty', pretty_print=pretty_print)
        if self.ShipQtyUOM is not None:
            self.ShipQtyUOM.export(outfile, level, namespace_, name_='ShipQtyUOM', pretty_print=pretty_print)
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.QtyLeftToReceive is not None:
            self.QtyLeftToReceive.export(outfile, level, namespace_, name_='QtyLeftToReceive', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Class is not None:
            self.Class.export(outfile, level, namespace_, name_='Class', pretty_print=pretty_print)
        if self.SellerDateCode is not None:
            self.SellerDateCode.export(outfile, level, namespace_, name_='SellerDateCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQty = obj_
            obj_.original_tagname_ = 'OrderQty'
        elif nodeName_ == 'OrderQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQtyUOM = obj_
            obj_.original_tagname_ = 'OrderQtyUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'ItemStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemStatusCode = obj_
            obj_.original_tagname_ = 'ItemStatusCode'
        elif nodeName_ == 'ShipQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQty = obj_
            obj_.original_tagname_ = 'ShipQty'
        elif nodeName_ == 'ShipQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQtyUOM = obj_
            obj_.original_tagname_ = 'ShipQtyUOM'
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'QtyLeftToReceive':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyLeftToReceive = obj_
            obj_.original_tagname_ = 'QtyLeftToReceive'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Class':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Class = obj_
            obj_.original_tagname_ = 'Class'
        elif nodeName_ == 'SellerDateCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellerDateCode = obj_
            obj_.original_tagname_ = 'SellerDateCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class ShipmentLineType


class ProductIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType.subclass:
            return ProductIDType.subclass(*args_, **kwargs_)
        else:
            return ProductIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType


class NRFStandardColorAndSizeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType.subclass:
            return NRFStandardColorAndSizeType.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType


class PhysicalDetailsType44(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType44)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType44.subclass:
            return PhysicalDetailsType44.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType44(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType44', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType44')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType44', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType44'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType44', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            self.PackQualifier.export(outfile, level, namespace_, name_='PackQualifier', pretty_print=pretty_print)
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            self.PackUOM.export(outfile, level, namespace_, name_='PackUOM', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            self.PackWeightUOM.export(outfile, level, namespace_, name_='PackWeightUOM', pretty_print=pretty_print)
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            self.PackVolumeUOM.export(outfile, level, namespace_, name_='PackVolumeUOM', pretty_print=pretty_print)
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            self.PackDimensionUOM.export(outfile, level, namespace_, name_='PackDimensionUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackQualifier = obj_
            obj_.original_tagname_ = 'PackQualifier'
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackUOM = obj_
            obj_.original_tagname_ = 'PackUOM'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeightUOM = obj_
            obj_.original_tagname_ = 'PackWeightUOM'
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolumeUOM = obj_
            obj_.original_tagname_ = 'PackVolumeUOM'
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackDimensionUOM = obj_
            obj_.original_tagname_ = 'PackDimensionUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType44


class CarrierSpecialHandlingDetailType45(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.HazardousMaterialCode = HazardousMaterialCode
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType45)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType45.subclass:
            return CarrierSpecialHandlingDetailType45.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType45(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType45', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType45')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType45', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType45'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType45', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            self.SpecialHandlingCode.export(outfile, level, namespace_, name_='SpecialHandlingCode', pretty_print=pretty_print)
        if self.HazardousMaterialCode is not None:
            self.HazardousMaterialCode.export(outfile, level, namespace_, name_='HazardousMaterialCode', pretty_print=pretty_print)
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SpecialHandlingCode = obj_
            obj_.original_tagname_ = 'SpecialHandlingCode'
        elif nodeName_ == 'HazardousMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialCode = obj_
            obj_.original_tagname_ = 'HazardousMaterialCode'
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
# end class CarrierSpecialHandlingDetailType45


class CarrierInformationType46(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType46)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType46.subclass:
            return CarrierInformationType46.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType46(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType46', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType46')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType46', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType46'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType46', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType47.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType48.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType46


class ServiceLevelCodesType47(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType47)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType47.subclass:
            return ServiceLevelCodesType47.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType47(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType47', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType47')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType47', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType47'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType47', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType47


class AddressType48(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType48)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType48.subclass:
            return AddressType48.subclass(*args_, **kwargs_)
        else:
            return AddressType48(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType48', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType48')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType48', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType48'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType48', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType49.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType48


class DateType49(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType49)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType49.subclass:
            return DateType49.subclass(*args_, **kwargs_)
        else:
            return DateType49(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType49', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType49')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType49', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType49'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType49', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType49


class MeasurementsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType.subclass:
            return MeasurementsType.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType


class PriceInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType.subclass:
            return PriceInformationType.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType


class ProductOrItemDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType.subclass:
            return ProductOrItemDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType


class MasterItemAttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType.subclass:
            return MasterItemAttributeType.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def hasContent_(self):
        if (
            self.ItemAttribute is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttribute is not None:
            self.ItemAttribute.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType.factory()
            obj_.build(child_)
            self.ItemAttribute = obj_
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType


class ItemAttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType.subclass:
            return ItemAttributeType.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            self.ItemAttributeQualifier.export(outfile, level, namespace_, name_='ItemAttributeQualifier', pretty_print=pretty_print)
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            self.ValueUOM.export(outfile, level, namespace_, name_='ValueUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemAttributeQualifier = obj_
            obj_.original_tagname_ = 'ItemAttributeQualifier'
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ValueUOM = obj_
            obj_.original_tagname_ = 'ValueUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType50.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType


class MeasurementsType50(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType50)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType50.subclass:
            return MeasurementsType50.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType50(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType50', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType50')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType50', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType50'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType50', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType50


class DateType51(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType51)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType51.subclass:
            return DateType51.subclass(*args_, **kwargs_)
        else:
            return DateType51(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType51', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType51')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType51', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType51'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType51', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType51


class ReferenceType52(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType52)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType52.subclass:
            return ReferenceType52.subclass(*args_, **kwargs_)
        else:
            return ReferenceType52(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType52', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType52')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType52', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType52'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType52', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType53.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType52


class ReferenceIDsType53(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType53)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType53.subclass:
            return ReferenceIDsType53.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType53(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType53', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType53')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType53', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType53'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType53', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType53


class NotesType54(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType54)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType54.subclass:
            return NotesType54.subclass(*args_, **kwargs_)
        else:
            return NotesType54(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType54', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType54')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType54', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType54'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType54', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType54


class CommodityType55(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType55)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType55.subclass:
            return CommodityType55.subclass(*args_, **kwargs_)
        else:
            return CommodityType55(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType55', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType55')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType55', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType55'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType55', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType55


class AddressType56(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType56)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType56.subclass:
            return AddressType56.subclass(*args_, **kwargs_)
        else:
            return AddressType56(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType56', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType56')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType56', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType56'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType56', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType57.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType59.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType61.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType56


class ReferenceType57(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType57)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType57.subclass:
            return ReferenceType57.subclass(*args_, **kwargs_)
        else:
            return ReferenceType57(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType57', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType57')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType57', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType57'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType57', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType58.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType57


class ReferenceIDsType58(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType58)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType58.subclass:
            return ReferenceIDsType58.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType58(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType58', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType58')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType58', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType58'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType58', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType58


class ContactType59(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType59)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType59.subclass:
            return ContactType59.subclass(*args_, **kwargs_)
        else:
            return ContactType59(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType59', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType59')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType59', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType59'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType59', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType60.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType59


class AdditionalContactDetailsType60(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType60)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType60.subclass:
            return AdditionalContactDetailsType60.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType60(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType60', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType60')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType60', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType60'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType60', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType60


class DateType61(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType61)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType61.subclass:
            return DateType61.subclass(*args_, **kwargs_)
        else:
            return DateType61(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType61', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType61')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType61', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType61'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType61', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType61


class SublinesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType.subclass:
            return SublinesType.subclass(*args_, **kwargs_)
        else:
            return SublinesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def hasContent_(self):
        if (
            self.Subline is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Subline is not None:
            self.Subline.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType.factory()
            obj_.build(child_)
            self.Subline = obj_
            obj_.original_tagname_ = 'Subline'
# end class SublinesType


class SublineType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceInformation=None, ProductOrItemDescription=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        self.PriceInformation = PriceInformation
        self.ProductOrItemDescription = ProductOrItemDescription
        self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType.subclass:
            return SublineType.subclass(*args_, **kwargs_)
        else:
            return SublineType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceInformation is not None or
            self.ProductOrItemDescription is not None or
            self.Commodity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        if self.PriceInformation is not None:
            self.PriceInformation.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType64.factory()
            obj_.build(child_)
            self.PriceInformation = obj_
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType65.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType66.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
# end class SublineType


class SublineItemDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType.subclass:
            return SublineItemDetailType.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            self.QtyPerUOM.export(outfile, level, namespace_, name_='QtyPerUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType62.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPerUOM = obj_
            obj_.original_tagname_ = 'QtyPerUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType63.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType


class ProductIDType62(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType62)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType62.subclass:
            return ProductIDType62.subclass(*args_, **kwargs_)
        else:
            return ProductIDType62(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType62', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType62')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType62', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType62'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType62', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType62


class NRFStandardColorAndSizeType63(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType63)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType63.subclass:
            return NRFStandardColorAndSizeType63.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType63(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType63', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType63')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType63', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType63'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType63', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType63


class PriceInformationType64(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType64)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType64.subclass:
            return PriceInformationType64.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType64(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType64', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType64')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType64', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType64'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType64', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType64


class ProductOrItemDescriptionType65(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType65)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType65.subclass:
            return ProductOrItemDescriptionType65.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType65(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType65', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType65')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType65', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType65'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType65', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType65


class CommodityType66(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType66)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType66.subclass:
            return CommodityType66.subclass(*args_, **kwargs_)
        else:
            return CommodityType66(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType66', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType66')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType66', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType66'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType66', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType66


class TaxType67(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType67)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType67.subclass:
            return TaxType67.subclass(*args_, **kwargs_)
        else:
            return TaxType67(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType67', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType67')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType67', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType67'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType67', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType67


class ChargesAllowancesType68(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType68)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType68.subclass:
            return ChargesAllowancesType68.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType68(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType68', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType68')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType68', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType68'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType68', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType69.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType68


class TaxType69(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType69)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType69.subclass:
            return TaxType69.subclass(*args_, **kwargs_)
        else:
            return TaxType69(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType69', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType69')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType69', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType69'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType69', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType69


class ItemLoadInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemLoad=None, Reference=None, Notes=None):
        self.original_tagname_ = None
        self.ItemLoad = ItemLoad
        self.Reference = Reference
        self.Notes = Notes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadInfoType.subclass:
            return ItemLoadInfoType.subclass(*args_, **kwargs_)
        else:
            return ItemLoadInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemLoad(self): return self.ItemLoad
    def set_ItemLoad(self, ItemLoad): self.ItemLoad = ItemLoad
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def hasContent_(self):
        if (
            self.ItemLoad is not None or
            self.Reference is not None or
            self.Notes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadInfoType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadInfoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemLoad is not None:
            self.ItemLoad.export(outfile, level, namespace_, name_='ItemLoad', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemLoad':
            obj_ = ItemLoadType.factory()
            obj_.build(child_)
            self.ItemLoad = obj_
            obj_.original_tagname_ = 'ItemLoad'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType70.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType72.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
# end class ItemLoadInfoType


class ItemLoadType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfLoads=None, UnitsShipped=None, PackingMedium=None, PackingMaterial=None, LoadSize=None, LoadSizeUOM=None):
        self.original_tagname_ = None
        self.NumberOfLoads = NumberOfLoads
        self.UnitsShipped = UnitsShipped
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LoadSize = LoadSize
        self.LoadSizeUOM = LoadSizeUOM
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadType.subclass:
            return ItemLoadType.subclass(*args_, **kwargs_)
        else:
            return ItemLoadType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfLoads(self): return self.NumberOfLoads
    def set_NumberOfLoads(self, NumberOfLoads): self.NumberOfLoads = NumberOfLoads
    def get_UnitsShipped(self): return self.UnitsShipped
    def set_UnitsShipped(self, UnitsShipped): self.UnitsShipped = UnitsShipped
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LoadSize(self): return self.LoadSize
    def set_LoadSize(self, LoadSize): self.LoadSize = LoadSize
    def get_LoadSizeUOM(self): return self.LoadSizeUOM
    def set_LoadSizeUOM(self, LoadSizeUOM): self.LoadSizeUOM = LoadSizeUOM
    def hasContent_(self):
        if (
            self.NumberOfLoads is not None or
            self.UnitsShipped is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LoadSize is not None or
            self.LoadSizeUOM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfLoads is not None:
            self.NumberOfLoads.export(outfile, level, namespace_, name_='NumberOfLoads', pretty_print=pretty_print)
        if self.UnitsShipped is not None:
            self.UnitsShipped.export(outfile, level, namespace_, name_='UnitsShipped', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.LoadSize is not None:
            self.LoadSize.export(outfile, level, namespace_, name_='LoadSize', pretty_print=pretty_print)
        if self.LoadSizeUOM is not None:
            self.LoadSizeUOM.export(outfile, level, namespace_, name_='LoadSizeUOM', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfLoads':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NumberOfLoads = obj_
            obj_.original_tagname_ = 'NumberOfLoads'
        elif nodeName_ == 'UnitsShipped':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitsShipped = obj_
            obj_.original_tagname_ = 'UnitsShipped'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'LoadSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSize = obj_
            obj_.original_tagname_ = 'LoadSize'
        elif nodeName_ == 'LoadSizeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSizeUOM = obj_
            obj_.original_tagname_ = 'LoadSizeUOM'
# end class ItemLoadType


class ReferenceType70(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType70)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType70.subclass:
            return ReferenceType70.subclass(*args_, **kwargs_)
        else:
            return ReferenceType70(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType70', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType70')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType70', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType70'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType70', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType71.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType70


class ReferenceIDsType71(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType71)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType71.subclass:
            return ReferenceIDsType71.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType71(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType71', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType71')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType71', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType71'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType71', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType71


class NotesType72(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType72)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType72.subclass:
            return NotesType72.subclass(*args_, **kwargs_)
        else:
            return NotesType72(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType72', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType72')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType72', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType72'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType72', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType72


class PackLevelType73(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Pack=None, PhysicalDetails=None, MarksAndNumbersCollection=None, PalletInformation=None, Date=None, Reference=None, Notes=None, Address=None, Tax=None, ChargesAllowances=None, CarrierInformation=None, Packaging=None, ItemLevel=None):
        self.original_tagname_ = None
        self.Pack = Pack
        self.PhysicalDetails = PhysicalDetails
        self.MarksAndNumbersCollection = MarksAndNumbersCollection
        self.PalletInformation = PalletInformation
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Address = Address
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.CarrierInformation = CarrierInformation
        self.Packaging = Packaging
        self.ItemLevel = ItemLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackLevelType73)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackLevelType73.subclass:
            return PackLevelType73.subclass(*args_, **kwargs_)
        else:
            return PackLevelType73(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Pack(self): return self.Pack
    def set_Pack(self, Pack): self.Pack = Pack
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def get_MarksAndNumbersCollection(self): return self.MarksAndNumbersCollection
    def set_MarksAndNumbersCollection(self, MarksAndNumbersCollection): self.MarksAndNumbersCollection = MarksAndNumbersCollection
    def get_PalletInformation(self): return self.PalletInformation
    def set_PalletInformation(self, PalletInformation): self.PalletInformation = PalletInformation
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def get_ItemLevel(self): return self.ItemLevel
    def set_ItemLevel(self, ItemLevel): self.ItemLevel = ItemLevel
    def hasContent_(self):
        if (
            self.Pack is not None or
            self.PhysicalDetails is not None or
            self.MarksAndNumbersCollection is not None or
            self.PalletInformation is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Address is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.CarrierInformation is not None or
            self.Packaging is not None or
            self.ItemLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackLevelType73', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackLevelType73')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackLevelType73', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackLevelType73'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackLevelType73', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Pack is not None:
            self.Pack.export(outfile, level, namespace_, name_='Pack', pretty_print=pretty_print)
        if self.PhysicalDetails is not None:
            self.PhysicalDetails.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        if self.MarksAndNumbersCollection is not None:
            self.MarksAndNumbersCollection.export(outfile, level, namespace_, name_='MarksAndNumbersCollection', pretty_print=pretty_print)
        if self.PalletInformation is not None:
            self.PalletInformation.export(outfile, level, namespace_, name_='PalletInformation', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Packaging is not None:
            self.Packaging.export(outfile, level, namespace_, name_='Packaging', pretty_print=pretty_print)
        if self.ItemLevel is not None:
            self.ItemLevel.export(outfile, level, namespace_, name_='ItemLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Pack':
            obj_ = PackType74.factory()
            obj_.build(child_)
            self.Pack = obj_
            obj_.original_tagname_ = 'Pack'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType75.factory()
            obj_.build(child_)
            self.PhysicalDetails = obj_
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'MarksAndNumbersCollection':
            obj_ = MarksAndNumbersCollectionType76.factory()
            obj_.build(child_)
            self.MarksAndNumbersCollection = obj_
            obj_.original_tagname_ = 'MarksAndNumbersCollection'
        elif nodeName_ == 'PalletInformation':
            obj_ = PalletInformationType77.factory()
            obj_.build(child_)
            self.PalletInformation = obj_
            obj_.original_tagname_ = 'PalletInformation'
        elif nodeName_ == 'Date':
            obj_ = DateType78.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType79.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType81.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Address':
            obj_ = AddressType82.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Tax':
            obj_ = TaxType88.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType89.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType91.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Packaging':
            obj_ = PackagingType95.factory()
            obj_.build(child_)
            self.Packaging = obj_
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'ItemLevel':
            obj_ = ItemLevelType96.factory()
            obj_.build(child_)
            self.ItemLevel = obj_
            obj_.original_tagname_ = 'ItemLevel'
# end class PackLevelType73


class PackType74(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackLevelType=None, ShippingSerialID=None, CarrierPackageID=None):
        self.original_tagname_ = None
        self.PackLevelType = PackLevelType
        self.ShippingSerialID = ShippingSerialID
        self.CarrierPackageID = CarrierPackageID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackType74)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackType74.subclass:
            return PackType74.subclass(*args_, **kwargs_)
        else:
            return PackType74(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackLevelType(self): return self.PackLevelType
    def set_PackLevelType(self, PackLevelType): self.PackLevelType = PackLevelType
    def get_ShippingSerialID(self): return self.ShippingSerialID
    def set_ShippingSerialID(self, ShippingSerialID): self.ShippingSerialID = ShippingSerialID
    def get_CarrierPackageID(self): return self.CarrierPackageID
    def set_CarrierPackageID(self, CarrierPackageID): self.CarrierPackageID = CarrierPackageID
    def hasContent_(self):
        if (
            self.PackLevelType is not None or
            self.ShippingSerialID is not None or
            self.CarrierPackageID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackType74', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackType74')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackType74', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackType74'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackType74', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackLevelType is not None:
            self.PackLevelType.export(outfile, level, namespace_, name_='PackLevelType', pretty_print=pretty_print)
        if self.ShippingSerialID is not None:
            self.ShippingSerialID.export(outfile, level, namespace_, name_='ShippingSerialID', pretty_print=pretty_print)
        if self.CarrierPackageID is not None:
            self.CarrierPackageID.export(outfile, level, namespace_, name_='CarrierPackageID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackLevelType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLevelType = obj_
            obj_.original_tagname_ = 'PackLevelType'
        elif nodeName_ == 'ShippingSerialID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShippingSerialID = obj_
            obj_.original_tagname_ = 'ShippingSerialID'
        elif nodeName_ == 'CarrierPackageID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierPackageID = obj_
            obj_.original_tagname_ = 'CarrierPackageID'
# end class PackType74


class PhysicalDetailsType75(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType75)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType75.subclass:
            return PhysicalDetailsType75.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType75(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType75', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType75')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType75', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType75'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType75', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            self.PackQualifier.export(outfile, level, namespace_, name_='PackQualifier', pretty_print=pretty_print)
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            self.PackUOM.export(outfile, level, namespace_, name_='PackUOM', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            self.PackWeightUOM.export(outfile, level, namespace_, name_='PackWeightUOM', pretty_print=pretty_print)
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            self.PackVolumeUOM.export(outfile, level, namespace_, name_='PackVolumeUOM', pretty_print=pretty_print)
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            self.PackDimensionUOM.export(outfile, level, namespace_, name_='PackDimensionUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackQualifier = obj_
            obj_.original_tagname_ = 'PackQualifier'
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackUOM = obj_
            obj_.original_tagname_ = 'PackUOM'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeightUOM = obj_
            obj_.original_tagname_ = 'PackWeightUOM'
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolumeUOM = obj_
            obj_.original_tagname_ = 'PackVolumeUOM'
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackDimensionUOM = obj_
            obj_.original_tagname_ = 'PackDimensionUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType75


class MarksAndNumbersCollectionType76(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarksAndNumbersQualifier1=None, MarksAndNumbers1=None):
        self.original_tagname_ = None
        self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
        self.MarksAndNumbers1 = MarksAndNumbers1
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarksAndNumbersCollectionType76)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarksAndNumbersCollectionType76.subclass:
            return MarksAndNumbersCollectionType76.subclass(*args_, **kwargs_)
        else:
            return MarksAndNumbersCollectionType76(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarksAndNumbersQualifier1(self): return self.MarksAndNumbersQualifier1
    def set_MarksAndNumbersQualifier1(self, MarksAndNumbersQualifier1): self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
    def get_MarksAndNumbers1(self): return self.MarksAndNumbers1
    def set_MarksAndNumbers1(self, MarksAndNumbers1): self.MarksAndNumbers1 = MarksAndNumbers1
    def hasContent_(self):
        if (
            self.MarksAndNumbersQualifier1 is not None or
            self.MarksAndNumbers1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType76', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarksAndNumbersCollectionType76')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MarksAndNumbersCollectionType76', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MarksAndNumbersCollectionType76'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType76', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarksAndNumbersQualifier1 is not None:
            self.MarksAndNumbersQualifier1.export(outfile, level, namespace_, name_='MarksAndNumbersQualifier1', pretty_print=pretty_print)
        if self.MarksAndNumbers1 is not None:
            self.MarksAndNumbers1.export(outfile, level, namespace_, name_='MarksAndNumbers1', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarksAndNumbersQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbersQualifier1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbersQualifier1'
        elif nodeName_ == 'MarksAndNumbers1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbers1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbers1'
# end class MarksAndNumbersCollectionType76


class PalletInformationType77(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PalletQualifier=None, PalletValue=None, PalletTypeCode=None, PalletTiers=None, PalletBlocks=None, UnitWeight=None, UnitWeightUOM=None, Length=None, Width=None, Height=None, UnitOfMeasure=None, WeightQualifier=None, PalletWeight=None, PalletWeightUOM=None, PalletVolume=None, PalletVolumeUOM=None, PalletExchangeCode=None, PalletStructureCode=None):
        self.original_tagname_ = None
        self.PalletQualifier = PalletQualifier
        self.PalletValue = PalletValue
        self.PalletTypeCode = PalletTypeCode
        self.PalletTiers = PalletTiers
        self.PalletBlocks = PalletBlocks
        self.UnitWeight = UnitWeight
        self.UnitWeightUOM = UnitWeightUOM
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.UnitOfMeasure = UnitOfMeasure
        self.WeightQualifier = WeightQualifier
        self.PalletWeight = PalletWeight
        self.PalletWeightUOM = PalletWeightUOM
        self.PalletVolume = PalletVolume
        self.PalletVolumeUOM = PalletVolumeUOM
        self.PalletExchangeCode = PalletExchangeCode
        self.PalletStructureCode = PalletStructureCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletInformationType77)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletInformationType77.subclass:
            return PalletInformationType77.subclass(*args_, **kwargs_)
        else:
            return PalletInformationType77(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletQualifier(self): return self.PalletQualifier
    def set_PalletQualifier(self, PalletQualifier): self.PalletQualifier = PalletQualifier
    def get_PalletValue(self): return self.PalletValue
    def set_PalletValue(self, PalletValue): self.PalletValue = PalletValue
    def get_PalletTypeCode(self): return self.PalletTypeCode
    def set_PalletTypeCode(self, PalletTypeCode): self.PalletTypeCode = PalletTypeCode
    def get_PalletTiers(self): return self.PalletTiers
    def set_PalletTiers(self, PalletTiers): self.PalletTiers = PalletTiers
    def get_PalletBlocks(self): return self.PalletBlocks
    def set_PalletBlocks(self, PalletBlocks): self.PalletBlocks = PalletBlocks
    def get_UnitWeight(self): return self.UnitWeight
    def set_UnitWeight(self, UnitWeight): self.UnitWeight = UnitWeight
    def get_UnitWeightUOM(self): return self.UnitWeightUOM
    def set_UnitWeightUOM(self, UnitWeightUOM): self.UnitWeightUOM = UnitWeightUOM
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PalletWeight(self): return self.PalletWeight
    def set_PalletWeight(self, PalletWeight): self.PalletWeight = PalletWeight
    def get_PalletWeightUOM(self): return self.PalletWeightUOM
    def set_PalletWeightUOM(self, PalletWeightUOM): self.PalletWeightUOM = PalletWeightUOM
    def get_PalletVolume(self): return self.PalletVolume
    def set_PalletVolume(self, PalletVolume): self.PalletVolume = PalletVolume
    def get_PalletVolumeUOM(self): return self.PalletVolumeUOM
    def set_PalletVolumeUOM(self, PalletVolumeUOM): self.PalletVolumeUOM = PalletVolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def get_PalletStructureCode(self): return self.PalletStructureCode
    def set_PalletStructureCode(self, PalletStructureCode): self.PalletStructureCode = PalletStructureCode
    def hasContent_(self):
        if (
            self.PalletQualifier is not None or
            self.PalletValue is not None or
            self.PalletTypeCode is not None or
            self.PalletTiers is not None or
            self.PalletBlocks is not None or
            self.UnitWeight is not None or
            self.UnitWeightUOM is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.UnitOfMeasure is not None or
            self.WeightQualifier is not None or
            self.PalletWeight is not None or
            self.PalletWeightUOM is not None or
            self.PalletVolume is not None or
            self.PalletVolumeUOM is not None or
            self.PalletExchangeCode is not None or
            self.PalletStructureCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PalletInformationType77', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletInformationType77')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PalletInformationType77', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PalletInformationType77'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PalletInformationType77', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletQualifier is not None:
            self.PalletQualifier.export(outfile, level, namespace_, name_='PalletQualifier', pretty_print=pretty_print)
        if self.PalletValue is not None:
            self.PalletValue.export(outfile, level, namespace_, name_='PalletValue', pretty_print=pretty_print)
        if self.PalletTypeCode is not None:
            self.PalletTypeCode.export(outfile, level, namespace_, name_='PalletTypeCode', pretty_print=pretty_print)
        if self.PalletTiers is not None:
            self.PalletTiers.export(outfile, level, namespace_, name_='PalletTiers', pretty_print=pretty_print)
        if self.PalletBlocks is not None:
            self.PalletBlocks.export(outfile, level, namespace_, name_='PalletBlocks', pretty_print=pretty_print)
        if self.UnitWeight is not None:
            self.UnitWeight.export(outfile, level, namespace_, name_='UnitWeight', pretty_print=pretty_print)
        if self.UnitWeightUOM is not None:
            self.UnitWeightUOM.export(outfile, level, namespace_, name_='UnitWeightUOM', pretty_print=pretty_print)
        if self.Length is not None:
            self.Length.export(outfile, level, namespace_, name_='Length', pretty_print=pretty_print)
        if self.Width is not None:
            self.Width.export(outfile, level, namespace_, name_='Width', pretty_print=pretty_print)
        if self.Height is not None:
            self.Height.export(outfile, level, namespace_, name_='Height', pretty_print=pretty_print)
        if self.UnitOfMeasure is not None:
            self.UnitOfMeasure.export(outfile, level, namespace_, name_='UnitOfMeasure', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PalletWeight is not None:
            self.PalletWeight.export(outfile, level, namespace_, name_='PalletWeight', pretty_print=pretty_print)
        if self.PalletWeightUOM is not None:
            self.PalletWeightUOM.export(outfile, level, namespace_, name_='PalletWeightUOM', pretty_print=pretty_print)
        if self.PalletVolume is not None:
            self.PalletVolume.export(outfile, level, namespace_, name_='PalletVolume', pretty_print=pretty_print)
        if self.PalletVolumeUOM is not None:
            self.PalletVolumeUOM.export(outfile, level, namespace_, name_='PalletVolumeUOM', pretty_print=pretty_print)
        if self.PalletExchangeCode is not None:
            self.PalletExchangeCode.export(outfile, level, namespace_, name_='PalletExchangeCode', pretty_print=pretty_print)
        if self.PalletStructureCode is not None:
            self.PalletStructureCode.export(outfile, level, namespace_, name_='PalletStructureCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletQualifier = obj_
            obj_.original_tagname_ = 'PalletQualifier'
        elif nodeName_ == 'PalletValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletValue = obj_
            obj_.original_tagname_ = 'PalletValue'
        elif nodeName_ == 'PalletTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTypeCode = obj_
            obj_.original_tagname_ = 'PalletTypeCode'
        elif nodeName_ == 'PalletTiers':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTiers = obj_
            obj_.original_tagname_ = 'PalletTiers'
        elif nodeName_ == 'PalletBlocks':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletBlocks = obj_
            obj_.original_tagname_ = 'PalletBlocks'
        elif nodeName_ == 'UnitWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeight = obj_
            obj_.original_tagname_ = 'UnitWeight'
        elif nodeName_ == 'UnitWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeightUOM = obj_
            obj_.original_tagname_ = 'UnitWeightUOM'
        elif nodeName_ == 'Length':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Length = obj_
            obj_.original_tagname_ = 'Length'
        elif nodeName_ == 'Width':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Width = obj_
            obj_.original_tagname_ = 'Width'
        elif nodeName_ == 'Height':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Height = obj_
            obj_.original_tagname_ = 'Height'
        elif nodeName_ == 'UnitOfMeasure':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitOfMeasure = obj_
            obj_.original_tagname_ = 'UnitOfMeasure'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PalletWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'PalletWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeightUOM = obj_
            obj_.original_tagname_ = 'PalletWeightUOM'
        elif nodeName_ == 'PalletVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolume = obj_
            obj_.original_tagname_ = 'PalletVolume'
        elif nodeName_ == 'PalletVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolumeUOM = obj_
            obj_.original_tagname_ = 'PalletVolumeUOM'
        elif nodeName_ == 'PalletExchangeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletExchangeCode = obj_
            obj_.original_tagname_ = 'PalletExchangeCode'
        elif nodeName_ == 'PalletStructureCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletStructureCode = obj_
            obj_.original_tagname_ = 'PalletStructureCode'
# end class PalletInformationType77


class DateType78(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType78)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType78.subclass:
            return DateType78.subclass(*args_, **kwargs_)
        else:
            return DateType78(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType78', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType78')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType78', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType78'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType78', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType78


class ReferenceType79(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType79)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType79.subclass:
            return ReferenceType79.subclass(*args_, **kwargs_)
        else:
            return ReferenceType79(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType79', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType79')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType79', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType79'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType79', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType80.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType79


class ReferenceIDsType80(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType80)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType80.subclass:
            return ReferenceIDsType80.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType80(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType80', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType80')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType80', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType80'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType80', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType80


class NotesType81(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType81)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType81.subclass:
            return NotesType81.subclass(*args_, **kwargs_)
        else:
            return NotesType81(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType81', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType81')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType81', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType81'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType81', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType81


class AddressType82(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType82)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType82.subclass:
            return AddressType82.subclass(*args_, **kwargs_)
        else:
            return AddressType82(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType82', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType82')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType82', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType82'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType82', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType83.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType85.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType87.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType82


class ReferenceType83(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType83)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType83.subclass:
            return ReferenceType83.subclass(*args_, **kwargs_)
        else:
            return ReferenceType83(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType83', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType83')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType83', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType83'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType83', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType84.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType83


class ReferenceIDsType84(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType84)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType84.subclass:
            return ReferenceIDsType84.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType84(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType84', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType84')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType84', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType84'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType84', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType84


class ContactType85(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType85)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType85.subclass:
            return ContactType85.subclass(*args_, **kwargs_)
        else:
            return ContactType85(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType85', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType85')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType85', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType85'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType85', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType86.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType85


class AdditionalContactDetailsType86(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType86)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType86.subclass:
            return AdditionalContactDetailsType86.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType86(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType86', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType86')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType86', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType86'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType86', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType86


class DateType87(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType87)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType87.subclass:
            return DateType87.subclass(*args_, **kwargs_)
        else:
            return DateType87(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType87', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType87')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType87', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType87'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType87', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType87


class TaxType88(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType88)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType88.subclass:
            return TaxType88.subclass(*args_, **kwargs_)
        else:
            return TaxType88(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType88', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType88')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType88', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType88'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType88', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType88


class ChargesAllowancesType89(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType89)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType89.subclass:
            return ChargesAllowancesType89.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType89(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType89', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType89')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType89', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType89'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType89', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType90.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType89


class TaxType90(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType90)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType90.subclass:
            return TaxType90.subclass(*args_, **kwargs_)
        else:
            return TaxType90(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType90', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType90')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType90', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType90'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType90', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType90


class CarrierInformationType91(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType91)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType91.subclass:
            return CarrierInformationType91.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType91(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType91', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType91')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType91', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType91'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType91', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType92.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType93.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType91


class ServiceLevelCodesType92(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType92)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType92.subclass:
            return ServiceLevelCodesType92.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType92(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType92', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType92')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType92', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType92'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType92', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType92


class AddressType93(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType93)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType93.subclass:
            return AddressType93.subclass(*args_, **kwargs_)
        else:
            return AddressType93(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType93', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType93')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType93', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType93'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType93', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType94.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType93


class DateType94(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType94)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType94.subclass:
            return DateType94.subclass(*args_, **kwargs_)
        else:
            return DateType94(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType94', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType94')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType94', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType94'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType94', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType94


class PackagingType95(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, PackagingCharacteristicCode=None, AgencyQualifierCode=None, PackagingDescriptionCode=None, PackagingDescription=None, UnitLoadOptionCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.PackagingCharacteristicCode = PackagingCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.PackagingDescriptionCode = PackagingDescriptionCode
        self.PackagingDescription = PackagingDescription
        self.UnitLoadOptionCode = UnitLoadOptionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingType95)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingType95.subclass:
            return PackagingType95.subclass(*args_, **kwargs_)
        else:
            return PackagingType95(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_PackagingCharacteristicCode(self): return self.PackagingCharacteristicCode
    def set_PackagingCharacteristicCode(self, PackagingCharacteristicCode): self.PackagingCharacteristicCode = PackagingCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_PackagingDescriptionCode(self): return self.PackagingDescriptionCode
    def set_PackagingDescriptionCode(self, PackagingDescriptionCode): self.PackagingDescriptionCode = PackagingDescriptionCode
    def get_PackagingDescription(self): return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription): self.PackagingDescription = PackagingDescription
    def get_UnitLoadOptionCode(self): return self.UnitLoadOptionCode
    def set_UnitLoadOptionCode(self, UnitLoadOptionCode): self.UnitLoadOptionCode = UnitLoadOptionCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.PackagingCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.PackagingDescriptionCode is not None or
            self.PackagingDescription is not None or
            self.UnitLoadOptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackagingType95', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackagingType95')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackagingType95', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackagingType95'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackagingType95', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.PackagingCharacteristicCode is not None:
            self.PackagingCharacteristicCode.export(outfile, level, namespace_, name_='PackagingCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.PackagingDescriptionCode is not None:
            self.PackagingDescriptionCode.export(outfile, level, namespace_, name_='PackagingDescriptionCode', pretty_print=pretty_print)
        if self.PackagingDescription is not None:
            self.PackagingDescription.export(outfile, level, namespace_, name_='PackagingDescription', pretty_print=pretty_print)
        if self.UnitLoadOptionCode is not None:
            self.UnitLoadOptionCode.export(outfile, level, namespace_, name_='UnitLoadOptionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'PackagingCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingCharacteristicCode = obj_
            obj_.original_tagname_ = 'PackagingCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'PackagingDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescriptionCode = obj_
            obj_.original_tagname_ = 'PackagingDescriptionCode'
        elif nodeName_ == 'PackagingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'UnitLoadOptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitLoadOptionCode = obj_
            obj_.original_tagname_ = 'UnitLoadOptionCode'
# end class PackagingType95


class ItemLevelType96(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentLine=None, PhysicalDetails=None, CarrierSpecialHandlingDetail=None, CarrierInformation=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, Date=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, Tax=None, ChargesAllowances=None, ItemLoadInfo=None):
        self.original_tagname_ = None
        self.ShipmentLine = ShipmentLine
        self.PhysicalDetails = PhysicalDetails
        self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        self.CarrierInformation = CarrierInformation
        self.Measurements = Measurements
        self.PriceInformation = PriceInformation
        self.ProductOrItemDescription = ProductOrItemDescription
        self.MasterItemAttribute = MasterItemAttribute
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Commodity = Commodity
        self.Address = Address
        self.Sublines = Sublines
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.ItemLoadInfo = ItemLoadInfo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLevelType96)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLevelType96.subclass:
            return ItemLevelType96.subclass(*args_, **kwargs_)
        else:
            return ItemLevelType96(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentLine(self): return self.ShipmentLine
    def set_ShipmentLine(self, ShipmentLine): self.ShipmentLine = ShipmentLine
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_ItemLoadInfo(self): return self.ItemLoadInfo
    def set_ItemLoadInfo(self, ItemLoadInfo): self.ItemLoadInfo = ItemLoadInfo
    def hasContent_(self):
        if (
            self.ShipmentLine is not None or
            self.PhysicalDetails is not None or
            self.CarrierSpecialHandlingDetail is not None or
            self.CarrierInformation is not None or
            self.Measurements is not None or
            self.PriceInformation is not None or
            self.ProductOrItemDescription is not None or
            self.MasterItemAttribute is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Commodity is not None or
            self.Address is not None or
            self.Sublines is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.ItemLoadInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLevelType96', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLevelType96')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLevelType96', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLevelType96'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLevelType96', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentLine is not None:
            self.ShipmentLine.export(outfile, level, namespace_, name_='ShipmentLine', pretty_print=pretty_print)
        if self.PhysicalDetails is not None:
            self.PhysicalDetails.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        if self.CarrierSpecialHandlingDetail is not None:
            self.CarrierSpecialHandlingDetail.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        if self.PriceInformation is not None:
            self.PriceInformation.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.MasterItemAttribute is not None:
            self.MasterItemAttribute.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.ItemLoadInfo is not None:
            self.ItemLoadInfo.export(outfile, level, namespace_, name_='ItemLoadInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentLine':
            obj_ = ShipmentLineType97.factory()
            obj_.build(child_)
            self.ShipmentLine = obj_
            obj_.original_tagname_ = 'ShipmentLine'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType100.factory()
            obj_.build(child_)
            self.PhysicalDetails = obj_
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType101.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail = obj_
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType102.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType106.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType107.factory()
            obj_.build(child_)
            self.PriceInformation = obj_
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType108.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType109.factory()
            obj_.build(child_)
            self.MasterItemAttribute = obj_
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'Date':
            obj_ = DateType112.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType113.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType115.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType116.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType117.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType123.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'Tax':
            obj_ = TaxType131.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType132.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'ItemLoadInfo':
            obj_ = ItemLoadInfoType134.factory()
            obj_.build(child_)
            self.ItemLoadInfo = obj_
            obj_.original_tagname_ = 'ItemLoadInfo'
# end class ItemLevelType96


class ShipmentLineType97(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ItemStatusCode=None, ShipQty=None, ShipQtyUOM=None, ShipDate=None, QtyLeftToReceive=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.ItemStatusCode = ItemStatusCode
        self.ShipQty = ShipQty
        self.ShipQtyUOM = ShipQtyUOM
        self.ShipDate = ShipDate
        self.QtyLeftToReceive = QtyLeftToReceive
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLineType97)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLineType97.subclass:
            return ShipmentLineType97.subclass(*args_, **kwargs_)
        else:
            return ShipmentLineType97(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ShipQty(self): return self.ShipQty
    def set_ShipQty(self, ShipQty): self.ShipQty = ShipQty
    def get_ShipQtyUOM(self): return self.ShipQtyUOM
    def set_ShipQtyUOM(self, ShipQtyUOM): self.ShipQtyUOM = ShipQtyUOM
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_QtyLeftToReceive(self): return self.QtyLeftToReceive
    def set_QtyLeftToReceive(self, QtyLeftToReceive): self.QtyLeftToReceive = QtyLeftToReceive
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ItemStatusCode is not None or
            self.ShipQty is not None or
            self.ShipQtyUOM is not None or
            self.ShipDate is not None or
            self.QtyLeftToReceive is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentLineType97', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentLineType97')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentLineType97', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentLineType97'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentLineType97', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            self.OrderQty.export(outfile, level, namespace_, name_='OrderQty', pretty_print=pretty_print)
        if self.OrderQtyUOM is not None:
            self.OrderQtyUOM.export(outfile, level, namespace_, name_='OrderQtyUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.ItemStatusCode is not None:
            self.ItemStatusCode.export(outfile, level, namespace_, name_='ItemStatusCode', pretty_print=pretty_print)
        if self.ShipQty is not None:
            self.ShipQty.export(outfile, level, namespace_, name_='ShipQty', pretty_print=pretty_print)
        if self.ShipQtyUOM is not None:
            self.ShipQtyUOM.export(outfile, level, namespace_, name_='ShipQtyUOM', pretty_print=pretty_print)
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.QtyLeftToReceive is not None:
            self.QtyLeftToReceive.export(outfile, level, namespace_, name_='QtyLeftToReceive', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Class is not None:
            self.Class.export(outfile, level, namespace_, name_='Class', pretty_print=pretty_print)
        if self.SellerDateCode is not None:
            self.SellerDateCode.export(outfile, level, namespace_, name_='SellerDateCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType98.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQty = obj_
            obj_.original_tagname_ = 'OrderQty'
        elif nodeName_ == 'OrderQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQtyUOM = obj_
            obj_.original_tagname_ = 'OrderQtyUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'ItemStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemStatusCode = obj_
            obj_.original_tagname_ = 'ItemStatusCode'
        elif nodeName_ == 'ShipQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQty = obj_
            obj_.original_tagname_ = 'ShipQty'
        elif nodeName_ == 'ShipQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQtyUOM = obj_
            obj_.original_tagname_ = 'ShipQtyUOM'
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'QtyLeftToReceive':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyLeftToReceive = obj_
            obj_.original_tagname_ = 'QtyLeftToReceive'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Class':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Class = obj_
            obj_.original_tagname_ = 'Class'
        elif nodeName_ == 'SellerDateCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellerDateCode = obj_
            obj_.original_tagname_ = 'SellerDateCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType99.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class ShipmentLineType97


class ProductIDType98(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType98)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType98.subclass:
            return ProductIDType98.subclass(*args_, **kwargs_)
        else:
            return ProductIDType98(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType98', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType98')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType98', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType98'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType98', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType98


class NRFStandardColorAndSizeType99(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType99)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType99.subclass:
            return NRFStandardColorAndSizeType99.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType99(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType99', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType99')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType99', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType99'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType99', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType99


class PhysicalDetailsType100(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType100)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType100.subclass:
            return PhysicalDetailsType100.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType100(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType100', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType100')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType100', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType100'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType100', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            self.PackQualifier.export(outfile, level, namespace_, name_='PackQualifier', pretty_print=pretty_print)
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            self.PackUOM.export(outfile, level, namespace_, name_='PackUOM', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            self.PackWeightUOM.export(outfile, level, namespace_, name_='PackWeightUOM', pretty_print=pretty_print)
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            self.PackVolumeUOM.export(outfile, level, namespace_, name_='PackVolumeUOM', pretty_print=pretty_print)
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            self.PackDimensionUOM.export(outfile, level, namespace_, name_='PackDimensionUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackQualifier = obj_
            obj_.original_tagname_ = 'PackQualifier'
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackUOM = obj_
            obj_.original_tagname_ = 'PackUOM'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeightUOM = obj_
            obj_.original_tagname_ = 'PackWeightUOM'
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolumeUOM = obj_
            obj_.original_tagname_ = 'PackVolumeUOM'
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackDimensionUOM = obj_
            obj_.original_tagname_ = 'PackDimensionUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType100


class CarrierSpecialHandlingDetailType101(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.HazardousMaterialCode = HazardousMaterialCode
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType101)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType101.subclass:
            return CarrierSpecialHandlingDetailType101.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType101(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType101', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType101')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType101', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType101'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType101', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            self.SpecialHandlingCode.export(outfile, level, namespace_, name_='SpecialHandlingCode', pretty_print=pretty_print)
        if self.HazardousMaterialCode is not None:
            self.HazardousMaterialCode.export(outfile, level, namespace_, name_='HazardousMaterialCode', pretty_print=pretty_print)
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SpecialHandlingCode = obj_
            obj_.original_tagname_ = 'SpecialHandlingCode'
        elif nodeName_ == 'HazardousMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialCode = obj_
            obj_.original_tagname_ = 'HazardousMaterialCode'
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
# end class CarrierSpecialHandlingDetailType101


class CarrierInformationType102(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType102)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType102.subclass:
            return CarrierInformationType102.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType102(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType102', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType102')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType102', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType102'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType102', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType103.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType104.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType102


class ServiceLevelCodesType103(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType103)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType103.subclass:
            return ServiceLevelCodesType103.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType103(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType103', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType103')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType103', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType103'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType103', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType103


class AddressType104(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType104)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType104.subclass:
            return AddressType104.subclass(*args_, **kwargs_)
        else:
            return AddressType104(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType104', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType104')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType104', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType104'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType104', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType105.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType104


class DateType105(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType105)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType105.subclass:
            return DateType105.subclass(*args_, **kwargs_)
        else:
            return DateType105(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType105', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType105')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType105', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType105'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType105', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType105


class MeasurementsType106(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType106)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType106.subclass:
            return MeasurementsType106.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType106(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType106', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType106')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType106', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType106'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType106', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType106


class PriceInformationType107(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType107)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType107.subclass:
            return PriceInformationType107.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType107(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType107', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType107')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType107', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType107'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType107', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType107


class ProductOrItemDescriptionType108(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType108)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType108.subclass:
            return ProductOrItemDescriptionType108.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType108(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType108', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType108')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType108', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType108'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType108', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType108


class MasterItemAttributeType109(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType109)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType109.subclass:
            return MasterItemAttributeType109.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType109(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def hasContent_(self):
        if (
            self.ItemAttribute is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType109', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType109')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType109', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType109'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType109', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttribute is not None:
            self.ItemAttribute.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType110.factory()
            obj_.build(child_)
            self.ItemAttribute = obj_
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType109


class ItemAttributeType110(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType110)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType110.subclass:
            return ItemAttributeType110.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType110(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType110', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType110')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType110', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType110'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType110', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            self.ItemAttributeQualifier.export(outfile, level, namespace_, name_='ItemAttributeQualifier', pretty_print=pretty_print)
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            self.ValueUOM.export(outfile, level, namespace_, name_='ValueUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemAttributeQualifier = obj_
            obj_.original_tagname_ = 'ItemAttributeQualifier'
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ValueUOM = obj_
            obj_.original_tagname_ = 'ValueUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType111.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType110


class MeasurementsType111(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType111)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType111.subclass:
            return MeasurementsType111.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType111(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType111', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType111')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType111', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType111'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType111', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType111


class DateType112(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType112)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType112.subclass:
            return DateType112.subclass(*args_, **kwargs_)
        else:
            return DateType112(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType112', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType112')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType112', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType112'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType112', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType112


class ReferenceType113(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType113)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType113.subclass:
            return ReferenceType113.subclass(*args_, **kwargs_)
        else:
            return ReferenceType113(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType113', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType113')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType113', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType113'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType113', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType114.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType113


class ReferenceIDsType114(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType114)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType114.subclass:
            return ReferenceIDsType114.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType114(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType114', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType114')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType114', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType114'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType114', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType114


class NotesType115(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType115)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType115.subclass:
            return NotesType115.subclass(*args_, **kwargs_)
        else:
            return NotesType115(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType115', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType115')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType115', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType115'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType115', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType115


class CommodityType116(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType116)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType116.subclass:
            return CommodityType116.subclass(*args_, **kwargs_)
        else:
            return CommodityType116(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType116', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType116')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType116', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType116'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType116', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType116


class AddressType117(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType117)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType117.subclass:
            return AddressType117.subclass(*args_, **kwargs_)
        else:
            return AddressType117(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType117', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType117')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType117', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType117'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType117', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType118.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType120.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType122.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType117


class ReferenceType118(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType118)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType118.subclass:
            return ReferenceType118.subclass(*args_, **kwargs_)
        else:
            return ReferenceType118(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType118', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType118')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType118', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType118'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType118', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType119.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType118


class ReferenceIDsType119(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType119)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType119.subclass:
            return ReferenceIDsType119.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType119(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType119', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType119')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType119', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType119'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType119', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType119


class ContactType120(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType120)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType120.subclass:
            return ContactType120.subclass(*args_, **kwargs_)
        else:
            return ContactType120(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType120', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType120')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType120', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType120'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType120', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType121.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType120


class AdditionalContactDetailsType121(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType121)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType121.subclass:
            return AdditionalContactDetailsType121.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType121(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType121', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType121')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType121', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType121'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType121', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType121


class DateType122(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType122)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType122.subclass:
            return DateType122.subclass(*args_, **kwargs_)
        else:
            return DateType122(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType122', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType122')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType122', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType122'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType122', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType122


class SublinesType123(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType123)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType123.subclass:
            return SublinesType123.subclass(*args_, **kwargs_)
        else:
            return SublinesType123(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def hasContent_(self):
        if (
            self.Subline is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType123', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType123')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType123', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType123'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType123', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Subline is not None:
            self.Subline.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType124.factory()
            obj_.build(child_)
            self.Subline = obj_
            obj_.original_tagname_ = 'Subline'
# end class SublinesType123


class SublineType124(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceInformation=None, ProductOrItemDescription=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        self.PriceInformation = PriceInformation
        self.ProductOrItemDescription = ProductOrItemDescription
        self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType124)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType124.subclass:
            return SublineType124.subclass(*args_, **kwargs_)
        else:
            return SublineType124(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceInformation is not None or
            self.ProductOrItemDescription is not None or
            self.Commodity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType124', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType124')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType124', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType124'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType124', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        if self.PriceInformation is not None:
            self.PriceInformation.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType125.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType128.factory()
            obj_.build(child_)
            self.PriceInformation = obj_
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType129.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType130.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
# end class SublineType124


class SublineItemDetailType125(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType125)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType125.subclass:
            return SublineItemDetailType125.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType125(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType125', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType125')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType125', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType125'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType125', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            self.QtyPerUOM.export(outfile, level, namespace_, name_='QtyPerUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType126.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPerUOM = obj_
            obj_.original_tagname_ = 'QtyPerUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType127.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType125


class ProductIDType126(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType126)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType126.subclass:
            return ProductIDType126.subclass(*args_, **kwargs_)
        else:
            return ProductIDType126(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType126', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType126')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType126', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType126'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType126', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType126


class NRFStandardColorAndSizeType127(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType127)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType127.subclass:
            return NRFStandardColorAndSizeType127.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType127(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType127', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType127')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType127', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType127'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType127', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType127


class PriceInformationType128(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType128)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType128.subclass:
            return PriceInformationType128.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType128(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType128', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType128')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType128', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType128'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType128', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType128


class ProductOrItemDescriptionType129(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType129)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType129.subclass:
            return ProductOrItemDescriptionType129.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType129(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType129', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType129')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType129', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType129'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType129', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType129


class CommodityType130(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType130)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType130.subclass:
            return CommodityType130.subclass(*args_, **kwargs_)
        else:
            return CommodityType130(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType130', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType130')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType130', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType130'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType130', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType130


class TaxType131(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType131)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType131.subclass:
            return TaxType131.subclass(*args_, **kwargs_)
        else:
            return TaxType131(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType131', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType131')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType131', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType131'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType131', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType131


class ChargesAllowancesType132(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType132)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType132.subclass:
            return ChargesAllowancesType132.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType132(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType132', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType132')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType132', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType132'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType132', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType133.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType132


class TaxType133(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType133)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType133.subclass:
            return TaxType133.subclass(*args_, **kwargs_)
        else:
            return TaxType133(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType133', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType133')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType133', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType133'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType133', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType133


class ItemLoadInfoType134(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemLoad=None, Reference=None, Notes=None):
        self.original_tagname_ = None
        self.ItemLoad = ItemLoad
        self.Reference = Reference
        self.Notes = Notes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadInfoType134)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadInfoType134.subclass:
            return ItemLoadInfoType134.subclass(*args_, **kwargs_)
        else:
            return ItemLoadInfoType134(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemLoad(self): return self.ItemLoad
    def set_ItemLoad(self, ItemLoad): self.ItemLoad = ItemLoad
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def hasContent_(self):
        if (
            self.ItemLoad is not None or
            self.Reference is not None or
            self.Notes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadInfoType134', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadInfoType134')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadInfoType134', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadInfoType134'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadInfoType134', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemLoad is not None:
            self.ItemLoad.export(outfile, level, namespace_, name_='ItemLoad', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemLoad':
            obj_ = ItemLoadType135.factory()
            obj_.build(child_)
            self.ItemLoad = obj_
            obj_.original_tagname_ = 'ItemLoad'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType136.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType138.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
# end class ItemLoadInfoType134


class ItemLoadType135(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfLoads=None, UnitsShipped=None, PackingMedium=None, PackingMaterial=None, LoadSize=None, LoadSizeUOM=None):
        self.original_tagname_ = None
        self.NumberOfLoads = NumberOfLoads
        self.UnitsShipped = UnitsShipped
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LoadSize = LoadSize
        self.LoadSizeUOM = LoadSizeUOM
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadType135)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadType135.subclass:
            return ItemLoadType135.subclass(*args_, **kwargs_)
        else:
            return ItemLoadType135(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfLoads(self): return self.NumberOfLoads
    def set_NumberOfLoads(self, NumberOfLoads): self.NumberOfLoads = NumberOfLoads
    def get_UnitsShipped(self): return self.UnitsShipped
    def set_UnitsShipped(self, UnitsShipped): self.UnitsShipped = UnitsShipped
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LoadSize(self): return self.LoadSize
    def set_LoadSize(self, LoadSize): self.LoadSize = LoadSize
    def get_LoadSizeUOM(self): return self.LoadSizeUOM
    def set_LoadSizeUOM(self, LoadSizeUOM): self.LoadSizeUOM = LoadSizeUOM
    def hasContent_(self):
        if (
            self.NumberOfLoads is not None or
            self.UnitsShipped is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LoadSize is not None or
            self.LoadSizeUOM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadType135', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadType135')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadType135', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadType135'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadType135', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfLoads is not None:
            self.NumberOfLoads.export(outfile, level, namespace_, name_='NumberOfLoads', pretty_print=pretty_print)
        if self.UnitsShipped is not None:
            self.UnitsShipped.export(outfile, level, namespace_, name_='UnitsShipped', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.LoadSize is not None:
            self.LoadSize.export(outfile, level, namespace_, name_='LoadSize', pretty_print=pretty_print)
        if self.LoadSizeUOM is not None:
            self.LoadSizeUOM.export(outfile, level, namespace_, name_='LoadSizeUOM', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfLoads':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NumberOfLoads = obj_
            obj_.original_tagname_ = 'NumberOfLoads'
        elif nodeName_ == 'UnitsShipped':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitsShipped = obj_
            obj_.original_tagname_ = 'UnitsShipped'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'LoadSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSize = obj_
            obj_.original_tagname_ = 'LoadSize'
        elif nodeName_ == 'LoadSizeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSizeUOM = obj_
            obj_.original_tagname_ = 'LoadSizeUOM'
# end class ItemLoadType135


class ReferenceType136(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType136)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType136.subclass:
            return ReferenceType136.subclass(*args_, **kwargs_)
        else:
            return ReferenceType136(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType136', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType136')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType136', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType136'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType136', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType137.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType136


class ReferenceIDsType137(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType137)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType137.subclass:
            return ReferenceIDsType137.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType137(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType137', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType137')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType137', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType137'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType137', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType137


class NotesType138(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType138)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType138.subclass:
            return NotesType138.subclass(*args_, **kwargs_)
        else:
            return NotesType138(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType138', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType138')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType138', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType138'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType138', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType138


class ItemLevelType139(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentLine=None, PhysicalDetails=None, CarrierSpecialHandlingDetail=None, CarrierInformation=None, Measurements=None, PriceInformation=None, ProductOrItemDescription=None, MasterItemAttribute=None, Date=None, Reference=None, Notes=None, Commodity=None, Address=None, Sublines=None, Tax=None, ChargesAllowances=None, ItemLoadInfo=None, PackLevel=None):
        self.original_tagname_ = None
        self.ShipmentLine = ShipmentLine
        self.PhysicalDetails = PhysicalDetails
        self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
        self.CarrierInformation = CarrierInformation
        self.Measurements = Measurements
        self.PriceInformation = PriceInformation
        self.ProductOrItemDescription = ProductOrItemDescription
        self.MasterItemAttribute = MasterItemAttribute
        self.Date = Date
        self.Reference = Reference
        self.Notes = Notes
        self.Commodity = Commodity
        self.Address = Address
        self.Sublines = Sublines
        self.Tax = Tax
        self.ChargesAllowances = ChargesAllowances
        self.ItemLoadInfo = ItemLoadInfo
        self.PackLevel = PackLevel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLevelType139)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLevelType139.subclass:
            return ItemLevelType139.subclass(*args_, **kwargs_)
        else:
            return ItemLevelType139(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentLine(self): return self.ShipmentLine
    def set_ShipmentLine(self, ShipmentLine): self.ShipmentLine = ShipmentLine
    def get_PhysicalDetails(self): return self.PhysicalDetails
    def set_PhysicalDetails(self, PhysicalDetails): self.PhysicalDetails = PhysicalDetails
    def get_CarrierSpecialHandlingDetail(self): return self.CarrierSpecialHandlingDetail
    def set_CarrierSpecialHandlingDetail(self, CarrierSpecialHandlingDetail): self.CarrierSpecialHandlingDetail = CarrierSpecialHandlingDetail
    def get_CarrierInformation(self): return self.CarrierInformation
    def set_CarrierInformation(self, CarrierInformation): self.CarrierInformation = CarrierInformation
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_MasterItemAttribute(self): return self.MasterItemAttribute
    def set_MasterItemAttribute(self, MasterItemAttribute): self.MasterItemAttribute = MasterItemAttribute
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_Sublines(self): return self.Sublines
    def set_Sublines(self, Sublines): self.Sublines = Sublines
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def get_ChargesAllowances(self): return self.ChargesAllowances
    def set_ChargesAllowances(self, ChargesAllowances): self.ChargesAllowances = ChargesAllowances
    def get_ItemLoadInfo(self): return self.ItemLoadInfo
    def set_ItemLoadInfo(self, ItemLoadInfo): self.ItemLoadInfo = ItemLoadInfo
    def get_PackLevel(self): return self.PackLevel
    def set_PackLevel(self, PackLevel): self.PackLevel = PackLevel
    def hasContent_(self):
        if (
            self.ShipmentLine is not None or
            self.PhysicalDetails is not None or
            self.CarrierSpecialHandlingDetail is not None or
            self.CarrierInformation is not None or
            self.Measurements is not None or
            self.PriceInformation is not None or
            self.ProductOrItemDescription is not None or
            self.MasterItemAttribute is not None or
            self.Date is not None or
            self.Reference is not None or
            self.Notes is not None or
            self.Commodity is not None or
            self.Address is not None or
            self.Sublines is not None or
            self.Tax is not None or
            self.ChargesAllowances is not None or
            self.ItemLoadInfo is not None or
            self.PackLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLevelType139', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLevelType139')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLevelType139', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLevelType139'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLevelType139', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentLine is not None:
            self.ShipmentLine.export(outfile, level, namespace_, name_='ShipmentLine', pretty_print=pretty_print)
        if self.PhysicalDetails is not None:
            self.PhysicalDetails.export(outfile, level, namespace_, name_='PhysicalDetails', pretty_print=pretty_print)
        if self.CarrierSpecialHandlingDetail is not None:
            self.CarrierSpecialHandlingDetail.export(outfile, level, namespace_, name_='CarrierSpecialHandlingDetail', pretty_print=pretty_print)
        if self.CarrierInformation is not None:
            self.CarrierInformation.export(outfile, level, namespace_, name_='CarrierInformation', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
        if self.PriceInformation is not None:
            self.PriceInformation.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.MasterItemAttribute is not None:
            self.MasterItemAttribute.export(outfile, level, namespace_, name_='MasterItemAttribute', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.Sublines is not None:
            self.Sublines.export(outfile, level, namespace_, name_='Sublines', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
        if self.ChargesAllowances is not None:
            self.ChargesAllowances.export(outfile, level, namespace_, name_='ChargesAllowances', pretty_print=pretty_print)
        if self.ItemLoadInfo is not None:
            self.ItemLoadInfo.export(outfile, level, namespace_, name_='ItemLoadInfo', pretty_print=pretty_print)
        if self.PackLevel is not None:
            self.PackLevel.export(outfile, level, namespace_, name_='PackLevel', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentLine':
            obj_ = ShipmentLineType140.factory()
            obj_.build(child_)
            self.ShipmentLine = obj_
            obj_.original_tagname_ = 'ShipmentLine'
        elif nodeName_ == 'PhysicalDetails':
            obj_ = PhysicalDetailsType143.factory()
            obj_.build(child_)
            self.PhysicalDetails = obj_
            obj_.original_tagname_ = 'PhysicalDetails'
        elif nodeName_ == 'CarrierSpecialHandlingDetail':
            obj_ = CarrierSpecialHandlingDetailType144.factory()
            obj_.build(child_)
            self.CarrierSpecialHandlingDetail = obj_
            obj_.original_tagname_ = 'CarrierSpecialHandlingDetail'
        elif nodeName_ == 'CarrierInformation':
            obj_ = CarrierInformationType145.factory()
            obj_.build(child_)
            self.CarrierInformation = obj_
            obj_.original_tagname_ = 'CarrierInformation'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType149.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType150.factory()
            obj_.build(child_)
            self.PriceInformation = obj_
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType151.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'MasterItemAttribute':
            obj_ = MasterItemAttributeType152.factory()
            obj_.build(child_)
            self.MasterItemAttribute = obj_
            obj_.original_tagname_ = 'MasterItemAttribute'
        elif nodeName_ == 'Date':
            obj_ = DateType155.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType156.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType158.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType159.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Address':
            obj_ = AddressType160.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Sublines':
            obj_ = SublinesType166.factory()
            obj_.build(child_)
            self.Sublines = obj_
            obj_.original_tagname_ = 'Sublines'
        elif nodeName_ == 'Tax':
            obj_ = TaxType174.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
        elif nodeName_ == 'ChargesAllowances':
            obj_ = ChargesAllowancesType175.factory()
            obj_.build(child_)
            self.ChargesAllowances = obj_
            obj_.original_tagname_ = 'ChargesAllowances'
        elif nodeName_ == 'ItemLoadInfo':
            obj_ = ItemLoadInfoType177.factory()
            obj_.build(child_)
            self.ItemLoadInfo = obj_
            obj_.original_tagname_ = 'ItemLoadInfo'
        elif nodeName_ == 'PackLevel':
            obj_ = PackLevel.factory()
            obj_.build(child_)
            self.PackLevel = obj_
            obj_.original_tagname_ = 'PackLevel'
# end class ItemLevelType139


class ShipmentLineType140(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ItemStatusCode=None, ShipQty=None, ShipQtyUOM=None, ShipDate=None, QtyLeftToReceive=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.ItemStatusCode = ItemStatusCode
        self.ShipQty = ShipQty
        self.ShipQtyUOM = ShipQtyUOM
        self.ShipDate = ShipDate
        self.QtyLeftToReceive = QtyLeftToReceive
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLineType140)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLineType140.subclass:
            return ShipmentLineType140.subclass(*args_, **kwargs_)
        else:
            return ShipmentLineType140(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ShipQty(self): return self.ShipQty
    def set_ShipQty(self, ShipQty): self.ShipQty = ShipQty
    def get_ShipQtyUOM(self): return self.ShipQtyUOM
    def set_ShipQtyUOM(self, ShipQtyUOM): self.ShipQtyUOM = ShipQtyUOM
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_QtyLeftToReceive(self): return self.QtyLeftToReceive
    def set_QtyLeftToReceive(self, QtyLeftToReceive): self.QtyLeftToReceive = QtyLeftToReceive
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ItemStatusCode is not None or
            self.ShipQty is not None or
            self.ShipQtyUOM is not None or
            self.ShipDate is not None or
            self.QtyLeftToReceive is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentLineType140', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentLineType140')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentLineType140', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentLineType140'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentLineType140', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            self.OrderQty.export(outfile, level, namespace_, name_='OrderQty', pretty_print=pretty_print)
        if self.OrderQtyUOM is not None:
            self.OrderQtyUOM.export(outfile, level, namespace_, name_='OrderQtyUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.ItemStatusCode is not None:
            self.ItemStatusCode.export(outfile, level, namespace_, name_='ItemStatusCode', pretty_print=pretty_print)
        if self.ShipQty is not None:
            self.ShipQty.export(outfile, level, namespace_, name_='ShipQty', pretty_print=pretty_print)
        if self.ShipQtyUOM is not None:
            self.ShipQtyUOM.export(outfile, level, namespace_, name_='ShipQtyUOM', pretty_print=pretty_print)
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.QtyLeftToReceive is not None:
            self.QtyLeftToReceive.export(outfile, level, namespace_, name_='QtyLeftToReceive', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Class is not None:
            self.Class.export(outfile, level, namespace_, name_='Class', pretty_print=pretty_print)
        if self.SellerDateCode is not None:
            self.SellerDateCode.export(outfile, level, namespace_, name_='SellerDateCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType141.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQty = obj_
            obj_.original_tagname_ = 'OrderQty'
        elif nodeName_ == 'OrderQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQtyUOM = obj_
            obj_.original_tagname_ = 'OrderQtyUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'ItemStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemStatusCode = obj_
            obj_.original_tagname_ = 'ItemStatusCode'
        elif nodeName_ == 'ShipQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQty = obj_
            obj_.original_tagname_ = 'ShipQty'
        elif nodeName_ == 'ShipQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQtyUOM = obj_
            obj_.original_tagname_ = 'ShipQtyUOM'
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'QtyLeftToReceive':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyLeftToReceive = obj_
            obj_.original_tagname_ = 'QtyLeftToReceive'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Class':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Class = obj_
            obj_.original_tagname_ = 'Class'
        elif nodeName_ == 'SellerDateCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellerDateCode = obj_
            obj_.original_tagname_ = 'SellerDateCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType142.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class ShipmentLineType140


class ProductIDType141(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType141)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType141.subclass:
            return ProductIDType141.subclass(*args_, **kwargs_)
        else:
            return ProductIDType141(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType141', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType141')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType141', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType141'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType141', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType141


class NRFStandardColorAndSizeType142(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType142)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType142.subclass:
            return NRFStandardColorAndSizeType142.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType142(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType142', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType142')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType142', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType142'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType142', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType142


class PhysicalDetailsType143(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType143)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType143.subclass:
            return PhysicalDetailsType143.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType143(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType143', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType143')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType143', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType143'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType143', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            self.PackQualifier.export(outfile, level, namespace_, name_='PackQualifier', pretty_print=pretty_print)
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            self.PackUOM.export(outfile, level, namespace_, name_='PackUOM', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            self.PackWeightUOM.export(outfile, level, namespace_, name_='PackWeightUOM', pretty_print=pretty_print)
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            self.PackVolumeUOM.export(outfile, level, namespace_, name_='PackVolumeUOM', pretty_print=pretty_print)
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            self.PackDimensionUOM.export(outfile, level, namespace_, name_='PackDimensionUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackQualifier = obj_
            obj_.original_tagname_ = 'PackQualifier'
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackUOM = obj_
            obj_.original_tagname_ = 'PackUOM'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeightUOM = obj_
            obj_.original_tagname_ = 'PackWeightUOM'
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolumeUOM = obj_
            obj_.original_tagname_ = 'PackVolumeUOM'
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackDimensionUOM = obj_
            obj_.original_tagname_ = 'PackDimensionUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType143


class CarrierSpecialHandlingDetailType144(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.HazardousMaterialCode = HazardousMaterialCode
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType144)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType144.subclass:
            return CarrierSpecialHandlingDetailType144.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType144(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType144', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType144')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType144', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType144'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType144', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            self.SpecialHandlingCode.export(outfile, level, namespace_, name_='SpecialHandlingCode', pretty_print=pretty_print)
        if self.HazardousMaterialCode is not None:
            self.HazardousMaterialCode.export(outfile, level, namespace_, name_='HazardousMaterialCode', pretty_print=pretty_print)
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SpecialHandlingCode = obj_
            obj_.original_tagname_ = 'SpecialHandlingCode'
        elif nodeName_ == 'HazardousMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialCode = obj_
            obj_.original_tagname_ = 'HazardousMaterialCode'
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
# end class CarrierSpecialHandlingDetailType144


class CarrierInformationType145(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType145)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType145.subclass:
            return CarrierInformationType145.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType145(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType145', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType145')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType145', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType145'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType145', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType146.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType147.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType145


class ServiceLevelCodesType146(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType146)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType146.subclass:
            return ServiceLevelCodesType146.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType146(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType146', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType146')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType146', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType146'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType146', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType146


class AddressType147(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType147)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType147.subclass:
            return AddressType147.subclass(*args_, **kwargs_)
        else:
            return AddressType147(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType147', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType147')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType147', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType147'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType147', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType148.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType147


class DateType148(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType148)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType148.subclass:
            return DateType148.subclass(*args_, **kwargs_)
        else:
            return DateType148(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType148', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType148')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType148', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType148'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType148', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType148


class MeasurementsType149(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType149)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType149.subclass:
            return MeasurementsType149.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType149(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType149', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType149')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType149', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType149'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType149', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType149


class PriceInformationType150(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType150)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType150.subclass:
            return PriceInformationType150.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType150(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType150', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType150')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType150', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType150'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType150', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType150


class ProductOrItemDescriptionType151(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType151)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType151.subclass:
            return ProductOrItemDescriptionType151.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType151(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType151', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType151')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType151', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType151'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType151', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType151


class MasterItemAttributeType152(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType152)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType152.subclass:
            return MasterItemAttributeType152.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType152(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def hasContent_(self):
        if (
            self.ItemAttribute is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType152', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType152')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType152', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType152'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType152', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttribute is not None:
            self.ItemAttribute.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType153.factory()
            obj_.build(child_)
            self.ItemAttribute = obj_
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType152


class ItemAttributeType153(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType153)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType153.subclass:
            return ItemAttributeType153.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType153(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType153', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType153')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType153', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType153'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType153', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            self.ItemAttributeQualifier.export(outfile, level, namespace_, name_='ItemAttributeQualifier', pretty_print=pretty_print)
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            self.ValueUOM.export(outfile, level, namespace_, name_='ValueUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemAttributeQualifier = obj_
            obj_.original_tagname_ = 'ItemAttributeQualifier'
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ValueUOM = obj_
            obj_.original_tagname_ = 'ValueUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType154.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType153


class MeasurementsType154(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType154)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType154.subclass:
            return MeasurementsType154.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType154(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType154', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType154')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType154', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType154'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType154', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType154


class DateType155(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType155)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType155.subclass:
            return DateType155.subclass(*args_, **kwargs_)
        else:
            return DateType155(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType155', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType155')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType155', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType155'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType155', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType155


class ReferenceType156(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType156)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType156.subclass:
            return ReferenceType156.subclass(*args_, **kwargs_)
        else:
            return ReferenceType156(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType156', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType156')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType156', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType156'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType156', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType157.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType156


class ReferenceIDsType157(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType157)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType157.subclass:
            return ReferenceIDsType157.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType157(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType157', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType157')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType157', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType157'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType157', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType157


class NotesType158(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType158)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType158.subclass:
            return NotesType158.subclass(*args_, **kwargs_)
        else:
            return NotesType158(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType158', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType158')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType158', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType158'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType158', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType158


class CommodityType159(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType159)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType159.subclass:
            return CommodityType159.subclass(*args_, **kwargs_)
        else:
            return CommodityType159(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType159', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType159')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType159', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType159'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType159', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType159


class AddressType160(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType160)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType160.subclass:
            return AddressType160.subclass(*args_, **kwargs_)
        else:
            return AddressType160(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType160', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType160')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType160', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType160'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType160', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType161.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType163.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType165.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType160


class ReferenceType161(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType161)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType161.subclass:
            return ReferenceType161.subclass(*args_, **kwargs_)
        else:
            return ReferenceType161(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType161', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType161')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType161', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType161'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType161', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType162.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType161


class ReferenceIDsType162(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType162)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType162.subclass:
            return ReferenceIDsType162.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType162(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType162', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType162')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType162', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType162'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType162', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType162


class ContactType163(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType163)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType163.subclass:
            return ContactType163.subclass(*args_, **kwargs_)
        else:
            return ContactType163(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType163', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType163')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType163', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType163'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType163', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType164.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType163


class AdditionalContactDetailsType164(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType164)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType164.subclass:
            return AdditionalContactDetailsType164.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType164(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType164', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType164')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType164', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType164'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType164', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType164


class DateType165(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType165)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType165.subclass:
            return DateType165.subclass(*args_, **kwargs_)
        else:
            return DateType165(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType165', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType165')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType165', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType165'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType165', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType165


class SublinesType166(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType166)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType166.subclass:
            return SublinesType166.subclass(*args_, **kwargs_)
        else:
            return SublinesType166(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def hasContent_(self):
        if (
            self.Subline is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType166', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType166')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType166', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType166'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType166', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Subline is not None:
            self.Subline.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType167.factory()
            obj_.build(child_)
            self.Subline = obj_
            obj_.original_tagname_ = 'Subline'
# end class SublinesType166


class SublineType167(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceInformation=None, ProductOrItemDescription=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        self.PriceInformation = PriceInformation
        self.ProductOrItemDescription = ProductOrItemDescription
        self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType167)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType167.subclass:
            return SublineType167.subclass(*args_, **kwargs_)
        else:
            return SublineType167(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceInformation is not None or
            self.ProductOrItemDescription is not None or
            self.Commodity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType167', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType167')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType167', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType167'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType167', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        if self.PriceInformation is not None:
            self.PriceInformation.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType168.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType171.factory()
            obj_.build(child_)
            self.PriceInformation = obj_
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType172.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType173.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
# end class SublineType167


class SublineItemDetailType168(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType168)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType168.subclass:
            return SublineItemDetailType168.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType168(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType168', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType168')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType168', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType168'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType168', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            self.QtyPerUOM.export(outfile, level, namespace_, name_='QtyPerUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType169.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPerUOM = obj_
            obj_.original_tagname_ = 'QtyPerUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType170.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType168


class ProductIDType169(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType169)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType169.subclass:
            return ProductIDType169.subclass(*args_, **kwargs_)
        else:
            return ProductIDType169(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType169', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType169')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType169', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType169'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType169', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType169


class NRFStandardColorAndSizeType170(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType170)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType170.subclass:
            return NRFStandardColorAndSizeType170.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType170(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType170', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType170')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType170', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType170'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType170', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType170


class PriceInformationType171(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType171)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType171.subclass:
            return PriceInformationType171.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType171(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType171', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType171')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType171', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType171'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType171', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType171


class ProductOrItemDescriptionType172(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType172)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType172.subclass:
            return ProductOrItemDescriptionType172.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType172(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType172', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType172')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType172', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType172'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType172', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType172


class CommodityType173(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType173)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType173.subclass:
            return CommodityType173.subclass(*args_, **kwargs_)
        else:
            return CommodityType173(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType173', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType173')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType173', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType173'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType173', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType173


class TaxType174(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType174)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType174.subclass:
            return TaxType174.subclass(*args_, **kwargs_)
        else:
            return TaxType174(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType174', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType174')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType174', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType174'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType174', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType174


class ChargesAllowancesType175(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType175)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType175.subclass:
            return ChargesAllowancesType175.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType175(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType175', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType175')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType175', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType175'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType175', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType176.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType175


class TaxType176(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType176)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType176.subclass:
            return TaxType176.subclass(*args_, **kwargs_)
        else:
            return TaxType176(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType176', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType176')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType176', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType176'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType176', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType176


class ItemLoadInfoType177(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemLoad=None, Reference=None, Notes=None):
        self.original_tagname_ = None
        self.ItemLoad = ItemLoad
        self.Reference = Reference
        self.Notes = Notes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadInfoType177)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadInfoType177.subclass:
            return ItemLoadInfoType177.subclass(*args_, **kwargs_)
        else:
            return ItemLoadInfoType177(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemLoad(self): return self.ItemLoad
    def set_ItemLoad(self, ItemLoad): self.ItemLoad = ItemLoad
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def hasContent_(self):
        if (
            self.ItemLoad is not None or
            self.Reference is not None or
            self.Notes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadInfoType177', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadInfoType177')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadInfoType177', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadInfoType177'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadInfoType177', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemLoad is not None:
            self.ItemLoad.export(outfile, level, namespace_, name_='ItemLoad', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemLoad':
            obj_ = ItemLoadType178.factory()
            obj_.build(child_)
            self.ItemLoad = obj_
            obj_.original_tagname_ = 'ItemLoad'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType179.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType181.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
# end class ItemLoadInfoType177


class ItemLoadType178(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfLoads=None, UnitsShipped=None, PackingMedium=None, PackingMaterial=None, LoadSize=None, LoadSizeUOM=None):
        self.original_tagname_ = None
        self.NumberOfLoads = NumberOfLoads
        self.UnitsShipped = UnitsShipped
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LoadSize = LoadSize
        self.LoadSizeUOM = LoadSizeUOM
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadType178)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadType178.subclass:
            return ItemLoadType178.subclass(*args_, **kwargs_)
        else:
            return ItemLoadType178(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfLoads(self): return self.NumberOfLoads
    def set_NumberOfLoads(self, NumberOfLoads): self.NumberOfLoads = NumberOfLoads
    def get_UnitsShipped(self): return self.UnitsShipped
    def set_UnitsShipped(self, UnitsShipped): self.UnitsShipped = UnitsShipped
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LoadSize(self): return self.LoadSize
    def set_LoadSize(self, LoadSize): self.LoadSize = LoadSize
    def get_LoadSizeUOM(self): return self.LoadSizeUOM
    def set_LoadSizeUOM(self, LoadSizeUOM): self.LoadSizeUOM = LoadSizeUOM
    def hasContent_(self):
        if (
            self.NumberOfLoads is not None or
            self.UnitsShipped is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LoadSize is not None or
            self.LoadSizeUOM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadType178', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadType178')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadType178', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadType178'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadType178', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfLoads is not None:
            self.NumberOfLoads.export(outfile, level, namespace_, name_='NumberOfLoads', pretty_print=pretty_print)
        if self.UnitsShipped is not None:
            self.UnitsShipped.export(outfile, level, namespace_, name_='UnitsShipped', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.LoadSize is not None:
            self.LoadSize.export(outfile, level, namespace_, name_='LoadSize', pretty_print=pretty_print)
        if self.LoadSizeUOM is not None:
            self.LoadSizeUOM.export(outfile, level, namespace_, name_='LoadSizeUOM', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfLoads':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NumberOfLoads = obj_
            obj_.original_tagname_ = 'NumberOfLoads'
        elif nodeName_ == 'UnitsShipped':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitsShipped = obj_
            obj_.original_tagname_ = 'UnitsShipped'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'LoadSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSize = obj_
            obj_.original_tagname_ = 'LoadSize'
        elif nodeName_ == 'LoadSizeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSizeUOM = obj_
            obj_.original_tagname_ = 'LoadSizeUOM'
# end class ItemLoadType178


class ReferenceType179(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType179)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType179.subclass:
            return ReferenceType179.subclass(*args_, **kwargs_)
        else:
            return ReferenceType179(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType179', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType179')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType179', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType179'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType179', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType180.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType179


class ReferenceIDsType180(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType180)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType180.subclass:
            return ReferenceIDsType180.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType180(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType180', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType180')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType180', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType180'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType180', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType180


class NotesType181(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType181)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType181.subclass:
            return NotesType181.subclass(*args_, **kwargs_)
        else:
            return NotesType181(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType181', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType181')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType181', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType181'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType181', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType181


class SummaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TotalOrders=None, TotalLineItems=None, TotalQuantity=None, TotalWeight=None):
        self.original_tagname_ = None
        self.TotalOrders = TotalOrders
        self.TotalLineItems = TotalLineItems
        self.TotalQuantity = TotalQuantity
        self.TotalWeight = TotalWeight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SummaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SummaryType.subclass:
            return SummaryType.subclass(*args_, **kwargs_)
        else:
            return SummaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TotalOrders(self): return self.TotalOrders
    def set_TotalOrders(self, TotalOrders): self.TotalOrders = TotalOrders
    def get_TotalLineItems(self): return self.TotalLineItems
    def set_TotalLineItems(self, TotalLineItems): self.TotalLineItems = TotalLineItems
    def get_TotalQuantity(self): return self.TotalQuantity
    def set_TotalQuantity(self, TotalQuantity): self.TotalQuantity = TotalQuantity
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def hasContent_(self):
        if (
            self.TotalOrders is not None or
            self.TotalLineItems is not None or
            self.TotalQuantity is not None or
            self.TotalWeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SummaryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SummaryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SummaryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SummaryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SummaryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TotalOrders is not None:
            self.TotalOrders.export(outfile, level, namespace_, name_='TotalOrders', pretty_print=pretty_print)
        if self.TotalLineItems is not None:
            self.TotalLineItems.export(outfile, level, namespace_, name_='TotalLineItems', pretty_print=pretty_print)
        if self.TotalQuantity is not None:
            self.TotalQuantity.export(outfile, level, namespace_, name_='TotalQuantity', pretty_print=pretty_print)
        if self.TotalWeight is not None:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TotalOrders':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalOrders = obj_
            obj_.original_tagname_ = 'TotalOrders'
        elif nodeName_ == 'TotalLineItems':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalLineItems = obj_
            obj_.original_tagname_ = 'TotalLineItems'
        elif nodeName_ == 'TotalQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalQuantity = obj_
            obj_.original_tagname_ = 'TotalQuantity'
        elif nodeName_ == 'TotalWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
# end class SummaryType


class ContainerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BillOfLadingNumber=None, CarrierProNumber=None):
        self.original_tagname_ = None
        self.BillOfLadingNumber = BillOfLadingNumber
        self.CarrierProNumber = CarrierProNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContainerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContainerType.subclass:
            return ContainerType.subclass(*args_, **kwargs_)
        else:
            return ContainerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillOfLadingNumber(self): return self.BillOfLadingNumber
    def set_BillOfLadingNumber(self, BillOfLadingNumber): self.BillOfLadingNumber = BillOfLadingNumber
    def get_CarrierProNumber(self): return self.CarrierProNumber
    def set_CarrierProNumber(self, CarrierProNumber): self.CarrierProNumber = CarrierProNumber
    def hasContent_(self):
        if (
            self.BillOfLadingNumber is not None or
            self.CarrierProNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContainerType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContainerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContainerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContainerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContainerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillOfLadingNumber is not None:
            self.BillOfLadingNumber.export(outfile, level, namespace_, name_='BillOfLadingNumber', pretty_print=pretty_print)
        if self.CarrierProNumber is not None:
            self.CarrierProNumber.export(outfile, level, namespace_, name_='CarrierProNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillOfLadingNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BillOfLadingNumber = obj_
            obj_.original_tagname_ = 'BillOfLadingNumber'
        elif nodeName_ == 'CarrierProNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierProNumber = obj_
            obj_.original_tagname_ = 'CarrierProNumber'
# end class ContainerType


class DateType182(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType182)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType182.subclass:
            return DateType182.subclass(*args_, **kwargs_)
        else:
            return DateType182(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType182', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType182')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType182', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType182'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType182', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType182


class ReferenceType183(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType183)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType183.subclass:
            return ReferenceType183.subclass(*args_, **kwargs_)
        else:
            return ReferenceType183(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType183', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType183')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType183', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType183'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType183', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType184.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType183


class ReferenceIDsType184(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType184)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType184.subclass:
            return ReferenceIDsType184.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType184(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType184', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType184')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType184', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType184'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType184', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType184


class NotesType185(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType185)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType185.subclass:
            return NotesType185.subclass(*args_, **kwargs_)
        else:
            return NotesType185(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType185', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType185')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType185', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType185'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType185', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType185


class QuantityAndWeightType186(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.PalletExchangeCode = PalletExchangeCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType186)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType186.subclass:
            return QuantityAndWeightType186.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType186(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType186', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType186')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType186', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType186'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType186', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.LadingQuantity is not None:
            self.LadingQuantity.export(outfile, level, namespace_, name_='LadingQuantity', pretty_print=pretty_print)
        if self.LadingDescription is not None:
            self.LadingDescription.export(outfile, level, namespace_, name_='LadingDescription', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.WeightUOM is not None:
            self.WeightUOM.export(outfile, level, namespace_, name_='WeightUOM', pretty_print=pretty_print)
        if self.Volume is not None:
            self.Volume.export(outfile, level, namespace_, name_='Volume', pretty_print=pretty_print)
        if self.VolumeUOM is not None:
            self.VolumeUOM.export(outfile, level, namespace_, name_='VolumeUOM', pretty_print=pretty_print)
        if self.PalletExchangeCode is not None:
            self.PalletExchangeCode.export(outfile, level, namespace_, name_='PalletExchangeCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'LadingQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingQuantity = obj_
            obj_.original_tagname_ = 'LadingQuantity'
        elif nodeName_ == 'LadingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingDescription = obj_
            obj_.original_tagname_ = 'LadingDescription'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'Weight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightUOM = obj_
            obj_.original_tagname_ = 'WeightUOM'
        elif nodeName_ == 'Volume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
        elif nodeName_ == 'VolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VolumeUOM = obj_
            obj_.original_tagname_ = 'VolumeUOM'
        elif nodeName_ == 'PalletExchangeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletExchangeCode = obj_
            obj_.original_tagname_ = 'PalletExchangeCode'
# end class QuantityAndWeightType186


class CarrierInformationType187(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType187)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType187.subclass:
            return CarrierInformationType187.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType187(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType187', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType187')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType187', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType187'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType187', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType188.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType189.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType187


class ServiceLevelCodesType188(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType188)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType188.subclass:
            return ServiceLevelCodesType188.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType188(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType188', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType188')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType188', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType188'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType188', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType188


class AddressType189(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType189)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType189.subclass:
            return AddressType189.subclass(*args_, **kwargs_)
        else:
            return AddressType189(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType189', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType189')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType189', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType189'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType189', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType190.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType189


class DateType190(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType190)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType190.subclass:
            return DateType190.subclass(*args_, **kwargs_)
        else:
            return DateType190(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType190', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType190')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType190', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType190'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType190', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType190


class AddressType191(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType191)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType191.subclass:
            return AddressType191.subclass(*args_, **kwargs_)
        else:
            return AddressType191(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType191', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType191')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType191', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType191'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType191', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType192.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType194.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType196.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType191


class ReferenceType192(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType192)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType192.subclass:
            return ReferenceType192.subclass(*args_, **kwargs_)
        else:
            return ReferenceType192(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType192', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType192')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType192', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType192'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType192', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType193.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType192


class ReferenceIDsType193(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType193)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType193.subclass:
            return ReferenceIDsType193.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType193(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType193', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType193')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType193', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType193'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType193', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType193


class ContactType194(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType194)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType194.subclass:
            return ContactType194.subclass(*args_, **kwargs_)
        else:
            return ContactType194(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType194', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType194')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType194', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType194'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType194', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType195.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType194


class AdditionalContactDetailsType195(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType195)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType195.subclass:
            return AdditionalContactDetailsType195.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType195(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType195', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType195')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType195', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType195'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType195', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType195


class DateType196(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType196)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType196.subclass:
            return DateType196.subclass(*args_, **kwargs_)
        else:
            return DateType196(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType196', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType196')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType196', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType196'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType196', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType196


class OrderHeaderType197(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InternalOrderNumber=None, InternalOrderDate=None, InvoiceNumber=None, InvoiceDate=None, PurchaseOrderNumber=None, ReleaseNumber=None, PurchaseOrderDate=None, Department=None, DepartmentDescription=None, Vendor=None, JobNumber=None, Division=None, CustomerAccountNumber=None, CustomerOrderNumber=None, PromotionDealNumber=None, PromotionDealDescription=None, DeliveryDate=None, DeliveryTime=None):
        self.original_tagname_ = None
        self.InternalOrderNumber = InternalOrderNumber
        self.InternalOrderDate = InternalOrderDate
        self.InvoiceNumber = InvoiceNumber
        self.InvoiceDate = InvoiceDate
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.ReleaseNumber = ReleaseNumber
        self.PurchaseOrderDate = PurchaseOrderDate
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Vendor = Vendor
        self.JobNumber = JobNumber
        self.Division = Division
        self.CustomerAccountNumber = CustomerAccountNumber
        self.CustomerOrderNumber = CustomerOrderNumber
        self.PromotionDealNumber = PromotionDealNumber
        self.PromotionDealDescription = PromotionDealDescription
        self.DeliveryDate = DeliveryDate
        self.DeliveryTime = DeliveryTime
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrderHeaderType197)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrderHeaderType197.subclass:
            return OrderHeaderType197.subclass(*args_, **kwargs_)
        else:
            return OrderHeaderType197(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InternalOrderNumber(self): return self.InternalOrderNumber
    def set_InternalOrderNumber(self, InternalOrderNumber): self.InternalOrderNumber = InternalOrderNumber
    def get_InternalOrderDate(self): return self.InternalOrderDate
    def set_InternalOrderDate(self, InternalOrderDate): self.InternalOrderDate = InternalOrderDate
    def get_InvoiceNumber(self): return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber): self.InvoiceNumber = InvoiceNumber
    def get_InvoiceDate(self): return self.InvoiceDate
    def set_InvoiceDate(self, InvoiceDate): self.InvoiceDate = InvoiceDate
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_ReleaseNumber(self): return self.ReleaseNumber
    def set_ReleaseNumber(self, ReleaseNumber): self.ReleaseNumber = ReleaseNumber
    def get_PurchaseOrderDate(self): return self.PurchaseOrderDate
    def set_PurchaseOrderDate(self, PurchaseOrderDate): self.PurchaseOrderDate = PurchaseOrderDate
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Vendor(self): return self.Vendor
    def set_Vendor(self, Vendor): self.Vendor = Vendor
    def get_JobNumber(self): return self.JobNumber
    def set_JobNumber(self, JobNumber): self.JobNumber = JobNumber
    def get_Division(self): return self.Division
    def set_Division(self, Division): self.Division = Division
    def get_CustomerAccountNumber(self): return self.CustomerAccountNumber
    def set_CustomerAccountNumber(self, CustomerAccountNumber): self.CustomerAccountNumber = CustomerAccountNumber
    def get_CustomerOrderNumber(self): return self.CustomerOrderNumber
    def set_CustomerOrderNumber(self, CustomerOrderNumber): self.CustomerOrderNumber = CustomerOrderNumber
    def get_PromotionDealNumber(self): return self.PromotionDealNumber
    def set_PromotionDealNumber(self, PromotionDealNumber): self.PromotionDealNumber = PromotionDealNumber
    def get_PromotionDealDescription(self): return self.PromotionDealDescription
    def set_PromotionDealDescription(self, PromotionDealDescription): self.PromotionDealDescription = PromotionDealDescription
    def get_DeliveryDate(self): return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate): self.DeliveryDate = DeliveryDate
    def get_DeliveryTime(self): return self.DeliveryTime
    def set_DeliveryTime(self, DeliveryTime): self.DeliveryTime = DeliveryTime
    def hasContent_(self):
        if (
            self.InternalOrderNumber is not None or
            self.InternalOrderDate is not None or
            self.InvoiceNumber is not None or
            self.InvoiceDate is not None or
            self.PurchaseOrderNumber is not None or
            self.ReleaseNumber is not None or
            self.PurchaseOrderDate is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Vendor is not None or
            self.JobNumber is not None or
            self.Division is not None or
            self.CustomerAccountNumber is not None or
            self.CustomerOrderNumber is not None or
            self.PromotionDealNumber is not None or
            self.PromotionDealDescription is not None or
            self.DeliveryDate is not None or
            self.DeliveryTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrderHeaderType197', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrderHeaderType197')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrderHeaderType197', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrderHeaderType197'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OrderHeaderType197', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InternalOrderNumber is not None:
            self.InternalOrderNumber.export(outfile, level, namespace_, name_='InternalOrderNumber', pretty_print=pretty_print)
        if self.InternalOrderDate is not None:
            self.InternalOrderDate.export(outfile, level, namespace_, name_='InternalOrderDate', pretty_print=pretty_print)
        if self.InvoiceNumber is not None:
            self.InvoiceNumber.export(outfile, level, namespace_, name_='InvoiceNumber', pretty_print=pretty_print)
        if self.InvoiceDate is not None:
            self.InvoiceDate.export(outfile, level, namespace_, name_='InvoiceDate', pretty_print=pretty_print)
        if self.PurchaseOrderNumber is not None:
            self.PurchaseOrderNumber.export(outfile, level, namespace_, name_='PurchaseOrderNumber', pretty_print=pretty_print)
        if self.ReleaseNumber is not None:
            self.ReleaseNumber.export(outfile, level, namespace_, name_='ReleaseNumber', pretty_print=pretty_print)
        if self.PurchaseOrderDate is not None:
            self.PurchaseOrderDate.export(outfile, level, namespace_, name_='PurchaseOrderDate', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Vendor is not None:
            self.Vendor.export(outfile, level, namespace_, name_='Vendor', pretty_print=pretty_print)
        if self.JobNumber is not None:
            self.JobNumber.export(outfile, level, namespace_, name_='JobNumber', pretty_print=pretty_print)
        if self.Division is not None:
            self.Division.export(outfile, level, namespace_, name_='Division', pretty_print=pretty_print)
        if self.CustomerAccountNumber is not None:
            self.CustomerAccountNumber.export(outfile, level, namespace_, name_='CustomerAccountNumber', pretty_print=pretty_print)
        if self.CustomerOrderNumber is not None:
            self.CustomerOrderNumber.export(outfile, level, namespace_, name_='CustomerOrderNumber', pretty_print=pretty_print)
        if self.PromotionDealNumber is not None:
            self.PromotionDealNumber.export(outfile, level, namespace_, name_='PromotionDealNumber', pretty_print=pretty_print)
        if self.PromotionDealDescription is not None:
            self.PromotionDealDescription.export(outfile, level, namespace_, name_='PromotionDealDescription', pretty_print=pretty_print)
        if self.DeliveryDate is not None:
            self.DeliveryDate.export(outfile, level, namespace_, name_='DeliveryDate', pretty_print=pretty_print)
        if self.DeliveryTime is not None:
            self.DeliveryTime.export(outfile, level, namespace_, name_='DeliveryTime', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InternalOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternalOrderNumber = obj_
            obj_.original_tagname_ = 'InternalOrderNumber'
        elif nodeName_ == 'InternalOrderDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternalOrderDate = obj_
            obj_.original_tagname_ = 'InternalOrderDate'
        elif nodeName_ == 'InvoiceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InvoiceNumber = obj_
            obj_.original_tagname_ = 'InvoiceNumber'
        elif nodeName_ == 'InvoiceDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InvoiceDate = obj_
            obj_.original_tagname_ = 'InvoiceDate'
        elif nodeName_ == 'PurchaseOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchaseOrderNumber = obj_
            obj_.original_tagname_ = 'PurchaseOrderNumber'
        elif nodeName_ == 'ReleaseNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReleaseNumber = obj_
            obj_.original_tagname_ = 'ReleaseNumber'
        elif nodeName_ == 'PurchaseOrderDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchaseOrderDate = obj_
            obj_.original_tagname_ = 'PurchaseOrderDate'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Vendor':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Vendor = obj_
            obj_.original_tagname_ = 'Vendor'
        elif nodeName_ == 'JobNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JobNumber = obj_
            obj_.original_tagname_ = 'JobNumber'
        elif nodeName_ == 'Division':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Division = obj_
            obj_.original_tagname_ = 'Division'
        elif nodeName_ == 'CustomerAccountNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CustomerAccountNumber = obj_
            obj_.original_tagname_ = 'CustomerAccountNumber'
        elif nodeName_ == 'CustomerOrderNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CustomerOrderNumber = obj_
            obj_.original_tagname_ = 'CustomerOrderNumber'
        elif nodeName_ == 'PromotionDealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PromotionDealNumber = obj_
            obj_.original_tagname_ = 'PromotionDealNumber'
        elif nodeName_ == 'PromotionDealDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PromotionDealDescription = obj_
            obj_.original_tagname_ = 'PromotionDealDescription'
        elif nodeName_ == 'DeliveryDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DeliveryDate = obj_
            obj_.original_tagname_ = 'DeliveryDate'
        elif nodeName_ == 'DeliveryTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DeliveryTime = obj_
            obj_.original_tagname_ = 'DeliveryTime'
# end class OrderHeaderType197


class QuantityAndWeightType198(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackingMedium=None, PackingMaterial=None, LadingQuantity=None, LadingDescription=None, WeightQualifier=None, Weight=None, WeightUOM=None, Volume=None, VolumeUOM=None, PalletExchangeCode=None):
        self.original_tagname_ = None
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LadingQuantity = LadingQuantity
        self.LadingDescription = LadingDescription
        self.WeightQualifier = WeightQualifier
        self.Weight = Weight
        self.WeightUOM = WeightUOM
        self.Volume = Volume
        self.VolumeUOM = VolumeUOM
        self.PalletExchangeCode = PalletExchangeCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QuantityAndWeightType198)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QuantityAndWeightType198.subclass:
            return QuantityAndWeightType198.subclass(*args_, **kwargs_)
        else:
            return QuantityAndWeightType198(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LadingQuantity(self): return self.LadingQuantity
    def set_LadingQuantity(self, LadingQuantity): self.LadingQuantity = LadingQuantity
    def get_LadingDescription(self): return self.LadingDescription
    def set_LadingDescription(self, LadingDescription): self.LadingDescription = LadingDescription
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_WeightUOM(self): return self.WeightUOM
    def set_WeightUOM(self, WeightUOM): self.WeightUOM = WeightUOM
    def get_Volume(self): return self.Volume
    def set_Volume(self, Volume): self.Volume = Volume
    def get_VolumeUOM(self): return self.VolumeUOM
    def set_VolumeUOM(self, VolumeUOM): self.VolumeUOM = VolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def hasContent_(self):
        if (
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LadingQuantity is not None or
            self.LadingDescription is not None or
            self.WeightQualifier is not None or
            self.Weight is not None or
            self.WeightUOM is not None or
            self.Volume is not None or
            self.VolumeUOM is not None or
            self.PalletExchangeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='QuantityAndWeightType198', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QuantityAndWeightType198')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='QuantityAndWeightType198', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QuantityAndWeightType198'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QuantityAndWeightType198', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.LadingQuantity is not None:
            self.LadingQuantity.export(outfile, level, namespace_, name_='LadingQuantity', pretty_print=pretty_print)
        if self.LadingDescription is not None:
            self.LadingDescription.export(outfile, level, namespace_, name_='LadingDescription', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.Weight is not None:
            self.Weight.export(outfile, level, namespace_, name_='Weight', pretty_print=pretty_print)
        if self.WeightUOM is not None:
            self.WeightUOM.export(outfile, level, namespace_, name_='WeightUOM', pretty_print=pretty_print)
        if self.Volume is not None:
            self.Volume.export(outfile, level, namespace_, name_='Volume', pretty_print=pretty_print)
        if self.VolumeUOM is not None:
            self.VolumeUOM.export(outfile, level, namespace_, name_='VolumeUOM', pretty_print=pretty_print)
        if self.PalletExchangeCode is not None:
            self.PalletExchangeCode.export(outfile, level, namespace_, name_='PalletExchangeCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'LadingQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingQuantity = obj_
            obj_.original_tagname_ = 'LadingQuantity'
        elif nodeName_ == 'LadingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LadingDescription = obj_
            obj_.original_tagname_ = 'LadingDescription'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'Weight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightUOM = obj_
            obj_.original_tagname_ = 'WeightUOM'
        elif nodeName_ == 'Volume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
        elif nodeName_ == 'VolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VolumeUOM = obj_
            obj_.original_tagname_ = 'VolumeUOM'
        elif nodeName_ == 'PalletExchangeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletExchangeCode = obj_
            obj_.original_tagname_ = 'PalletExchangeCode'
# end class QuantityAndWeightType198


class CarrierInformationType199(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType199)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType199.subclass:
            return CarrierInformationType199.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType199(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType199', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType199')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType199', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType199'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType199', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType200.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType201.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType199


class ServiceLevelCodesType200(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType200)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType200.subclass:
            return ServiceLevelCodesType200.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType200(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType200', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType200')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType200', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType200'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType200', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType200


class AddressType201(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType201)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType201.subclass:
            return AddressType201.subclass(*args_, **kwargs_)
        else:
            return AddressType201(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType201', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType201')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType201', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType201'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType201', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType202.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType201


class DateType202(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType202)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType202.subclass:
            return DateType202.subclass(*args_, **kwargs_)
        else:
            return DateType202(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType202', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType202')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType202', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType202'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType202', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType202


class DateType203(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType203)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType203.subclass:
            return DateType203.subclass(*args_, **kwargs_)
        else:
            return DateType203(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType203', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType203')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType203', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType203'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType203', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType203


class ReferenceType204(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType204)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType204.subclass:
            return ReferenceType204.subclass(*args_, **kwargs_)
        else:
            return ReferenceType204(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType204', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType204')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType204', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType204'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType204', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType205.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType204


class ReferenceIDsType205(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType205)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType205.subclass:
            return ReferenceIDsType205.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType205(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType205', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType205')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType205', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType205'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType205', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType205


class NotesType206(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType206)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType206.subclass:
            return NotesType206.subclass(*args_, **kwargs_)
        else:
            return NotesType206(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType206', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType206')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType206', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType206'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType206', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType206


class AddressType207(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType207)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType207.subclass:
            return AddressType207.subclass(*args_, **kwargs_)
        else:
            return AddressType207(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType207', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType207')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType207', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType207'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType207', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType208.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType210.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType212.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType207


class ReferenceType208(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType208)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType208.subclass:
            return ReferenceType208.subclass(*args_, **kwargs_)
        else:
            return ReferenceType208(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType208', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType208')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType208', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType208'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType208', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType209.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType208


class ReferenceIDsType209(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType209)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType209.subclass:
            return ReferenceIDsType209.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType209(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType209', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType209')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType209', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType209'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType209', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType209


class ContactType210(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType210)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType210.subclass:
            return ContactType210.subclass(*args_, **kwargs_)
        else:
            return ContactType210(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType210', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType210')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType210', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType210'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType210', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType211.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType210


class AdditionalContactDetailsType211(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType211)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType211.subclass:
            return AdditionalContactDetailsType211.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType211(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType211', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType211')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType211', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType211'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType211', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType211


class DateType212(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType212)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType212.subclass:
            return DateType212.subclass(*args_, **kwargs_)
        else:
            return DateType212(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType212', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType212')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType212', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType212'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType212', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType212


class TaxType213(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType213)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType213.subclass:
            return TaxType213.subclass(*args_, **kwargs_)
        else:
            return TaxType213(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType213', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType213')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType213', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType213'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType213', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType213


class ChargesAllowancesType214(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType214)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType214.subclass:
            return ChargesAllowancesType214.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType214(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType214', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType214')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType214', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType214'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType214', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType215.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType214


class TaxType215(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType215)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType215.subclass:
            return TaxType215.subclass(*args_, **kwargs_)
        else:
            return TaxType215(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType215', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType215')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType215', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType215'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType215', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType215


class CommodityType216(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType216)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType216.subclass:
            return CommodityType216.subclass(*args_, **kwargs_)
        else:
            return CommodityType216(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType216', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType216')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType216', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType216'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType216', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType216


class PackType217(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackLevelType=None, ShippingSerialID=None, CarrierPackageID=None):
        self.original_tagname_ = None
        self.PackLevelType = PackLevelType
        self.ShippingSerialID = ShippingSerialID
        self.CarrierPackageID = CarrierPackageID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackType217)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackType217.subclass:
            return PackType217.subclass(*args_, **kwargs_)
        else:
            return PackType217(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackLevelType(self): return self.PackLevelType
    def set_PackLevelType(self, PackLevelType): self.PackLevelType = PackLevelType
    def get_ShippingSerialID(self): return self.ShippingSerialID
    def set_ShippingSerialID(self, ShippingSerialID): self.ShippingSerialID = ShippingSerialID
    def get_CarrierPackageID(self): return self.CarrierPackageID
    def set_CarrierPackageID(self, CarrierPackageID): self.CarrierPackageID = CarrierPackageID
    def hasContent_(self):
        if (
            self.PackLevelType is not None or
            self.ShippingSerialID is not None or
            self.CarrierPackageID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackType217', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackType217')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackType217', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackType217'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackType217', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackLevelType is not None:
            self.PackLevelType.export(outfile, level, namespace_, name_='PackLevelType', pretty_print=pretty_print)
        if self.ShippingSerialID is not None:
            self.ShippingSerialID.export(outfile, level, namespace_, name_='ShippingSerialID', pretty_print=pretty_print)
        if self.CarrierPackageID is not None:
            self.CarrierPackageID.export(outfile, level, namespace_, name_='CarrierPackageID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackLevelType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLevelType = obj_
            obj_.original_tagname_ = 'PackLevelType'
        elif nodeName_ == 'ShippingSerialID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShippingSerialID = obj_
            obj_.original_tagname_ = 'ShippingSerialID'
        elif nodeName_ == 'CarrierPackageID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierPackageID = obj_
            obj_.original_tagname_ = 'CarrierPackageID'
# end class PackType217


class PhysicalDetailsType218(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType218)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType218.subclass:
            return PhysicalDetailsType218.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType218(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType218', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType218')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType218', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType218'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType218', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            self.PackQualifier.export(outfile, level, namespace_, name_='PackQualifier', pretty_print=pretty_print)
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            self.PackUOM.export(outfile, level, namespace_, name_='PackUOM', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            self.PackWeightUOM.export(outfile, level, namespace_, name_='PackWeightUOM', pretty_print=pretty_print)
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            self.PackVolumeUOM.export(outfile, level, namespace_, name_='PackVolumeUOM', pretty_print=pretty_print)
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            self.PackDimensionUOM.export(outfile, level, namespace_, name_='PackDimensionUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackQualifier = obj_
            obj_.original_tagname_ = 'PackQualifier'
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackUOM = obj_
            obj_.original_tagname_ = 'PackUOM'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeightUOM = obj_
            obj_.original_tagname_ = 'PackWeightUOM'
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolumeUOM = obj_
            obj_.original_tagname_ = 'PackVolumeUOM'
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackDimensionUOM = obj_
            obj_.original_tagname_ = 'PackDimensionUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType218


class MarksAndNumbersCollectionType219(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MarksAndNumbersQualifier1=None, MarksAndNumbers1=None):
        self.original_tagname_ = None
        self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
        self.MarksAndNumbers1 = MarksAndNumbers1
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarksAndNumbersCollectionType219)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarksAndNumbersCollectionType219.subclass:
            return MarksAndNumbersCollectionType219.subclass(*args_, **kwargs_)
        else:
            return MarksAndNumbersCollectionType219(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MarksAndNumbersQualifier1(self): return self.MarksAndNumbersQualifier1
    def set_MarksAndNumbersQualifier1(self, MarksAndNumbersQualifier1): self.MarksAndNumbersQualifier1 = MarksAndNumbersQualifier1
    def get_MarksAndNumbers1(self): return self.MarksAndNumbers1
    def set_MarksAndNumbers1(self, MarksAndNumbers1): self.MarksAndNumbers1 = MarksAndNumbers1
    def hasContent_(self):
        if (
            self.MarksAndNumbersQualifier1 is not None or
            self.MarksAndNumbers1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType219', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarksAndNumbersCollectionType219')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MarksAndNumbersCollectionType219', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MarksAndNumbersCollectionType219'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MarksAndNumbersCollectionType219', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarksAndNumbersQualifier1 is not None:
            self.MarksAndNumbersQualifier1.export(outfile, level, namespace_, name_='MarksAndNumbersQualifier1', pretty_print=pretty_print)
        if self.MarksAndNumbers1 is not None:
            self.MarksAndNumbers1.export(outfile, level, namespace_, name_='MarksAndNumbers1', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MarksAndNumbersQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbersQualifier1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbersQualifier1'
        elif nodeName_ == 'MarksAndNumbers1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MarksAndNumbers1 = obj_
            obj_.original_tagname_ = 'MarksAndNumbers1'
# end class MarksAndNumbersCollectionType219


class PalletInformationType220(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PalletQualifier=None, PalletValue=None, PalletTypeCode=None, PalletTiers=None, PalletBlocks=None, UnitWeight=None, UnitWeightUOM=None, Length=None, Width=None, Height=None, UnitOfMeasure=None, WeightQualifier=None, PalletWeight=None, PalletWeightUOM=None, PalletVolume=None, PalletVolumeUOM=None, PalletExchangeCode=None, PalletStructureCode=None):
        self.original_tagname_ = None
        self.PalletQualifier = PalletQualifier
        self.PalletValue = PalletValue
        self.PalletTypeCode = PalletTypeCode
        self.PalletTiers = PalletTiers
        self.PalletBlocks = PalletBlocks
        self.UnitWeight = UnitWeight
        self.UnitWeightUOM = UnitWeightUOM
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.UnitOfMeasure = UnitOfMeasure
        self.WeightQualifier = WeightQualifier
        self.PalletWeight = PalletWeight
        self.PalletWeightUOM = PalletWeightUOM
        self.PalletVolume = PalletVolume
        self.PalletVolumeUOM = PalletVolumeUOM
        self.PalletExchangeCode = PalletExchangeCode
        self.PalletStructureCode = PalletStructureCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletInformationType220)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletInformationType220.subclass:
            return PalletInformationType220.subclass(*args_, **kwargs_)
        else:
            return PalletInformationType220(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletQualifier(self): return self.PalletQualifier
    def set_PalletQualifier(self, PalletQualifier): self.PalletQualifier = PalletQualifier
    def get_PalletValue(self): return self.PalletValue
    def set_PalletValue(self, PalletValue): self.PalletValue = PalletValue
    def get_PalletTypeCode(self): return self.PalletTypeCode
    def set_PalletTypeCode(self, PalletTypeCode): self.PalletTypeCode = PalletTypeCode
    def get_PalletTiers(self): return self.PalletTiers
    def set_PalletTiers(self, PalletTiers): self.PalletTiers = PalletTiers
    def get_PalletBlocks(self): return self.PalletBlocks
    def set_PalletBlocks(self, PalletBlocks): self.PalletBlocks = PalletBlocks
    def get_UnitWeight(self): return self.UnitWeight
    def set_UnitWeight(self, UnitWeight): self.UnitWeight = UnitWeight
    def get_UnitWeightUOM(self): return self.UnitWeightUOM
    def set_UnitWeightUOM(self, UnitWeightUOM): self.UnitWeightUOM = UnitWeightUOM
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PalletWeight(self): return self.PalletWeight
    def set_PalletWeight(self, PalletWeight): self.PalletWeight = PalletWeight
    def get_PalletWeightUOM(self): return self.PalletWeightUOM
    def set_PalletWeightUOM(self, PalletWeightUOM): self.PalletWeightUOM = PalletWeightUOM
    def get_PalletVolume(self): return self.PalletVolume
    def set_PalletVolume(self, PalletVolume): self.PalletVolume = PalletVolume
    def get_PalletVolumeUOM(self): return self.PalletVolumeUOM
    def set_PalletVolumeUOM(self, PalletVolumeUOM): self.PalletVolumeUOM = PalletVolumeUOM
    def get_PalletExchangeCode(self): return self.PalletExchangeCode
    def set_PalletExchangeCode(self, PalletExchangeCode): self.PalletExchangeCode = PalletExchangeCode
    def get_PalletStructureCode(self): return self.PalletStructureCode
    def set_PalletStructureCode(self, PalletStructureCode): self.PalletStructureCode = PalletStructureCode
    def hasContent_(self):
        if (
            self.PalletQualifier is not None or
            self.PalletValue is not None or
            self.PalletTypeCode is not None or
            self.PalletTiers is not None or
            self.PalletBlocks is not None or
            self.UnitWeight is not None or
            self.UnitWeightUOM is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.UnitOfMeasure is not None or
            self.WeightQualifier is not None or
            self.PalletWeight is not None or
            self.PalletWeightUOM is not None or
            self.PalletVolume is not None or
            self.PalletVolumeUOM is not None or
            self.PalletExchangeCode is not None or
            self.PalletStructureCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PalletInformationType220', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletInformationType220')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PalletInformationType220', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PalletInformationType220'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PalletInformationType220', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletQualifier is not None:
            self.PalletQualifier.export(outfile, level, namespace_, name_='PalletQualifier', pretty_print=pretty_print)
        if self.PalletValue is not None:
            self.PalletValue.export(outfile, level, namespace_, name_='PalletValue', pretty_print=pretty_print)
        if self.PalletTypeCode is not None:
            self.PalletTypeCode.export(outfile, level, namespace_, name_='PalletTypeCode', pretty_print=pretty_print)
        if self.PalletTiers is not None:
            self.PalletTiers.export(outfile, level, namespace_, name_='PalletTiers', pretty_print=pretty_print)
        if self.PalletBlocks is not None:
            self.PalletBlocks.export(outfile, level, namespace_, name_='PalletBlocks', pretty_print=pretty_print)
        if self.UnitWeight is not None:
            self.UnitWeight.export(outfile, level, namespace_, name_='UnitWeight', pretty_print=pretty_print)
        if self.UnitWeightUOM is not None:
            self.UnitWeightUOM.export(outfile, level, namespace_, name_='UnitWeightUOM', pretty_print=pretty_print)
        if self.Length is not None:
            self.Length.export(outfile, level, namespace_, name_='Length', pretty_print=pretty_print)
        if self.Width is not None:
            self.Width.export(outfile, level, namespace_, name_='Width', pretty_print=pretty_print)
        if self.Height is not None:
            self.Height.export(outfile, level, namespace_, name_='Height', pretty_print=pretty_print)
        if self.UnitOfMeasure is not None:
            self.UnitOfMeasure.export(outfile, level, namespace_, name_='UnitOfMeasure', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PalletWeight is not None:
            self.PalletWeight.export(outfile, level, namespace_, name_='PalletWeight', pretty_print=pretty_print)
        if self.PalletWeightUOM is not None:
            self.PalletWeightUOM.export(outfile, level, namespace_, name_='PalletWeightUOM', pretty_print=pretty_print)
        if self.PalletVolume is not None:
            self.PalletVolume.export(outfile, level, namespace_, name_='PalletVolume', pretty_print=pretty_print)
        if self.PalletVolumeUOM is not None:
            self.PalletVolumeUOM.export(outfile, level, namespace_, name_='PalletVolumeUOM', pretty_print=pretty_print)
        if self.PalletExchangeCode is not None:
            self.PalletExchangeCode.export(outfile, level, namespace_, name_='PalletExchangeCode', pretty_print=pretty_print)
        if self.PalletStructureCode is not None:
            self.PalletStructureCode.export(outfile, level, namespace_, name_='PalletStructureCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletQualifier = obj_
            obj_.original_tagname_ = 'PalletQualifier'
        elif nodeName_ == 'PalletValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletValue = obj_
            obj_.original_tagname_ = 'PalletValue'
        elif nodeName_ == 'PalletTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTypeCode = obj_
            obj_.original_tagname_ = 'PalletTypeCode'
        elif nodeName_ == 'PalletTiers':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletTiers = obj_
            obj_.original_tagname_ = 'PalletTiers'
        elif nodeName_ == 'PalletBlocks':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletBlocks = obj_
            obj_.original_tagname_ = 'PalletBlocks'
        elif nodeName_ == 'UnitWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeight = obj_
            obj_.original_tagname_ = 'UnitWeight'
        elif nodeName_ == 'UnitWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitWeightUOM = obj_
            obj_.original_tagname_ = 'UnitWeightUOM'
        elif nodeName_ == 'Length':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Length = obj_
            obj_.original_tagname_ = 'Length'
        elif nodeName_ == 'Width':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Width = obj_
            obj_.original_tagname_ = 'Width'
        elif nodeName_ == 'Height':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Height = obj_
            obj_.original_tagname_ = 'Height'
        elif nodeName_ == 'UnitOfMeasure':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitOfMeasure = obj_
            obj_.original_tagname_ = 'UnitOfMeasure'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PalletWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'PalletWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletWeightUOM = obj_
            obj_.original_tagname_ = 'PalletWeightUOM'
        elif nodeName_ == 'PalletVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolume = obj_
            obj_.original_tagname_ = 'PalletVolume'
        elif nodeName_ == 'PalletVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletVolumeUOM = obj_
            obj_.original_tagname_ = 'PalletVolumeUOM'
        elif nodeName_ == 'PalletExchangeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletExchangeCode = obj_
            obj_.original_tagname_ = 'PalletExchangeCode'
        elif nodeName_ == 'PalletStructureCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PalletStructureCode = obj_
            obj_.original_tagname_ = 'PalletStructureCode'
# end class PalletInformationType220


class DateType221(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType221)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType221.subclass:
            return DateType221.subclass(*args_, **kwargs_)
        else:
            return DateType221(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType221', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType221')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType221', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType221'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType221', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType221


class ReferenceType222(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType222)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType222.subclass:
            return ReferenceType222.subclass(*args_, **kwargs_)
        else:
            return ReferenceType222(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType222', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType222')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType222', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType222'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType222', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType223.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType222


class ReferenceIDsType223(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType223)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType223.subclass:
            return ReferenceIDsType223.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType223(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType223', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType223')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType223', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType223'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType223', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType223


class NotesType224(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType224)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType224.subclass:
            return NotesType224.subclass(*args_, **kwargs_)
        else:
            return NotesType224(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType224', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType224')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType224', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType224'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType224', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType224


class AddressType225(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType225)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType225.subclass:
            return AddressType225.subclass(*args_, **kwargs_)
        else:
            return AddressType225(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType225', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType225')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType225', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType225'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType225', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType226.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType228.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType230.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType225


class ReferenceType226(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType226)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType226.subclass:
            return ReferenceType226.subclass(*args_, **kwargs_)
        else:
            return ReferenceType226(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType226', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType226')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType226', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType226'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType226', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType227.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType226


class ReferenceIDsType227(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType227)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType227.subclass:
            return ReferenceIDsType227.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType227(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType227', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType227')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType227', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType227'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType227', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType227


class ContactType228(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType228)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType228.subclass:
            return ContactType228.subclass(*args_, **kwargs_)
        else:
            return ContactType228(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType228', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType228')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType228', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType228'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType228', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType229.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType228


class AdditionalContactDetailsType229(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType229)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType229.subclass:
            return AdditionalContactDetailsType229.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType229(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType229', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType229')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType229', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType229'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType229', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType229


class DateType230(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType230)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType230.subclass:
            return DateType230.subclass(*args_, **kwargs_)
        else:
            return DateType230(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType230', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType230')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType230', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType230'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType230', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType230


class TaxType231(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType231)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType231.subclass:
            return TaxType231.subclass(*args_, **kwargs_)
        else:
            return TaxType231(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType231', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType231')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType231', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType231'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType231', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType231


class ChargesAllowancesType232(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType232)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType232.subclass:
            return ChargesAllowancesType232.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType232(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType232', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType232')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType232', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType232'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType232', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType233.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType232


class TaxType233(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType233)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType233.subclass:
            return TaxType233.subclass(*args_, **kwargs_)
        else:
            return TaxType233(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType233', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType233')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType233', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType233'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType233', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType233


class CarrierInformationType234(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType234)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType234.subclass:
            return CarrierInformationType234.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType234(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType234', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType234')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType234', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType234'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType234', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType235.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType236.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType234


class ServiceLevelCodesType235(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType235)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType235.subclass:
            return ServiceLevelCodesType235.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType235(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType235', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType235')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType235', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType235'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType235', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType235


class AddressType236(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType236)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType236.subclass:
            return AddressType236.subclass(*args_, **kwargs_)
        else:
            return AddressType236(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType236', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType236')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType236', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType236'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType236', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType237.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType236


class DateType237(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType237)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType237.subclass:
            return DateType237.subclass(*args_, **kwargs_)
        else:
            return DateType237(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType237', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType237')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType237', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType237'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType237', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType237


class PackagingType238(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, PackagingCharacteristicCode=None, AgencyQualifierCode=None, PackagingDescriptionCode=None, PackagingDescription=None, UnitLoadOptionCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.PackagingCharacteristicCode = PackagingCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.PackagingDescriptionCode = PackagingDescriptionCode
        self.PackagingDescription = PackagingDescription
        self.UnitLoadOptionCode = UnitLoadOptionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingType238)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingType238.subclass:
            return PackagingType238.subclass(*args_, **kwargs_)
        else:
            return PackagingType238(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_PackagingCharacteristicCode(self): return self.PackagingCharacteristicCode
    def set_PackagingCharacteristicCode(self, PackagingCharacteristicCode): self.PackagingCharacteristicCode = PackagingCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_PackagingDescriptionCode(self): return self.PackagingDescriptionCode
    def set_PackagingDescriptionCode(self, PackagingDescriptionCode): self.PackagingDescriptionCode = PackagingDescriptionCode
    def get_PackagingDescription(self): return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription): self.PackagingDescription = PackagingDescription
    def get_UnitLoadOptionCode(self): return self.UnitLoadOptionCode
    def set_UnitLoadOptionCode(self, UnitLoadOptionCode): self.UnitLoadOptionCode = UnitLoadOptionCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.PackagingCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.PackagingDescriptionCode is not None or
            self.PackagingDescription is not None or
            self.UnitLoadOptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PackagingType238', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackagingType238')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PackagingType238', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackagingType238'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackagingType238', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.PackagingCharacteristicCode is not None:
            self.PackagingCharacteristicCode.export(outfile, level, namespace_, name_='PackagingCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.PackagingDescriptionCode is not None:
            self.PackagingDescriptionCode.export(outfile, level, namespace_, name_='PackagingDescriptionCode', pretty_print=pretty_print)
        if self.PackagingDescription is not None:
            self.PackagingDescription.export(outfile, level, namespace_, name_='PackagingDescription', pretty_print=pretty_print)
        if self.UnitLoadOptionCode is not None:
            self.UnitLoadOptionCode.export(outfile, level, namespace_, name_='UnitLoadOptionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'PackagingCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingCharacteristicCode = obj_
            obj_.original_tagname_ = 'PackagingCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'PackagingDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescriptionCode = obj_
            obj_.original_tagname_ = 'PackagingDescriptionCode'
        elif nodeName_ == 'PackagingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'UnitLoadOptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitLoadOptionCode = obj_
            obj_.original_tagname_ = 'UnitLoadOptionCode'
# end class PackagingType238


class ShipmentLineType239(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, OrderQty=None, OrderQtyUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, ItemStatusCode=None, ShipQty=None, ShipQtyUOM=None, ShipDate=None, QtyLeftToReceive=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, Department=None, DepartmentDescription=None, Class=None, SellerDateCode=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.OrderQty = OrderQty
        self.OrderQtyUOM = OrderQtyUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.ItemStatusCode = ItemStatusCode
        self.ShipQty = ShipQty
        self.ShipQtyUOM = ShipQtyUOM
        self.ShipDate = ShipDate
        self.QtyLeftToReceive = QtyLeftToReceive
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.Department = Department
        self.DepartmentDescription = DepartmentDescription
        self.Class = Class
        self.SellerDateCode = SellerDateCode
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLineType239)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLineType239.subclass:
            return ShipmentLineType239.subclass(*args_, **kwargs_)
        else:
            return ShipmentLineType239(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_OrderQty(self): return self.OrderQty
    def set_OrderQty(self, OrderQty): self.OrderQty = OrderQty
    def get_OrderQtyUOM(self): return self.OrderQtyUOM
    def set_OrderQtyUOM(self, OrderQtyUOM): self.OrderQtyUOM = OrderQtyUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_ItemStatusCode(self): return self.ItemStatusCode
    def set_ItemStatusCode(self, ItemStatusCode): self.ItemStatusCode = ItemStatusCode
    def get_ShipQty(self): return self.ShipQty
    def set_ShipQty(self, ShipQty): self.ShipQty = ShipQty
    def get_ShipQtyUOM(self): return self.ShipQtyUOM
    def set_ShipQtyUOM(self, ShipQtyUOM): self.ShipQtyUOM = ShipQtyUOM
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_QtyLeftToReceive(self): return self.QtyLeftToReceive
    def set_QtyLeftToReceive(self, QtyLeftToReceive): self.QtyLeftToReceive = QtyLeftToReceive
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_Department(self): return self.Department
    def set_Department(self, Department): self.Department = Department
    def get_DepartmentDescription(self): return self.DepartmentDescription
    def set_DepartmentDescription(self, DepartmentDescription): self.DepartmentDescription = DepartmentDescription
    def get_Class(self): return self.Class
    def set_Class(self, Class): self.Class = Class
    def get_SellerDateCode(self): return self.SellerDateCode
    def set_SellerDateCode(self, SellerDateCode): self.SellerDateCode = SellerDateCode
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.OrderQty is not None or
            self.OrderQtyUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.ItemStatusCode is not None or
            self.ShipQty is not None or
            self.ShipQtyUOM is not None or
            self.ShipDate is not None or
            self.QtyLeftToReceive is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.Department is not None or
            self.DepartmentDescription is not None or
            self.Class is not None or
            self.SellerDateCode is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ShipmentLineType239', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentLineType239')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ShipmentLineType239', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentLineType239'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentLineType239', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.OrderQty is not None:
            self.OrderQty.export(outfile, level, namespace_, name_='OrderQty', pretty_print=pretty_print)
        if self.OrderQtyUOM is not None:
            self.OrderQtyUOM.export(outfile, level, namespace_, name_='OrderQtyUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.ItemStatusCode is not None:
            self.ItemStatusCode.export(outfile, level, namespace_, name_='ItemStatusCode', pretty_print=pretty_print)
        if self.ShipQty is not None:
            self.ShipQty.export(outfile, level, namespace_, name_='ShipQty', pretty_print=pretty_print)
        if self.ShipQtyUOM is not None:
            self.ShipQtyUOM.export(outfile, level, namespace_, name_='ShipQtyUOM', pretty_print=pretty_print)
        if self.ShipDate is not None:
            self.ShipDate.export(outfile, level, namespace_, name_='ShipDate', pretty_print=pretty_print)
        if self.QtyLeftToReceive is not None:
            self.QtyLeftToReceive.export(outfile, level, namespace_, name_='QtyLeftToReceive', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.Department is not None:
            self.Department.export(outfile, level, namespace_, name_='Department', pretty_print=pretty_print)
        if self.DepartmentDescription is not None:
            self.DepartmentDescription.export(outfile, level, namespace_, name_='DepartmentDescription', pretty_print=pretty_print)
        if self.Class is not None:
            self.Class.export(outfile, level, namespace_, name_='Class', pretty_print=pretty_print)
        if self.SellerDateCode is not None:
            self.SellerDateCode.export(outfile, level, namespace_, name_='SellerDateCode', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType240.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'OrderQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQty = obj_
            obj_.original_tagname_ = 'OrderQty'
        elif nodeName_ == 'OrderQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OrderQtyUOM = obj_
            obj_.original_tagname_ = 'OrderQtyUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'ItemStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemStatusCode = obj_
            obj_.original_tagname_ = 'ItemStatusCode'
        elif nodeName_ == 'ShipQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQty = obj_
            obj_.original_tagname_ = 'ShipQty'
        elif nodeName_ == 'ShipQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipQtyUOM = obj_
            obj_.original_tagname_ = 'ShipQtyUOM'
        elif nodeName_ == 'ShipDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ShipDate = obj_
            obj_.original_tagname_ = 'ShipDate'
        elif nodeName_ == 'QtyLeftToReceive':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyLeftToReceive = obj_
            obj_.original_tagname_ = 'QtyLeftToReceive'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'Department':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Department = obj_
            obj_.original_tagname_ = 'Department'
        elif nodeName_ == 'DepartmentDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DepartmentDescription = obj_
            obj_.original_tagname_ = 'DepartmentDescription'
        elif nodeName_ == 'Class':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Class = obj_
            obj_.original_tagname_ = 'Class'
        elif nodeName_ == 'SellerDateCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SellerDateCode = obj_
            obj_.original_tagname_ = 'SellerDateCode'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType241.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class ShipmentLineType239


class ProductIDType240(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType240)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType240.subclass:
            return ProductIDType240.subclass(*args_, **kwargs_)
        else:
            return ProductIDType240(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType240', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType240')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType240', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType240'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType240', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType240


class NRFStandardColorAndSizeType241(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType241)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType241.subclass:
            return NRFStandardColorAndSizeType241.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType241(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType241', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType241')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType241', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType241'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType241', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType241


class PhysicalDetailsType242(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackQualifier=None, PackValue=None, PackSize=None, PackUOM=None, PackingMedium=None, PackingMaterial=None, WeightQualifier=None, PackWeight=None, PackWeightUOM=None, PackVolume=None, PackVolumeUOM=None, PackLength=None, PackWidth=None, PackHeight=None, PackDimensionUOM=None, Description=None, SurfaceLayerPositionCode=None, AssignedID=None):
        self.original_tagname_ = None
        self.PackQualifier = PackQualifier
        self.PackValue = PackValue
        self.PackSize = PackSize
        self.PackUOM = PackUOM
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.WeightQualifier = WeightQualifier
        self.PackWeight = PackWeight
        self.PackWeightUOM = PackWeightUOM
        self.PackVolume = PackVolume
        self.PackVolumeUOM = PackVolumeUOM
        self.PackLength = PackLength
        self.PackWidth = PackWidth
        self.PackHeight = PackHeight
        self.PackDimensionUOM = PackDimensionUOM
        self.Description = Description
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.AssignedID = AssignedID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhysicalDetailsType242)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhysicalDetailsType242.subclass:
            return PhysicalDetailsType242.subclass(*args_, **kwargs_)
        else:
            return PhysicalDetailsType242(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackQualifier(self): return self.PackQualifier
    def set_PackQualifier(self, PackQualifier): self.PackQualifier = PackQualifier
    def get_PackValue(self): return self.PackValue
    def set_PackValue(self, PackValue): self.PackValue = PackValue
    def get_PackSize(self): return self.PackSize
    def set_PackSize(self, PackSize): self.PackSize = PackSize
    def get_PackUOM(self): return self.PackUOM
    def set_PackUOM(self, PackUOM): self.PackUOM = PackUOM
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_WeightQualifier(self): return self.WeightQualifier
    def set_WeightQualifier(self, WeightQualifier): self.WeightQualifier = WeightQualifier
    def get_PackWeight(self): return self.PackWeight
    def set_PackWeight(self, PackWeight): self.PackWeight = PackWeight
    def get_PackWeightUOM(self): return self.PackWeightUOM
    def set_PackWeightUOM(self, PackWeightUOM): self.PackWeightUOM = PackWeightUOM
    def get_PackVolume(self): return self.PackVolume
    def set_PackVolume(self, PackVolume): self.PackVolume = PackVolume
    def get_PackVolumeUOM(self): return self.PackVolumeUOM
    def set_PackVolumeUOM(self, PackVolumeUOM): self.PackVolumeUOM = PackVolumeUOM
    def get_PackLength(self): return self.PackLength
    def set_PackLength(self, PackLength): self.PackLength = PackLength
    def get_PackWidth(self): return self.PackWidth
    def set_PackWidth(self, PackWidth): self.PackWidth = PackWidth
    def get_PackHeight(self): return self.PackHeight
    def set_PackHeight(self, PackHeight): self.PackHeight = PackHeight
    def get_PackDimensionUOM(self): return self.PackDimensionUOM
    def set_PackDimensionUOM(self, PackDimensionUOM): self.PackDimensionUOM = PackDimensionUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def hasContent_(self):
        if (
            self.PackQualifier is not None or
            self.PackValue is not None or
            self.PackSize is not None or
            self.PackUOM is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.WeightQualifier is not None or
            self.PackWeight is not None or
            self.PackWeightUOM is not None or
            self.PackVolume is not None or
            self.PackVolumeUOM is not None or
            self.PackLength is not None or
            self.PackWidth is not None or
            self.PackHeight is not None or
            self.PackDimensionUOM is not None or
            self.Description is not None or
            self.SurfaceLayerPositionCode is not None or
            self.AssignedID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PhysicalDetailsType242', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhysicalDetailsType242')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PhysicalDetailsType242', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhysicalDetailsType242'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhysicalDetailsType242', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackQualifier is not None:
            self.PackQualifier.export(outfile, level, namespace_, name_='PackQualifier', pretty_print=pretty_print)
        if self.PackValue is not None:
            self.PackValue.export(outfile, level, namespace_, name_='PackValue', pretty_print=pretty_print)
        if self.PackSize is not None:
            self.PackSize.export(outfile, level, namespace_, name_='PackSize', pretty_print=pretty_print)
        if self.PackUOM is not None:
            self.PackUOM.export(outfile, level, namespace_, name_='PackUOM', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.WeightQualifier is not None:
            self.WeightQualifier.export(outfile, level, namespace_, name_='WeightQualifier', pretty_print=pretty_print)
        if self.PackWeight is not None:
            self.PackWeight.export(outfile, level, namespace_, name_='PackWeight', pretty_print=pretty_print)
        if self.PackWeightUOM is not None:
            self.PackWeightUOM.export(outfile, level, namespace_, name_='PackWeightUOM', pretty_print=pretty_print)
        if self.PackVolume is not None:
            self.PackVolume.export(outfile, level, namespace_, name_='PackVolume', pretty_print=pretty_print)
        if self.PackVolumeUOM is not None:
            self.PackVolumeUOM.export(outfile, level, namespace_, name_='PackVolumeUOM', pretty_print=pretty_print)
        if self.PackLength is not None:
            self.PackLength.export(outfile, level, namespace_, name_='PackLength', pretty_print=pretty_print)
        if self.PackWidth is not None:
            self.PackWidth.export(outfile, level, namespace_, name_='PackWidth', pretty_print=pretty_print)
        if self.PackHeight is not None:
            self.PackHeight.export(outfile, level, namespace_, name_='PackHeight', pretty_print=pretty_print)
        if self.PackDimensionUOM is not None:
            self.PackDimensionUOM.export(outfile, level, namespace_, name_='PackDimensionUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackQualifier = obj_
            obj_.original_tagname_ = 'PackQualifier'
        elif nodeName_ == 'PackValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackValue = obj_
            obj_.original_tagname_ = 'PackValue'
        elif nodeName_ == 'PackSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackSize = obj_
            obj_.original_tagname_ = 'PackSize'
        elif nodeName_ == 'PackUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackUOM = obj_
            obj_.original_tagname_ = 'PackUOM'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'WeightQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.WeightQualifier = obj_
            obj_.original_tagname_ = 'WeightQualifier'
        elif nodeName_ == 'PackWeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeight = obj_
            obj_.original_tagname_ = 'PackWeight'
        elif nodeName_ == 'PackWeightUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWeightUOM = obj_
            obj_.original_tagname_ = 'PackWeightUOM'
        elif nodeName_ == 'PackVolume':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolume = obj_
            obj_.original_tagname_ = 'PackVolume'
        elif nodeName_ == 'PackVolumeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackVolumeUOM = obj_
            obj_.original_tagname_ = 'PackVolumeUOM'
        elif nodeName_ == 'PackLength':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackLength = obj_
            obj_.original_tagname_ = 'PackLength'
        elif nodeName_ == 'PackWidth':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackWidth = obj_
            obj_.original_tagname_ = 'PackWidth'
        elif nodeName_ == 'PackHeight':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackHeight = obj_
            obj_.original_tagname_ = 'PackHeight'
        elif nodeName_ == 'PackDimensionUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackDimensionUOM = obj_
            obj_.original_tagname_ = 'PackDimensionUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
# end class PhysicalDetailsType242


class CarrierSpecialHandlingDetailType243(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecialHandlingCode=None, HazardousMaterialCode=None, HazardousMaterialClass=None, Description=None, YesOrNoResponse=None):
        self.original_tagname_ = None
        self.SpecialHandlingCode = SpecialHandlingCode
        self.HazardousMaterialCode = HazardousMaterialCode
        self.HazardousMaterialClass = HazardousMaterialClass
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierSpecialHandlingDetailType243)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierSpecialHandlingDetailType243.subclass:
            return CarrierSpecialHandlingDetailType243.subclass(*args_, **kwargs_)
        else:
            return CarrierSpecialHandlingDetailType243(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialHandlingCode(self): return self.SpecialHandlingCode
    def set_SpecialHandlingCode(self, SpecialHandlingCode): self.SpecialHandlingCode = SpecialHandlingCode
    def get_HazardousMaterialCode(self): return self.HazardousMaterialCode
    def set_HazardousMaterialCode(self, HazardousMaterialCode): self.HazardousMaterialCode = HazardousMaterialCode
    def get_HazardousMaterialClass(self): return self.HazardousMaterialClass
    def set_HazardousMaterialClass(self, HazardousMaterialClass): self.HazardousMaterialClass = HazardousMaterialClass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def hasContent_(self):
        if (
            self.SpecialHandlingCode is not None or
            self.HazardousMaterialCode is not None or
            self.HazardousMaterialClass is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType243', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierSpecialHandlingDetailType243')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierSpecialHandlingDetailType243', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierSpecialHandlingDetailType243'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierSpecialHandlingDetailType243', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialHandlingCode is not None:
            self.SpecialHandlingCode.export(outfile, level, namespace_, name_='SpecialHandlingCode', pretty_print=pretty_print)
        if self.HazardousMaterialCode is not None:
            self.HazardousMaterialCode.export(outfile, level, namespace_, name_='HazardousMaterialCode', pretty_print=pretty_print)
        if self.HazardousMaterialClass is not None:
            self.HazardousMaterialClass.export(outfile, level, namespace_, name_='HazardousMaterialClass', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SpecialHandlingCode = obj_
            obj_.original_tagname_ = 'SpecialHandlingCode'
        elif nodeName_ == 'HazardousMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialCode = obj_
            obj_.original_tagname_ = 'HazardousMaterialCode'
        elif nodeName_ == 'HazardousMaterialClass':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.HazardousMaterialClass = obj_
            obj_.original_tagname_ = 'HazardousMaterialClass'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
# end class CarrierSpecialHandlingDetailType243


class CarrierInformationType244(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, CarrierTransMethodCode=None, CarrierAlphaCode=None, CarrierRouting=None, EquipmentDescriptionCode=None, CarrierEquipmentInitial=None, CarrierEquipmentNumber=None, EquipmentType=None, SealStatusCode=None, SealNumber=None, OwnershipCode=None, RoutingSequenceCode=None, TransitDirectionCode=None, TransitTimeQual=None, TransitTime=None, ServiceLevelCodes=None, Address=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.CarrierTransMethodCode = CarrierTransMethodCode
        self.CarrierAlphaCode = CarrierAlphaCode
        self.CarrierRouting = CarrierRouting
        self.EquipmentDescriptionCode = EquipmentDescriptionCode
        self.CarrierEquipmentInitial = CarrierEquipmentInitial
        self.CarrierEquipmentNumber = CarrierEquipmentNumber
        self.EquipmentType = EquipmentType
        self.SealStatusCode = SealStatusCode
        self.SealNumber = SealNumber
        self.OwnershipCode = OwnershipCode
        self.RoutingSequenceCode = RoutingSequenceCode
        self.TransitDirectionCode = TransitDirectionCode
        self.TransitTimeQual = TransitTimeQual
        self.TransitTime = TransitTime
        self.ServiceLevelCodes = ServiceLevelCodes
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierInformationType244)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierInformationType244.subclass:
            return CarrierInformationType244.subclass(*args_, **kwargs_)
        else:
            return CarrierInformationType244(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_CarrierTransMethodCode(self): return self.CarrierTransMethodCode
    def set_CarrierTransMethodCode(self, CarrierTransMethodCode): self.CarrierTransMethodCode = CarrierTransMethodCode
    def get_CarrierAlphaCode(self): return self.CarrierAlphaCode
    def set_CarrierAlphaCode(self, CarrierAlphaCode): self.CarrierAlphaCode = CarrierAlphaCode
    def get_CarrierRouting(self): return self.CarrierRouting
    def set_CarrierRouting(self, CarrierRouting): self.CarrierRouting = CarrierRouting
    def get_EquipmentDescriptionCode(self): return self.EquipmentDescriptionCode
    def set_EquipmentDescriptionCode(self, EquipmentDescriptionCode): self.EquipmentDescriptionCode = EquipmentDescriptionCode
    def get_CarrierEquipmentInitial(self): return self.CarrierEquipmentInitial
    def set_CarrierEquipmentInitial(self, CarrierEquipmentInitial): self.CarrierEquipmentInitial = CarrierEquipmentInitial
    def get_CarrierEquipmentNumber(self): return self.CarrierEquipmentNumber
    def set_CarrierEquipmentNumber(self, CarrierEquipmentNumber): self.CarrierEquipmentNumber = CarrierEquipmentNumber
    def get_EquipmentType(self): return self.EquipmentType
    def set_EquipmentType(self, EquipmentType): self.EquipmentType = EquipmentType
    def get_SealStatusCode(self): return self.SealStatusCode
    def set_SealStatusCode(self, SealStatusCode): self.SealStatusCode = SealStatusCode
    def get_SealNumber(self): return self.SealNumber
    def set_SealNumber(self, SealNumber): self.SealNumber = SealNumber
    def get_OwnershipCode(self): return self.OwnershipCode
    def set_OwnershipCode(self, OwnershipCode): self.OwnershipCode = OwnershipCode
    def get_RoutingSequenceCode(self): return self.RoutingSequenceCode
    def set_RoutingSequenceCode(self, RoutingSequenceCode): self.RoutingSequenceCode = RoutingSequenceCode
    def get_TransitDirectionCode(self): return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode): self.TransitDirectionCode = TransitDirectionCode
    def get_TransitTimeQual(self): return self.TransitTimeQual
    def set_TransitTimeQual(self, TransitTimeQual): self.TransitTimeQual = TransitTimeQual
    def get_TransitTime(self): return self.TransitTime
    def set_TransitTime(self, TransitTime): self.TransitTime = TransitTime
    def get_ServiceLevelCodes(self): return self.ServiceLevelCodes
    def set_ServiceLevelCodes(self, ServiceLevelCodes): self.ServiceLevelCodes = ServiceLevelCodes
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.CarrierTransMethodCode is not None or
            self.CarrierAlphaCode is not None or
            self.CarrierRouting is not None or
            self.EquipmentDescriptionCode is not None or
            self.CarrierEquipmentInitial is not None or
            self.CarrierEquipmentNumber is not None or
            self.EquipmentType is not None or
            self.SealStatusCode is not None or
            self.SealNumber is not None or
            self.OwnershipCode is not None or
            self.RoutingSequenceCode is not None or
            self.TransitDirectionCode is not None or
            self.TransitTimeQual is not None or
            self.TransitTime is not None or
            self.ServiceLevelCodes is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CarrierInformationType244', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CarrierInformationType244')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CarrierInformationType244', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CarrierInformationType244'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CarrierInformationType244', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_, name_='StatusCode', pretty_print=pretty_print)
        if self.CarrierTransMethodCode is not None:
            self.CarrierTransMethodCode.export(outfile, level, namespace_, name_='CarrierTransMethodCode', pretty_print=pretty_print)
        if self.CarrierAlphaCode is not None:
            self.CarrierAlphaCode.export(outfile, level, namespace_, name_='CarrierAlphaCode', pretty_print=pretty_print)
        if self.CarrierRouting is not None:
            self.CarrierRouting.export(outfile, level, namespace_, name_='CarrierRouting', pretty_print=pretty_print)
        if self.EquipmentDescriptionCode is not None:
            self.EquipmentDescriptionCode.export(outfile, level, namespace_, name_='EquipmentDescriptionCode', pretty_print=pretty_print)
        if self.CarrierEquipmentInitial is not None:
            self.CarrierEquipmentInitial.export(outfile, level, namespace_, name_='CarrierEquipmentInitial', pretty_print=pretty_print)
        if self.CarrierEquipmentNumber is not None:
            self.CarrierEquipmentNumber.export(outfile, level, namespace_, name_='CarrierEquipmentNumber', pretty_print=pretty_print)
        if self.EquipmentType is not None:
            self.EquipmentType.export(outfile, level, namespace_, name_='EquipmentType', pretty_print=pretty_print)
        if self.SealStatusCode is not None:
            self.SealStatusCode.export(outfile, level, namespace_, name_='SealStatusCode', pretty_print=pretty_print)
        if self.SealNumber is not None:
            self.SealNumber.export(outfile, level, namespace_, name_='SealNumber', pretty_print=pretty_print)
        if self.OwnershipCode is not None:
            self.OwnershipCode.export(outfile, level, namespace_, name_='OwnershipCode', pretty_print=pretty_print)
        if self.RoutingSequenceCode is not None:
            self.RoutingSequenceCode.export(outfile, level, namespace_, name_='RoutingSequenceCode', pretty_print=pretty_print)
        if self.TransitDirectionCode is not None:
            self.TransitDirectionCode.export(outfile, level, namespace_, name_='TransitDirectionCode', pretty_print=pretty_print)
        if self.TransitTimeQual is not None:
            self.TransitTimeQual.export(outfile, level, namespace_, name_='TransitTimeQual', pretty_print=pretty_print)
        if self.TransitTime is not None:
            self.TransitTime.export(outfile, level, namespace_, name_='TransitTime', pretty_print=pretty_print)
        if self.ServiceLevelCodes is not None:
            self.ServiceLevelCodes.export(outfile, level, namespace_, name_='ServiceLevelCodes', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'CarrierTransMethodCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierTransMethodCode = obj_
            obj_.original_tagname_ = 'CarrierTransMethodCode'
        elif nodeName_ == 'CarrierAlphaCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierAlphaCode = obj_
            obj_.original_tagname_ = 'CarrierAlphaCode'
        elif nodeName_ == 'CarrierRouting':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierRouting = obj_
            obj_.original_tagname_ = 'CarrierRouting'
        elif nodeName_ == 'EquipmentDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentDescriptionCode = obj_
            obj_.original_tagname_ = 'EquipmentDescriptionCode'
        elif nodeName_ == 'CarrierEquipmentInitial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentInitial = obj_
            obj_.original_tagname_ = 'CarrierEquipmentInitial'
        elif nodeName_ == 'CarrierEquipmentNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CarrierEquipmentNumber = obj_
            obj_.original_tagname_ = 'CarrierEquipmentNumber'
        elif nodeName_ == 'EquipmentType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EquipmentType = obj_
            obj_.original_tagname_ = 'EquipmentType'
        elif nodeName_ == 'SealStatusCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealStatusCode = obj_
            obj_.original_tagname_ = 'SealStatusCode'
        elif nodeName_ == 'SealNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SealNumber = obj_
            obj_.original_tagname_ = 'SealNumber'
        elif nodeName_ == 'OwnershipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OwnershipCode = obj_
            obj_.original_tagname_ = 'OwnershipCode'
        elif nodeName_ == 'RoutingSequenceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RoutingSequenceCode = obj_
            obj_.original_tagname_ = 'RoutingSequenceCode'
        elif nodeName_ == 'TransitDirectionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitDirectionCode = obj_
            obj_.original_tagname_ = 'TransitDirectionCode'
        elif nodeName_ == 'TransitTimeQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTimeQual = obj_
            obj_.original_tagname_ = 'TransitTimeQual'
        elif nodeName_ == 'TransitTime':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TransitTime = obj_
            obj_.original_tagname_ = 'TransitTime'
        elif nodeName_ == 'ServiceLevelCodes':
            obj_ = ServiceLevelCodesType245.factory()
            obj_.build(child_)
            self.ServiceLevelCodes = obj_
            obj_.original_tagname_ = 'ServiceLevelCodes'
        elif nodeName_ == 'Address':
            obj_ = AddressType246.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CarrierInformationType244


class ServiceLevelCodesType245(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ServiceLevelCode=None):
        self.original_tagname_ = None
        self.ServiceLevelCode = ServiceLevelCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceLevelCodesType245)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceLevelCodesType245.subclass:
            return ServiceLevelCodesType245.subclass(*args_, **kwargs_)
        else:
            return ServiceLevelCodesType245(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceLevelCode(self): return self.ServiceLevelCode
    def set_ServiceLevelCode(self, ServiceLevelCode): self.ServiceLevelCode = ServiceLevelCode
    def hasContent_(self):
        if (
            self.ServiceLevelCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ServiceLevelCodesType245', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceLevelCodesType245')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ServiceLevelCodesType245', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceLevelCodesType245'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceLevelCodesType245', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceLevelCode is not None:
            self.ServiceLevelCode.export(outfile, level, namespace_, name_='ServiceLevelCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceLevelCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ServiceLevelCode = obj_
            obj_.original_tagname_ = 'ServiceLevelCode'
# end class ServiceLevelCodesType245


class AddressType246(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType246)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType246.subclass:
            return AddressType246.subclass(*args_, **kwargs_)
        else:
            return AddressType246(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType246', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType246')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType246', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType246'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType246', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Date':
            obj_ = DateType247.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType246


class DateType247(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType247)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType247.subclass:
            return DateType247.subclass(*args_, **kwargs_)
        else:
            return DateType247(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType247', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType247')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType247', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType247'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType247', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType247


class MeasurementsType248(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType248)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType248.subclass:
            return MeasurementsType248.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType248(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType248', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType248')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType248', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType248'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType248', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType248


class PriceInformationType249(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType249)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType249.subclass:
            return PriceInformationType249.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType249(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType249', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType249')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType249', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType249'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType249', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType249


class ProductOrItemDescriptionType250(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType250)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType250.subclass:
            return ProductOrItemDescriptionType250.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType250(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType250', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType250')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType250', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType250'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType250', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType250


class MasterItemAttributeType251(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttribute=None):
        self.original_tagname_ = None
        self.ItemAttribute = ItemAttribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MasterItemAttributeType251)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MasterItemAttributeType251.subclass:
            return MasterItemAttributeType251.subclass(*args_, **kwargs_)
        else:
            return MasterItemAttributeType251(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttribute(self): return self.ItemAttribute
    def set_ItemAttribute(self, ItemAttribute): self.ItemAttribute = ItemAttribute
    def hasContent_(self):
        if (
            self.ItemAttribute is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MasterItemAttributeType251', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MasterItemAttributeType251')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MasterItemAttributeType251', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MasterItemAttributeType251'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MasterItemAttributeType251', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttribute is not None:
            self.ItemAttribute.export(outfile, level, namespace_, name_='ItemAttribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttribute':
            obj_ = ItemAttributeType252.factory()
            obj_.build(child_)
            self.ItemAttribute = obj_
            obj_.original_tagname_ = 'ItemAttribute'
# end class MasterItemAttributeType251


class ItemAttributeType252(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemAttributeQualifier=None, Value=None, ValueUOM=None, Description=None, YesOrNoResponse=None, Measurements=None):
        self.original_tagname_ = None
        self.ItemAttributeQualifier = ItemAttributeQualifier
        self.Value = Value
        self.ValueUOM = ValueUOM
        self.Description = Description
        self.YesOrNoResponse = YesOrNoResponse
        self.Measurements = Measurements
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemAttributeType252)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemAttributeType252.subclass:
            return ItemAttributeType252.subclass(*args_, **kwargs_)
        else:
            return ItemAttributeType252(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemAttributeQualifier(self): return self.ItemAttributeQualifier
    def set_ItemAttributeQualifier(self, ItemAttributeQualifier): self.ItemAttributeQualifier = ItemAttributeQualifier
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_ValueUOM(self): return self.ValueUOM
    def set_ValueUOM(self, ValueUOM): self.ValueUOM = ValueUOM
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_Measurements(self): return self.Measurements
    def set_Measurements(self, Measurements): self.Measurements = Measurements
    def hasContent_(self):
        if (
            self.ItemAttributeQualifier is not None or
            self.Value is not None or
            self.ValueUOM is not None or
            self.Description is not None or
            self.YesOrNoResponse is not None or
            self.Measurements is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemAttributeType252', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemAttributeType252')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemAttributeType252', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemAttributeType252'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemAttributeType252', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemAttributeQualifier is not None:
            self.ItemAttributeQualifier.export(outfile, level, namespace_, name_='ItemAttributeQualifier', pretty_print=pretty_print)
        if self.Value is not None:
            self.Value.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
        if self.ValueUOM is not None:
            self.ValueUOM.export(outfile, level, namespace_, name_='ValueUOM', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.Measurements is not None:
            self.Measurements.export(outfile, level, namespace_, name_='Measurements', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemAttributeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemAttributeQualifier = obj_
            obj_.original_tagname_ = 'ItemAttributeQualifier'
        elif nodeName_ == 'Value':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
        elif nodeName_ == 'ValueUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ValueUOM = obj_
            obj_.original_tagname_ = 'ValueUOM'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'Measurements':
            obj_ = MeasurementsType253.factory()
            obj_.build(child_)
            self.Measurements = obj_
            obj_.original_tagname_ = 'Measurements'
# end class ItemAttributeType252


class MeasurementsType253(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MeasurementRefIDCode=None, MeasurementQualifier=None, MeasurementValue=None, CompositeUOM=None, RangeMinimum=None, RangeMaximum=None, MeasurementSignificanceCode=None, MeasurementAttributeCode=None, SurfaceLayerPositionCode=None, IndustryCodeQualifier=None, IndustryCode=None):
        self.original_tagname_ = None
        self.MeasurementRefIDCode = MeasurementRefIDCode
        self.MeasurementQualifier = MeasurementQualifier
        self.MeasurementValue = MeasurementValue
        self.CompositeUOM = CompositeUOM
        self.RangeMinimum = RangeMinimum
        self.RangeMaximum = RangeMaximum
        self.MeasurementSignificanceCode = MeasurementSignificanceCode
        self.MeasurementAttributeCode = MeasurementAttributeCode
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.IndustryCodeQualifier = IndustryCodeQualifier
        self.IndustryCode = IndustryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MeasurementsType253)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MeasurementsType253.subclass:
            return MeasurementsType253.subclass(*args_, **kwargs_)
        else:
            return MeasurementsType253(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MeasurementRefIDCode(self): return self.MeasurementRefIDCode
    def set_MeasurementRefIDCode(self, MeasurementRefIDCode): self.MeasurementRefIDCode = MeasurementRefIDCode
    def get_MeasurementQualifier(self): return self.MeasurementQualifier
    def set_MeasurementQualifier(self, MeasurementQualifier): self.MeasurementQualifier = MeasurementQualifier
    def get_MeasurementValue(self): return self.MeasurementValue
    def set_MeasurementValue(self, MeasurementValue): self.MeasurementValue = MeasurementValue
    def get_CompositeUOM(self): return self.CompositeUOM
    def set_CompositeUOM(self, CompositeUOM): self.CompositeUOM = CompositeUOM
    def get_RangeMinimum(self): return self.RangeMinimum
    def set_RangeMinimum(self, RangeMinimum): self.RangeMinimum = RangeMinimum
    def get_RangeMaximum(self): return self.RangeMaximum
    def set_RangeMaximum(self, RangeMaximum): self.RangeMaximum = RangeMaximum
    def get_MeasurementSignificanceCode(self): return self.MeasurementSignificanceCode
    def set_MeasurementSignificanceCode(self, MeasurementSignificanceCode): self.MeasurementSignificanceCode = MeasurementSignificanceCode
    def get_MeasurementAttributeCode(self): return self.MeasurementAttributeCode
    def set_MeasurementAttributeCode(self, MeasurementAttributeCode): self.MeasurementAttributeCode = MeasurementAttributeCode
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_IndustryCodeQualifier(self): return self.IndustryCodeQualifier
    def set_IndustryCodeQualifier(self, IndustryCodeQualifier): self.IndustryCodeQualifier = IndustryCodeQualifier
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def hasContent_(self):
        if (
            self.MeasurementRefIDCode is not None or
            self.MeasurementQualifier is not None or
            self.MeasurementValue is not None or
            self.CompositeUOM is not None or
            self.RangeMinimum is not None or
            self.RangeMaximum is not None or
            self.MeasurementSignificanceCode is not None or
            self.MeasurementAttributeCode is not None or
            self.SurfaceLayerPositionCode is not None or
            self.IndustryCodeQualifier is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MeasurementsType253', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MeasurementsType253')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MeasurementsType253', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MeasurementsType253'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MeasurementsType253', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasurementRefIDCode is not None:
            self.MeasurementRefIDCode.export(outfile, level, namespace_, name_='MeasurementRefIDCode', pretty_print=pretty_print)
        if self.MeasurementQualifier is not None:
            self.MeasurementQualifier.export(outfile, level, namespace_, name_='MeasurementQualifier', pretty_print=pretty_print)
        if self.MeasurementValue is not None:
            self.MeasurementValue.export(outfile, level, namespace_, name_='MeasurementValue', pretty_print=pretty_print)
        if self.CompositeUOM is not None:
            self.CompositeUOM.export(outfile, level, namespace_, name_='CompositeUOM', pretty_print=pretty_print)
        if self.RangeMinimum is not None:
            self.RangeMinimum.export(outfile, level, namespace_, name_='RangeMinimum', pretty_print=pretty_print)
        if self.RangeMaximum is not None:
            self.RangeMaximum.export(outfile, level, namespace_, name_='RangeMaximum', pretty_print=pretty_print)
        if self.MeasurementSignificanceCode is not None:
            self.MeasurementSignificanceCode.export(outfile, level, namespace_, name_='MeasurementSignificanceCode', pretty_print=pretty_print)
        if self.MeasurementAttributeCode is not None:
            self.MeasurementAttributeCode.export(outfile, level, namespace_, name_='MeasurementAttributeCode', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.IndustryCodeQualifier is not None:
            self.IndustryCodeQualifier.export(outfile, level, namespace_, name_='IndustryCodeQualifier', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            self.IndustryCode.export(outfile, level, namespace_, name_='IndustryCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MeasurementRefIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementRefIDCode = obj_
            obj_.original_tagname_ = 'MeasurementRefIDCode'
        elif nodeName_ == 'MeasurementQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementQualifier = obj_
            obj_.original_tagname_ = 'MeasurementQualifier'
        elif nodeName_ == 'MeasurementValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementValue = obj_
            obj_.original_tagname_ = 'MeasurementValue'
        elif nodeName_ == 'CompositeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CompositeUOM = obj_
            obj_.original_tagname_ = 'CompositeUOM'
        elif nodeName_ == 'RangeMinimum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMinimum = obj_
            obj_.original_tagname_ = 'RangeMinimum'
        elif nodeName_ == 'RangeMaximum':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RangeMaximum = obj_
            obj_.original_tagname_ = 'RangeMaximum'
        elif nodeName_ == 'MeasurementSignificanceCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementSignificanceCode = obj_
            obj_.original_tagname_ = 'MeasurementSignificanceCode'
        elif nodeName_ == 'MeasurementAttributeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MeasurementAttributeCode = obj_
            obj_.original_tagname_ = 'MeasurementAttributeCode'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'IndustryCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCodeQualifier = obj_
            obj_.original_tagname_ = 'IndustryCodeQualifier'
        elif nodeName_ == 'IndustryCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.IndustryCode = obj_
            obj_.original_tagname_ = 'IndustryCode'
# end class MeasurementsType253


class DateType254(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType254)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType254.subclass:
            return DateType254.subclass(*args_, **kwargs_)
        else:
            return DateType254(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType254', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType254')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType254', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType254'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType254', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType254


class ReferenceType255(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType255)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType255.subclass:
            return ReferenceType255.subclass(*args_, **kwargs_)
        else:
            return ReferenceType255(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType255', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType255')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType255', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType255'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType255', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType256.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType255


class ReferenceIDsType256(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType256)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType256.subclass:
            return ReferenceIDsType256.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType256(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType256', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType256')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType256', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType256'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType256', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType256


class NotesType257(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType257)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType257.subclass:
            return NotesType257.subclass(*args_, **kwargs_)
        else:
            return NotesType257(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType257', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType257')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType257', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType257'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType257', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType257


class CommodityType258(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType258)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType258.subclass:
            return CommodityType258.subclass(*args_, **kwargs_)
        else:
            return CommodityType258(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType258', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType258')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType258', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType258'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType258', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType258


class AddressType259(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressTypeCode=None, LocationCodeQualifier=None, AddressLocationNumber=None, AddressName=None, AddressAlternateName=None, AddressAlternateName2=None, Address1=None, Address2=None, Address3=None, Address4=None, City=None, State=None, PostalCode=None, Country=None, LocationID=None, CountrySubDivision=None, AddressTaxIdNumber=None, AddressTaxExemptNumber=None, Reference=None, Contact=None, Date=None):
        self.original_tagname_ = None
        self.AddressTypeCode = AddressTypeCode
        self.LocationCodeQualifier = LocationCodeQualifier
        self.AddressLocationNumber = AddressLocationNumber
        self.AddressName = AddressName
        self.AddressAlternateName = AddressAlternateName
        self.AddressAlternateName2 = AddressAlternateName2
        self.Address1 = Address1
        self.Address2 = Address2
        self.Address3 = Address3
        self.Address4 = Address4
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.LocationID = LocationID
        self.CountrySubDivision = CountrySubDivision
        self.AddressTaxIdNumber = AddressTaxIdNumber
        self.AddressTaxExemptNumber = AddressTaxExemptNumber
        self.Reference = Reference
        self.Contact = Contact
        self.Date = Date
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType259)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType259.subclass:
            return AddressType259.subclass(*args_, **kwargs_)
        else:
            return AddressType259(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressTypeCode(self): return self.AddressTypeCode
    def set_AddressTypeCode(self, AddressTypeCode): self.AddressTypeCode = AddressTypeCode
    def get_LocationCodeQualifier(self): return self.LocationCodeQualifier
    def set_LocationCodeQualifier(self, LocationCodeQualifier): self.LocationCodeQualifier = LocationCodeQualifier
    def get_AddressLocationNumber(self): return self.AddressLocationNumber
    def set_AddressLocationNumber(self, AddressLocationNumber): self.AddressLocationNumber = AddressLocationNumber
    def get_AddressName(self): return self.AddressName
    def set_AddressName(self, AddressName): self.AddressName = AddressName
    def get_AddressAlternateName(self): return self.AddressAlternateName
    def set_AddressAlternateName(self, AddressAlternateName): self.AddressAlternateName = AddressAlternateName
    def get_AddressAlternateName2(self): return self.AddressAlternateName2
    def set_AddressAlternateName2(self, AddressAlternateName2): self.AddressAlternateName2 = AddressAlternateName2
    def get_Address1(self): return self.Address1
    def set_Address1(self, Address1): self.Address1 = Address1
    def get_Address2(self): return self.Address2
    def set_Address2(self, Address2): self.Address2 = Address2
    def get_Address3(self): return self.Address3
    def set_Address3(self, Address3): self.Address3 = Address3
    def get_Address4(self): return self.Address4
    def set_Address4(self, Address4): self.Address4 = Address4
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def get_CountrySubDivision(self): return self.CountrySubDivision
    def set_CountrySubDivision(self, CountrySubDivision): self.CountrySubDivision = CountrySubDivision
    def get_AddressTaxIdNumber(self): return self.AddressTaxIdNumber
    def set_AddressTaxIdNumber(self, AddressTaxIdNumber): self.AddressTaxIdNumber = AddressTaxIdNumber
    def get_AddressTaxExemptNumber(self): return self.AddressTaxExemptNumber
    def set_AddressTaxExemptNumber(self, AddressTaxExemptNumber): self.AddressTaxExemptNumber = AddressTaxExemptNumber
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def hasContent_(self):
        if (
            self.AddressTypeCode is not None or
            self.LocationCodeQualifier is not None or
            self.AddressLocationNumber is not None or
            self.AddressName is not None or
            self.AddressAlternateName is not None or
            self.AddressAlternateName2 is not None or
            self.Address1 is not None or
            self.Address2 is not None or
            self.Address3 is not None or
            self.Address4 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.LocationID is not None or
            self.CountrySubDivision is not None or
            self.AddressTaxIdNumber is not None or
            self.AddressTaxExemptNumber is not None or
            self.Reference is not None or
            self.Contact is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AddressType259', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType259')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AddressType259', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType259'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType259', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressTypeCode is not None:
            self.AddressTypeCode.export(outfile, level, namespace_, name_='AddressTypeCode', pretty_print=pretty_print)
        if self.LocationCodeQualifier is not None:
            self.LocationCodeQualifier.export(outfile, level, namespace_, name_='LocationCodeQualifier', pretty_print=pretty_print)
        if self.AddressLocationNumber is not None:
            self.AddressLocationNumber.export(outfile, level, namespace_, name_='AddressLocationNumber', pretty_print=pretty_print)
        if self.AddressName is not None:
            self.AddressName.export(outfile, level, namespace_, name_='AddressName', pretty_print=pretty_print)
        if self.AddressAlternateName is not None:
            self.AddressAlternateName.export(outfile, level, namespace_, name_='AddressAlternateName', pretty_print=pretty_print)
        if self.AddressAlternateName2 is not None:
            self.AddressAlternateName2.export(outfile, level, namespace_, name_='AddressAlternateName2', pretty_print=pretty_print)
        if self.Address1 is not None:
            self.Address1.export(outfile, level, namespace_, name_='Address1', pretty_print=pretty_print)
        if self.Address2 is not None:
            self.Address2.export(outfile, level, namespace_, name_='Address2', pretty_print=pretty_print)
        if self.Address3 is not None:
            self.Address3.export(outfile, level, namespace_, name_='Address3', pretty_print=pretty_print)
        if self.Address4 is not None:
            self.Address4.export(outfile, level, namespace_, name_='Address4', pretty_print=pretty_print)
        if self.City is not None:
            self.City.export(outfile, level, namespace_, name_='City', pretty_print=pretty_print)
        if self.State is not None:
            self.State.export(outfile, level, namespace_, name_='State', pretty_print=pretty_print)
        if self.PostalCode is not None:
            self.PostalCode.export(outfile, level, namespace_, name_='PostalCode', pretty_print=pretty_print)
        if self.Country is not None:
            self.Country.export(outfile, level, namespace_, name_='Country', pretty_print=pretty_print)
        if self.LocationID is not None:
            self.LocationID.export(outfile, level, namespace_, name_='LocationID', pretty_print=pretty_print)
        if self.CountrySubDivision is not None:
            self.CountrySubDivision.export(outfile, level, namespace_, name_='CountrySubDivision', pretty_print=pretty_print)
        if self.AddressTaxIdNumber is not None:
            self.AddressTaxIdNumber.export(outfile, level, namespace_, name_='AddressTaxIdNumber', pretty_print=pretty_print)
        if self.AddressTaxExemptNumber is not None:
            self.AddressTaxExemptNumber.export(outfile, level, namespace_, name_='AddressTaxExemptNumber', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_, name_='Contact', pretty_print=pretty_print)
        if self.Date is not None:
            self.Date.export(outfile, level, namespace_, name_='Date', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTypeCode = obj_
            obj_.original_tagname_ = 'AddressTypeCode'
        elif nodeName_ == 'LocationCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationCodeQualifier = obj_
            obj_.original_tagname_ = 'LocationCodeQualifier'
        elif nodeName_ == 'AddressLocationNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressLocationNumber = obj_
            obj_.original_tagname_ = 'AddressLocationNumber'
        elif nodeName_ == 'AddressName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressName = obj_
            obj_.original_tagname_ = 'AddressName'
        elif nodeName_ == 'AddressAlternateName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName = obj_
            obj_.original_tagname_ = 'AddressAlternateName'
        elif nodeName_ == 'AddressAlternateName2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressAlternateName2 = obj_
            obj_.original_tagname_ = 'AddressAlternateName2'
        elif nodeName_ == 'Address1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address1 = obj_
            obj_.original_tagname_ = 'Address1'
        elif nodeName_ == 'Address2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address2 = obj_
            obj_.original_tagname_ = 'Address2'
        elif nodeName_ == 'Address3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address3 = obj_
            obj_.original_tagname_ = 'Address3'
        elif nodeName_ == 'Address4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Address4 = obj_
            obj_.original_tagname_ = 'Address4'
        elif nodeName_ == 'City':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.City = obj_
            obj_.original_tagname_ = 'City'
        elif nodeName_ == 'State':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.State = obj_
            obj_.original_tagname_ = 'State'
        elif nodeName_ == 'PostalCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PostalCode = obj_
            obj_.original_tagname_ = 'PostalCode'
        elif nodeName_ == 'Country':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Country = obj_
            obj_.original_tagname_ = 'Country'
        elif nodeName_ == 'LocationID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LocationID = obj_
            obj_.original_tagname_ = 'LocationID'
        elif nodeName_ == 'CountrySubDivision':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CountrySubDivision = obj_
            obj_.original_tagname_ = 'CountrySubDivision'
        elif nodeName_ == 'AddressTaxIdNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxIdNumber = obj_
            obj_.original_tagname_ = 'AddressTaxIdNumber'
        elif nodeName_ == 'AddressTaxExemptNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AddressTaxExemptNumber = obj_
            obj_.original_tagname_ = 'AddressTaxExemptNumber'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType260.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Contact':
            obj_ = ContactType262.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Date':
            obj_ = DateType264.factory()
            obj_.build(child_)
            self.Date = obj_
            obj_.original_tagname_ = 'Date'
# end class AddressType259


class ReferenceType260(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType260)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType260.subclass:
            return ReferenceType260.subclass(*args_, **kwargs_)
        else:
            return ReferenceType260(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType260', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType260')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType260', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType260'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType260', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType261.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType260


class ReferenceIDsType261(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType261)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType261.subclass:
            return ReferenceIDsType261.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType261(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType261', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType261')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType261', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType261'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType261', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType261


class ContactType262(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactTypeCode=None, ContactName=None, PrimaryPhone=None, PrimaryFax=None, PrimaryEmail=None, AdditionalContactDetails=None, ContactReference=None):
        self.original_tagname_ = None
        self.ContactTypeCode = ContactTypeCode
        self.ContactName = ContactName
        self.PrimaryPhone = PrimaryPhone
        self.PrimaryFax = PrimaryFax
        self.PrimaryEmail = PrimaryEmail
        self.AdditionalContactDetails = AdditionalContactDetails
        self.ContactReference = ContactReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType262)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType262.subclass:
            return ContactType262.subclass(*args_, **kwargs_)
        else:
            return ContactType262(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactTypeCode(self): return self.ContactTypeCode
    def set_ContactTypeCode(self, ContactTypeCode): self.ContactTypeCode = ContactTypeCode
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PrimaryPhone(self): return self.PrimaryPhone
    def set_PrimaryPhone(self, PrimaryPhone): self.PrimaryPhone = PrimaryPhone
    def get_PrimaryFax(self): return self.PrimaryFax
    def set_PrimaryFax(self, PrimaryFax): self.PrimaryFax = PrimaryFax
    def get_PrimaryEmail(self): return self.PrimaryEmail
    def set_PrimaryEmail(self, PrimaryEmail): self.PrimaryEmail = PrimaryEmail
    def get_AdditionalContactDetails(self): return self.AdditionalContactDetails
    def set_AdditionalContactDetails(self, AdditionalContactDetails): self.AdditionalContactDetails = AdditionalContactDetails
    def get_ContactReference(self): return self.ContactReference
    def set_ContactReference(self, ContactReference): self.ContactReference = ContactReference
    def hasContent_(self):
        if (
            self.ContactTypeCode is not None or
            self.ContactName is not None or
            self.PrimaryPhone is not None or
            self.PrimaryFax is not None or
            self.PrimaryEmail is not None or
            self.AdditionalContactDetails is not None or
            self.ContactReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContactType262', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactType262')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactType262', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactType262'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactType262', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactTypeCode is not None:
            self.ContactTypeCode.export(outfile, level, namespace_, name_='ContactTypeCode', pretty_print=pretty_print)
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_, name_='ContactName', pretty_print=pretty_print)
        if self.PrimaryPhone is not None:
            self.PrimaryPhone.export(outfile, level, namespace_, name_='PrimaryPhone', pretty_print=pretty_print)
        if self.PrimaryFax is not None:
            self.PrimaryFax.export(outfile, level, namespace_, name_='PrimaryFax', pretty_print=pretty_print)
        if self.PrimaryEmail is not None:
            self.PrimaryEmail.export(outfile, level, namespace_, name_='PrimaryEmail', pretty_print=pretty_print)
        if self.AdditionalContactDetails is not None:
            self.AdditionalContactDetails.export(outfile, level, namespace_, name_='AdditionalContactDetails', pretty_print=pretty_print)
        if self.ContactReference is not None:
            self.ContactReference.export(outfile, level, namespace_, name_='ContactReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactTypeCode = obj_
            obj_.original_tagname_ = 'ContactTypeCode'
        elif nodeName_ == 'ContactName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'PrimaryPhone':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryPhone = obj_
            obj_.original_tagname_ = 'PrimaryPhone'
        elif nodeName_ == 'PrimaryFax':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryFax = obj_
            obj_.original_tagname_ = 'PrimaryFax'
        elif nodeName_ == 'PrimaryEmail':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PrimaryEmail = obj_
            obj_.original_tagname_ = 'PrimaryEmail'
        elif nodeName_ == 'AdditionalContactDetails':
            obj_ = AdditionalContactDetailsType263.factory()
            obj_.build(child_)
            self.AdditionalContactDetails = obj_
            obj_.original_tagname_ = 'AdditionalContactDetails'
        elif nodeName_ == 'ContactReference':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactReference = obj_
            obj_.original_tagname_ = 'ContactReference'
# end class ContactType262


class AdditionalContactDetailsType263(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactQual=None, ContactID=None):
        self.original_tagname_ = None
        self.ContactQual = ContactQual
        self.ContactID = ContactID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalContactDetailsType263)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalContactDetailsType263.subclass:
            return AdditionalContactDetailsType263.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactDetailsType263(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactQual(self): return self.ContactQual
    def set_ContactQual(self, ContactQual): self.ContactQual = ContactQual
    def get_ContactID(self): return self.ContactID
    def set_ContactID(self, ContactID): self.ContactID = ContactID
    def hasContent_(self):
        if (
            self.ContactQual is not None or
            self.ContactID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType263', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactDetailsType263')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdditionalContactDetailsType263', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactDetailsType263'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactDetailsType263', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactQual is not None:
            self.ContactQual.export(outfile, level, namespace_, name_='ContactQual', pretty_print=pretty_print)
        if self.ContactID is not None:
            self.ContactID.export(outfile, level, namespace_, name_='ContactID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactQual = obj_
            obj_.original_tagname_ = 'ContactQual'
        elif nodeName_ == 'ContactID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ContactID = obj_
            obj_.original_tagname_ = 'ContactID'
# end class AdditionalContactDetailsType263


class DateType264(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DateTimeQualifier1=None, Date1=None, Time1=None, DateTimePeriod=None):
        self.original_tagname_ = None
        self.DateTimeQualifier1 = DateTimeQualifier1
        self.Date1 = Date1
        self.Time1 = Time1
        self.DateTimePeriod = DateTimePeriod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateType264)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateType264.subclass:
            return DateType264.subclass(*args_, **kwargs_)
        else:
            return DateType264(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTimeQualifier1(self): return self.DateTimeQualifier1
    def set_DateTimeQualifier1(self, DateTimeQualifier1): self.DateTimeQualifier1 = DateTimeQualifier1
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_DateTimePeriod(self): return self.DateTimePeriod
    def set_DateTimePeriod(self, DateTimePeriod): self.DateTimePeriod = DateTimePeriod
    def hasContent_(self):
        if (
            self.DateTimeQualifier1 is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.DateTimePeriod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DateType264', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateType264')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateType264', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateType264'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DateType264', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTimeQualifier1 is not None:
            self.DateTimeQualifier1.export(outfile, level, namespace_, name_='DateTimeQualifier1', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.DateTimePeriod is not None:
            self.DateTimePeriod.export(outfile, level, namespace_, name_='DateTimePeriod', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTimeQualifier1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimeQualifier1 = obj_
            obj_.original_tagname_ = 'DateTimeQualifier1'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'DateTimePeriod':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.DateTimePeriod = obj_
            obj_.original_tagname_ = 'DateTimePeriod'
# end class DateType264


class SublinesType265(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Subline=None):
        self.original_tagname_ = None
        self.Subline = Subline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublinesType265)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublinesType265.subclass:
            return SublinesType265.subclass(*args_, **kwargs_)
        else:
            return SublinesType265(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Subline(self): return self.Subline
    def set_Subline(self, Subline): self.Subline = Subline
    def hasContent_(self):
        if (
            self.Subline is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublinesType265', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublinesType265')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublinesType265', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublinesType265'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublinesType265', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Subline is not None:
            self.Subline.export(outfile, level, namespace_, name_='Subline', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Subline':
            obj_ = SublineType266.factory()
            obj_.build(child_)
            self.Subline = obj_
            obj_.original_tagname_ = 'Subline'
# end class SublinesType265


class SublineType266(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SublineItemDetail=None, PriceInformation=None, ProductOrItemDescription=None, Commodity=None):
        self.original_tagname_ = None
        self.SublineItemDetail = SublineItemDetail
        self.PriceInformation = PriceInformation
        self.ProductOrItemDescription = ProductOrItemDescription
        self.Commodity = Commodity
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineType266)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineType266.subclass:
            return SublineType266.subclass(*args_, **kwargs_)
        else:
            return SublineType266(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SublineItemDetail(self): return self.SublineItemDetail
    def set_SublineItemDetail(self, SublineItemDetail): self.SublineItemDetail = SublineItemDetail
    def get_PriceInformation(self): return self.PriceInformation
    def set_PriceInformation(self, PriceInformation): self.PriceInformation = PriceInformation
    def get_ProductOrItemDescription(self): return self.ProductOrItemDescription
    def set_ProductOrItemDescription(self, ProductOrItemDescription): self.ProductOrItemDescription = ProductOrItemDescription
    def get_Commodity(self): return self.Commodity
    def set_Commodity(self, Commodity): self.Commodity = Commodity
    def hasContent_(self):
        if (
            self.SublineItemDetail is not None or
            self.PriceInformation is not None or
            self.ProductOrItemDescription is not None or
            self.Commodity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineType266', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineType266')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineType266', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineType266'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineType266', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SublineItemDetail is not None:
            self.SublineItemDetail.export(outfile, level, namespace_, name_='SublineItemDetail', pretty_print=pretty_print)
        if self.PriceInformation is not None:
            self.PriceInformation.export(outfile, level, namespace_, name_='PriceInformation', pretty_print=pretty_print)
        if self.ProductOrItemDescription is not None:
            self.ProductOrItemDescription.export(outfile, level, namespace_, name_='ProductOrItemDescription', pretty_print=pretty_print)
        if self.Commodity is not None:
            self.Commodity.export(outfile, level, namespace_, name_='Commodity', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SublineItemDetail':
            obj_ = SublineItemDetailType267.factory()
            obj_.build(child_)
            self.SublineItemDetail = obj_
            obj_.original_tagname_ = 'SublineItemDetail'
        elif nodeName_ == 'PriceInformation':
            obj_ = PriceInformationType270.factory()
            obj_.build(child_)
            self.PriceInformation = obj_
            obj_.original_tagname_ = 'PriceInformation'
        elif nodeName_ == 'ProductOrItemDescription':
            obj_ = ProductOrItemDescriptionType271.factory()
            obj_.build(child_)
            self.ProductOrItemDescription = obj_
            obj_.original_tagname_ = 'ProductOrItemDescription'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType272.factory()
            obj_.build(child_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
# end class SublineType266


class SublineItemDetailType267(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineSequenceNumber=None, ApplicationId=None, BuyerPartNumber=None, VendorPartNumber=None, ConsumerPackageCode=None, EAN=None, GTIN=None, UPCCaseCode=None, NatlDrugCode=None, InternationalStandardBookNumber=None, ProductID=None, ProductSizeCode=None, ProductSizeDescription=None, ProductColorCode=None, ProductColorDescription=None, ProductMaterialCode=None, ProductMaterialDescription=None, ProductProcessCode=None, ProductProcessDescription=None, QtyPer=None, QtyPerUOM=None, PurchasePriceType=None, PurchasePrice=None, PurchasePriceBasis=None, NRFStandardColorAndSize=None):
        self.original_tagname_ = None
        self.LineSequenceNumber = LineSequenceNumber
        self.ApplicationId = ApplicationId
        self.BuyerPartNumber = BuyerPartNumber
        self.VendorPartNumber = VendorPartNumber
        self.ConsumerPackageCode = ConsumerPackageCode
        self.EAN = EAN
        self.GTIN = GTIN
        self.UPCCaseCode = UPCCaseCode
        self.NatlDrugCode = NatlDrugCode
        self.InternationalStandardBookNumber = InternationalStandardBookNumber
        self.ProductID = ProductID
        self.ProductSizeCode = ProductSizeCode
        self.ProductSizeDescription = ProductSizeDescription
        self.ProductColorCode = ProductColorCode
        self.ProductColorDescription = ProductColorDescription
        self.ProductMaterialCode = ProductMaterialCode
        self.ProductMaterialDescription = ProductMaterialDescription
        self.ProductProcessCode = ProductProcessCode
        self.ProductProcessDescription = ProductProcessDescription
        self.QtyPer = QtyPer
        self.QtyPerUOM = QtyPerUOM
        self.PurchasePriceType = PurchasePriceType
        self.PurchasePrice = PurchasePrice
        self.PurchasePriceBasis = PurchasePriceBasis
        self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SublineItemDetailType267)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SublineItemDetailType267.subclass:
            return SublineItemDetailType267.subclass(*args_, **kwargs_)
        else:
            return SublineItemDetailType267(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineSequenceNumber(self): return self.LineSequenceNumber
    def set_LineSequenceNumber(self, LineSequenceNumber): self.LineSequenceNumber = LineSequenceNumber
    def get_ApplicationId(self): return self.ApplicationId
    def set_ApplicationId(self, ApplicationId): self.ApplicationId = ApplicationId
    def get_BuyerPartNumber(self): return self.BuyerPartNumber
    def set_BuyerPartNumber(self, BuyerPartNumber): self.BuyerPartNumber = BuyerPartNumber
    def get_VendorPartNumber(self): return self.VendorPartNumber
    def set_VendorPartNumber(self, VendorPartNumber): self.VendorPartNumber = VendorPartNumber
    def get_ConsumerPackageCode(self): return self.ConsumerPackageCode
    def set_ConsumerPackageCode(self, ConsumerPackageCode): self.ConsumerPackageCode = ConsumerPackageCode
    def get_EAN(self): return self.EAN
    def set_EAN(self, EAN): self.EAN = EAN
    def get_GTIN(self): return self.GTIN
    def set_GTIN(self, GTIN): self.GTIN = GTIN
    def get_UPCCaseCode(self): return self.UPCCaseCode
    def set_UPCCaseCode(self, UPCCaseCode): self.UPCCaseCode = UPCCaseCode
    def get_NatlDrugCode(self): return self.NatlDrugCode
    def set_NatlDrugCode(self, NatlDrugCode): self.NatlDrugCode = NatlDrugCode
    def get_InternationalStandardBookNumber(self): return self.InternationalStandardBookNumber
    def set_InternationalStandardBookNumber(self, InternationalStandardBookNumber): self.InternationalStandardBookNumber = InternationalStandardBookNumber
    def get_ProductID(self): return self.ProductID
    def set_ProductID(self, ProductID): self.ProductID = ProductID
    def get_ProductSizeCode(self): return self.ProductSizeCode
    def set_ProductSizeCode(self, ProductSizeCode): self.ProductSizeCode = ProductSizeCode
    def get_ProductSizeDescription(self): return self.ProductSizeDescription
    def set_ProductSizeDescription(self, ProductSizeDescription): self.ProductSizeDescription = ProductSizeDescription
    def get_ProductColorCode(self): return self.ProductColorCode
    def set_ProductColorCode(self, ProductColorCode): self.ProductColorCode = ProductColorCode
    def get_ProductColorDescription(self): return self.ProductColorDescription
    def set_ProductColorDescription(self, ProductColorDescription): self.ProductColorDescription = ProductColorDescription
    def get_ProductMaterialCode(self): return self.ProductMaterialCode
    def set_ProductMaterialCode(self, ProductMaterialCode): self.ProductMaterialCode = ProductMaterialCode
    def get_ProductMaterialDescription(self): return self.ProductMaterialDescription
    def set_ProductMaterialDescription(self, ProductMaterialDescription): self.ProductMaterialDescription = ProductMaterialDescription
    def get_ProductProcessCode(self): return self.ProductProcessCode
    def set_ProductProcessCode(self, ProductProcessCode): self.ProductProcessCode = ProductProcessCode
    def get_ProductProcessDescription(self): return self.ProductProcessDescription
    def set_ProductProcessDescription(self, ProductProcessDescription): self.ProductProcessDescription = ProductProcessDescription
    def get_QtyPer(self): return self.QtyPer
    def set_QtyPer(self, QtyPer): self.QtyPer = QtyPer
    def get_QtyPerUOM(self): return self.QtyPerUOM
    def set_QtyPerUOM(self, QtyPerUOM): self.QtyPerUOM = QtyPerUOM
    def get_PurchasePriceType(self): return self.PurchasePriceType
    def set_PurchasePriceType(self, PurchasePriceType): self.PurchasePriceType = PurchasePriceType
    def get_PurchasePrice(self): return self.PurchasePrice
    def set_PurchasePrice(self, PurchasePrice): self.PurchasePrice = PurchasePrice
    def get_PurchasePriceBasis(self): return self.PurchasePriceBasis
    def set_PurchasePriceBasis(self, PurchasePriceBasis): self.PurchasePriceBasis = PurchasePriceBasis
    def get_NRFStandardColorAndSize(self): return self.NRFStandardColorAndSize
    def set_NRFStandardColorAndSize(self, NRFStandardColorAndSize): self.NRFStandardColorAndSize = NRFStandardColorAndSize
    def hasContent_(self):
        if (
            self.LineSequenceNumber is not None or
            self.ApplicationId is not None or
            self.BuyerPartNumber is not None or
            self.VendorPartNumber is not None or
            self.ConsumerPackageCode is not None or
            self.EAN is not None or
            self.GTIN is not None or
            self.UPCCaseCode is not None or
            self.NatlDrugCode is not None or
            self.InternationalStandardBookNumber is not None or
            self.ProductID is not None or
            self.ProductSizeCode is not None or
            self.ProductSizeDescription is not None or
            self.ProductColorCode is not None or
            self.ProductColorDescription is not None or
            self.ProductMaterialCode is not None or
            self.ProductMaterialDescription is not None or
            self.ProductProcessCode is not None or
            self.ProductProcessDescription is not None or
            self.QtyPer is not None or
            self.QtyPerUOM is not None or
            self.PurchasePriceType is not None or
            self.PurchasePrice is not None or
            self.PurchasePriceBasis is not None or
            self.NRFStandardColorAndSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SublineItemDetailType267', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SublineItemDetailType267')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SublineItemDetailType267', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SublineItemDetailType267'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SublineItemDetailType267', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineSequenceNumber is not None:
            self.LineSequenceNumber.export(outfile, level, namespace_, name_='LineSequenceNumber', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            self.ApplicationId.export(outfile, level, namespace_, name_='ApplicationId', pretty_print=pretty_print)
        if self.BuyerPartNumber is not None:
            self.BuyerPartNumber.export(outfile, level, namespace_, name_='BuyerPartNumber', pretty_print=pretty_print)
        if self.VendorPartNumber is not None:
            self.VendorPartNumber.export(outfile, level, namespace_, name_='VendorPartNumber', pretty_print=pretty_print)
        if self.ConsumerPackageCode is not None:
            self.ConsumerPackageCode.export(outfile, level, namespace_, name_='ConsumerPackageCode', pretty_print=pretty_print)
        if self.EAN is not None:
            self.EAN.export(outfile, level, namespace_, name_='EAN', pretty_print=pretty_print)
        if self.GTIN is not None:
            self.GTIN.export(outfile, level, namespace_, name_='GTIN', pretty_print=pretty_print)
        if self.UPCCaseCode is not None:
            self.UPCCaseCode.export(outfile, level, namespace_, name_='UPCCaseCode', pretty_print=pretty_print)
        if self.NatlDrugCode is not None:
            self.NatlDrugCode.export(outfile, level, namespace_, name_='NatlDrugCode', pretty_print=pretty_print)
        if self.InternationalStandardBookNumber is not None:
            self.InternationalStandardBookNumber.export(outfile, level, namespace_, name_='InternationalStandardBookNumber', pretty_print=pretty_print)
        if self.ProductID is not None:
            self.ProductID.export(outfile, level, namespace_, name_='ProductID', pretty_print=pretty_print)
        if self.ProductSizeCode is not None:
            self.ProductSizeCode.export(outfile, level, namespace_, name_='ProductSizeCode', pretty_print=pretty_print)
        if self.ProductSizeDescription is not None:
            self.ProductSizeDescription.export(outfile, level, namespace_, name_='ProductSizeDescription', pretty_print=pretty_print)
        if self.ProductColorCode is not None:
            self.ProductColorCode.export(outfile, level, namespace_, name_='ProductColorCode', pretty_print=pretty_print)
        if self.ProductColorDescription is not None:
            self.ProductColorDescription.export(outfile, level, namespace_, name_='ProductColorDescription', pretty_print=pretty_print)
        if self.ProductMaterialCode is not None:
            self.ProductMaterialCode.export(outfile, level, namespace_, name_='ProductMaterialCode', pretty_print=pretty_print)
        if self.ProductMaterialDescription is not None:
            self.ProductMaterialDescription.export(outfile, level, namespace_, name_='ProductMaterialDescription', pretty_print=pretty_print)
        if self.ProductProcessCode is not None:
            self.ProductProcessCode.export(outfile, level, namespace_, name_='ProductProcessCode', pretty_print=pretty_print)
        if self.ProductProcessDescription is not None:
            self.ProductProcessDescription.export(outfile, level, namespace_, name_='ProductProcessDescription', pretty_print=pretty_print)
        if self.QtyPer is not None:
            self.QtyPer.export(outfile, level, namespace_, name_='QtyPer', pretty_print=pretty_print)
        if self.QtyPerUOM is not None:
            self.QtyPerUOM.export(outfile, level, namespace_, name_='QtyPerUOM', pretty_print=pretty_print)
        if self.PurchasePriceType is not None:
            self.PurchasePriceType.export(outfile, level, namespace_, name_='PurchasePriceType', pretty_print=pretty_print)
        if self.PurchasePrice is not None:
            self.PurchasePrice.export(outfile, level, namespace_, name_='PurchasePrice', pretty_print=pretty_print)
        if self.PurchasePriceBasis is not None:
            self.PurchasePriceBasis.export(outfile, level, namespace_, name_='PurchasePriceBasis', pretty_print=pretty_print)
        if self.NRFStandardColorAndSize is not None:
            self.NRFStandardColorAndSize.export(outfile, level, namespace_, name_='NRFStandardColorAndSize', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineSequenceNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LineSequenceNumber = obj_
            obj_.original_tagname_ = 'LineSequenceNumber'
        elif nodeName_ == 'ApplicationId':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ApplicationId = obj_
            obj_.original_tagname_ = 'ApplicationId'
        elif nodeName_ == 'BuyerPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.BuyerPartNumber = obj_
            obj_.original_tagname_ = 'BuyerPartNumber'
        elif nodeName_ == 'VendorPartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.VendorPartNumber = obj_
            obj_.original_tagname_ = 'VendorPartNumber'
        elif nodeName_ == 'ConsumerPackageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConsumerPackageCode = obj_
            obj_.original_tagname_ = 'ConsumerPackageCode'
        elif nodeName_ == 'EAN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EAN = obj_
            obj_.original_tagname_ = 'EAN'
        elif nodeName_ == 'GTIN':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.GTIN = obj_
            obj_.original_tagname_ = 'GTIN'
        elif nodeName_ == 'UPCCaseCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UPCCaseCode = obj_
            obj_.original_tagname_ = 'UPCCaseCode'
        elif nodeName_ == 'NatlDrugCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NatlDrugCode = obj_
            obj_.original_tagname_ = 'NatlDrugCode'
        elif nodeName_ == 'InternationalStandardBookNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.InternationalStandardBookNumber = obj_
            obj_.original_tagname_ = 'InternationalStandardBookNumber'
        elif nodeName_ == 'ProductID':
            obj_ = ProductIDType268.factory()
            obj_.build(child_)
            self.ProductID = obj_
            obj_.original_tagname_ = 'ProductID'
        elif nodeName_ == 'ProductSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeCode = obj_
            obj_.original_tagname_ = 'ProductSizeCode'
        elif nodeName_ == 'ProductSizeDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductSizeDescription = obj_
            obj_.original_tagname_ = 'ProductSizeDescription'
        elif nodeName_ == 'ProductColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorCode = obj_
            obj_.original_tagname_ = 'ProductColorCode'
        elif nodeName_ == 'ProductColorDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductColorDescription = obj_
            obj_.original_tagname_ = 'ProductColorDescription'
        elif nodeName_ == 'ProductMaterialCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialCode = obj_
            obj_.original_tagname_ = 'ProductMaterialCode'
        elif nodeName_ == 'ProductMaterialDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductMaterialDescription = obj_
            obj_.original_tagname_ = 'ProductMaterialDescription'
        elif nodeName_ == 'ProductProcessCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessCode = obj_
            obj_.original_tagname_ = 'ProductProcessCode'
        elif nodeName_ == 'ProductProcessDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductProcessDescription = obj_
            obj_.original_tagname_ = 'ProductProcessDescription'
        elif nodeName_ == 'QtyPer':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPer = obj_
            obj_.original_tagname_ = 'QtyPer'
        elif nodeName_ == 'QtyPerUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QtyPerUOM = obj_
            obj_.original_tagname_ = 'QtyPerUOM'
        elif nodeName_ == 'PurchasePriceType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceType = obj_
            obj_.original_tagname_ = 'PurchasePriceType'
        elif nodeName_ == 'PurchasePrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePrice = obj_
            obj_.original_tagname_ = 'PurchasePrice'
        elif nodeName_ == 'PurchasePriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PurchasePriceBasis = obj_
            obj_.original_tagname_ = 'PurchasePriceBasis'
        elif nodeName_ == 'NRFStandardColorAndSize':
            obj_ = NRFStandardColorAndSizeType269.factory()
            obj_.build(child_)
            self.NRFStandardColorAndSize = obj_
            obj_.original_tagname_ = 'NRFStandardColorAndSize'
# end class SublineItemDetailType267


class ProductIDType268(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PartNumberQual=None, PartNumber=None):
        self.original_tagname_ = None
        self.PartNumberQual = PartNumberQual
        self.PartNumber = PartNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductIDType268)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductIDType268.subclass:
            return ProductIDType268.subclass(*args_, **kwargs_)
        else:
            return ProductIDType268(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PartNumberQual(self): return self.PartNumberQual
    def set_PartNumberQual(self, PartNumberQual): self.PartNumberQual = PartNumberQual
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def hasContent_(self):
        if (
            self.PartNumberQual is not None or
            self.PartNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductIDType268', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductIDType268')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductIDType268', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductIDType268'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductIDType268', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumberQual is not None:
            self.PartNumberQual.export(outfile, level, namespace_, name_='PartNumberQual', pretty_print=pretty_print)
        if self.PartNumber is not None:
            self.PartNumber.export(outfile, level, namespace_, name_='PartNumber', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PartNumberQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumberQual = obj_
            obj_.original_tagname_ = 'PartNumberQual'
        elif nodeName_ == 'PartNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PartNumber = obj_
            obj_.original_tagname_ = 'PartNumber'
# end class ProductIDType268


class NRFStandardColorAndSizeType269(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NRFColorCode=None, ColorCategoryName=None, ColorPrimaryDescription=None, NRFSizeCode=None, SizeCategoryName=None, SizePrimaryDescription=None, SizeSecondaryDescription=None, SizeTableName=None, SizeHeading1=None, SizeHeading2=None, SizeHeading3=None, SizeHeading4=None):
        self.original_tagname_ = None
        self.NRFColorCode = NRFColorCode
        self.ColorCategoryName = ColorCategoryName
        self.ColorPrimaryDescription = ColorPrimaryDescription
        self.NRFSizeCode = NRFSizeCode
        self.SizeCategoryName = SizeCategoryName
        self.SizePrimaryDescription = SizePrimaryDescription
        self.SizeSecondaryDescription = SizeSecondaryDescription
        self.SizeTableName = SizeTableName
        self.SizeHeading1 = SizeHeading1
        self.SizeHeading2 = SizeHeading2
        self.SizeHeading3 = SizeHeading3
        self.SizeHeading4 = SizeHeading4
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NRFStandardColorAndSizeType269)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NRFStandardColorAndSizeType269.subclass:
            return NRFStandardColorAndSizeType269.subclass(*args_, **kwargs_)
        else:
            return NRFStandardColorAndSizeType269(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NRFColorCode(self): return self.NRFColorCode
    def set_NRFColorCode(self, NRFColorCode): self.NRFColorCode = NRFColorCode
    def get_ColorCategoryName(self): return self.ColorCategoryName
    def set_ColorCategoryName(self, ColorCategoryName): self.ColorCategoryName = ColorCategoryName
    def get_ColorPrimaryDescription(self): return self.ColorPrimaryDescription
    def set_ColorPrimaryDescription(self, ColorPrimaryDescription): self.ColorPrimaryDescription = ColorPrimaryDescription
    def get_NRFSizeCode(self): return self.NRFSizeCode
    def set_NRFSizeCode(self, NRFSizeCode): self.NRFSizeCode = NRFSizeCode
    def get_SizeCategoryName(self): return self.SizeCategoryName
    def set_SizeCategoryName(self, SizeCategoryName): self.SizeCategoryName = SizeCategoryName
    def get_SizePrimaryDescription(self): return self.SizePrimaryDescription
    def set_SizePrimaryDescription(self, SizePrimaryDescription): self.SizePrimaryDescription = SizePrimaryDescription
    def get_SizeSecondaryDescription(self): return self.SizeSecondaryDescription
    def set_SizeSecondaryDescription(self, SizeSecondaryDescription): self.SizeSecondaryDescription = SizeSecondaryDescription
    def get_SizeTableName(self): return self.SizeTableName
    def set_SizeTableName(self, SizeTableName): self.SizeTableName = SizeTableName
    def get_SizeHeading1(self): return self.SizeHeading1
    def set_SizeHeading1(self, SizeHeading1): self.SizeHeading1 = SizeHeading1
    def get_SizeHeading2(self): return self.SizeHeading2
    def set_SizeHeading2(self, SizeHeading2): self.SizeHeading2 = SizeHeading2
    def get_SizeHeading3(self): return self.SizeHeading3
    def set_SizeHeading3(self, SizeHeading3): self.SizeHeading3 = SizeHeading3
    def get_SizeHeading4(self): return self.SizeHeading4
    def set_SizeHeading4(self, SizeHeading4): self.SizeHeading4 = SizeHeading4
    def hasContent_(self):
        if (
            self.NRFColorCode is not None or
            self.ColorCategoryName is not None or
            self.ColorPrimaryDescription is not None or
            self.NRFSizeCode is not None or
            self.SizeCategoryName is not None or
            self.SizePrimaryDescription is not None or
            self.SizeSecondaryDescription is not None or
            self.SizeTableName is not None or
            self.SizeHeading1 is not None or
            self.SizeHeading2 is not None or
            self.SizeHeading3 is not None or
            self.SizeHeading4 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType269', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NRFStandardColorAndSizeType269')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NRFStandardColorAndSizeType269', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NRFStandardColorAndSizeType269'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NRFStandardColorAndSizeType269', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NRFColorCode is not None:
            self.NRFColorCode.export(outfile, level, namespace_, name_='NRFColorCode', pretty_print=pretty_print)
        if self.ColorCategoryName is not None:
            self.ColorCategoryName.export(outfile, level, namespace_, name_='ColorCategoryName', pretty_print=pretty_print)
        if self.ColorPrimaryDescription is not None:
            self.ColorPrimaryDescription.export(outfile, level, namespace_, name_='ColorPrimaryDescription', pretty_print=pretty_print)
        if self.NRFSizeCode is not None:
            self.NRFSizeCode.export(outfile, level, namespace_, name_='NRFSizeCode', pretty_print=pretty_print)
        if self.SizeCategoryName is not None:
            self.SizeCategoryName.export(outfile, level, namespace_, name_='SizeCategoryName', pretty_print=pretty_print)
        if self.SizePrimaryDescription is not None:
            self.SizePrimaryDescription.export(outfile, level, namespace_, name_='SizePrimaryDescription', pretty_print=pretty_print)
        if self.SizeSecondaryDescription is not None:
            self.SizeSecondaryDescription.export(outfile, level, namespace_, name_='SizeSecondaryDescription', pretty_print=pretty_print)
        if self.SizeTableName is not None:
            self.SizeTableName.export(outfile, level, namespace_, name_='SizeTableName', pretty_print=pretty_print)
        if self.SizeHeading1 is not None:
            self.SizeHeading1.export(outfile, level, namespace_, name_='SizeHeading1', pretty_print=pretty_print)
        if self.SizeHeading2 is not None:
            self.SizeHeading2.export(outfile, level, namespace_, name_='SizeHeading2', pretty_print=pretty_print)
        if self.SizeHeading3 is not None:
            self.SizeHeading3.export(outfile, level, namespace_, name_='SizeHeading3', pretty_print=pretty_print)
        if self.SizeHeading4 is not None:
            self.SizeHeading4.export(outfile, level, namespace_, name_='SizeHeading4', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NRFColorCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFColorCode = obj_
            obj_.original_tagname_ = 'NRFColorCode'
        elif nodeName_ == 'ColorCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorCategoryName = obj_
            obj_.original_tagname_ = 'ColorCategoryName'
        elif nodeName_ == 'ColorPrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ColorPrimaryDescription = obj_
            obj_.original_tagname_ = 'ColorPrimaryDescription'
        elif nodeName_ == 'NRFSizeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NRFSizeCode = obj_
            obj_.original_tagname_ = 'NRFSizeCode'
        elif nodeName_ == 'SizeCategoryName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeCategoryName = obj_
            obj_.original_tagname_ = 'SizeCategoryName'
        elif nodeName_ == 'SizePrimaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizePrimaryDescription = obj_
            obj_.original_tagname_ = 'SizePrimaryDescription'
        elif nodeName_ == 'SizeSecondaryDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeSecondaryDescription = obj_
            obj_.original_tagname_ = 'SizeSecondaryDescription'
        elif nodeName_ == 'SizeTableName':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeTableName = obj_
            obj_.original_tagname_ = 'SizeTableName'
        elif nodeName_ == 'SizeHeading1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading1 = obj_
            obj_.original_tagname_ = 'SizeHeading1'
        elif nodeName_ == 'SizeHeading2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading2 = obj_
            obj_.original_tagname_ = 'SizeHeading2'
        elif nodeName_ == 'SizeHeading3':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading3 = obj_
            obj_.original_tagname_ = 'SizeHeading3'
        elif nodeName_ == 'SizeHeading4':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SizeHeading4 = obj_
            obj_.original_tagname_ = 'SizeHeading4'
# end class NRFStandardColorAndSizeType269


class PriceInformationType270(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ChangeReasonCode=None, EffectiveDate=None, PriceTypeIDCode=None, UnitPrice=None, UnitPriceBasis=None, Currency=None, PriceMultiplierQual=None, PriceMultiplier=None, RebateAmount=None, Quantity=None, QuantityUOM=None, MultiplePriceQuantity=None, ClassOfTradeCode=None, ConditionValue=None, Description=None):
        self.original_tagname_ = None
        self.ChangeReasonCode = ChangeReasonCode
        self.EffectiveDate = EffectiveDate
        self.PriceTypeIDCode = PriceTypeIDCode
        self.UnitPrice = UnitPrice
        self.UnitPriceBasis = UnitPriceBasis
        self.Currency = Currency
        self.PriceMultiplierQual = PriceMultiplierQual
        self.PriceMultiplier = PriceMultiplier
        self.RebateAmount = RebateAmount
        self.Quantity = Quantity
        self.QuantityUOM = QuantityUOM
        self.MultiplePriceQuantity = MultiplePriceQuantity
        self.ClassOfTradeCode = ClassOfTradeCode
        self.ConditionValue = ConditionValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriceInformationType270)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriceInformationType270.subclass:
            return PriceInformationType270.subclass(*args_, **kwargs_)
        else:
            return PriceInformationType270(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChangeReasonCode(self): return self.ChangeReasonCode
    def set_ChangeReasonCode(self, ChangeReasonCode): self.ChangeReasonCode = ChangeReasonCode
    def get_EffectiveDate(self): return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate): self.EffectiveDate = EffectiveDate
    def get_PriceTypeIDCode(self): return self.PriceTypeIDCode
    def set_PriceTypeIDCode(self, PriceTypeIDCode): self.PriceTypeIDCode = PriceTypeIDCode
    def get_UnitPrice(self): return self.UnitPrice
    def set_UnitPrice(self, UnitPrice): self.UnitPrice = UnitPrice
    def get_UnitPriceBasis(self): return self.UnitPriceBasis
    def set_UnitPriceBasis(self, UnitPriceBasis): self.UnitPriceBasis = UnitPriceBasis
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_PriceMultiplierQual(self): return self.PriceMultiplierQual
    def set_PriceMultiplierQual(self, PriceMultiplierQual): self.PriceMultiplierQual = PriceMultiplierQual
    def get_PriceMultiplier(self): return self.PriceMultiplier
    def set_PriceMultiplier(self, PriceMultiplier): self.PriceMultiplier = PriceMultiplier
    def get_RebateAmount(self): return self.RebateAmount
    def set_RebateAmount(self, RebateAmount): self.RebateAmount = RebateAmount
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_QuantityUOM(self): return self.QuantityUOM
    def set_QuantityUOM(self, QuantityUOM): self.QuantityUOM = QuantityUOM
    def get_MultiplePriceQuantity(self): return self.MultiplePriceQuantity
    def set_MultiplePriceQuantity(self, MultiplePriceQuantity): self.MultiplePriceQuantity = MultiplePriceQuantity
    def get_ClassOfTradeCode(self): return self.ClassOfTradeCode
    def set_ClassOfTradeCode(self, ClassOfTradeCode): self.ClassOfTradeCode = ClassOfTradeCode
    def get_ConditionValue(self): return self.ConditionValue
    def set_ConditionValue(self, ConditionValue): self.ConditionValue = ConditionValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.ChangeReasonCode is not None or
            self.EffectiveDate is not None or
            self.PriceTypeIDCode is not None or
            self.UnitPrice is not None or
            self.UnitPriceBasis is not None or
            self.Currency is not None or
            self.PriceMultiplierQual is not None or
            self.PriceMultiplier is not None or
            self.RebateAmount is not None or
            self.Quantity is not None or
            self.QuantityUOM is not None or
            self.MultiplePriceQuantity is not None or
            self.ClassOfTradeCode is not None or
            self.ConditionValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PriceInformationType270', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceInformationType270')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PriceInformationType270', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceInformationType270'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceInformationType270', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChangeReasonCode is not None:
            self.ChangeReasonCode.export(outfile, level, namespace_, name_='ChangeReasonCode', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            self.EffectiveDate.export(outfile, level, namespace_, name_='EffectiveDate', pretty_print=pretty_print)
        if self.PriceTypeIDCode is not None:
            self.PriceTypeIDCode.export(outfile, level, namespace_, name_='PriceTypeIDCode', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            self.UnitPrice.export(outfile, level, namespace_, name_='UnitPrice', pretty_print=pretty_print)
        if self.UnitPriceBasis is not None:
            self.UnitPriceBasis.export(outfile, level, namespace_, name_='UnitPriceBasis', pretty_print=pretty_print)
        if self.Currency is not None:
            self.Currency.export(outfile, level, namespace_, name_='Currency', pretty_print=pretty_print)
        if self.PriceMultiplierQual is not None:
            self.PriceMultiplierQual.export(outfile, level, namespace_, name_='PriceMultiplierQual', pretty_print=pretty_print)
        if self.PriceMultiplier is not None:
            self.PriceMultiplier.export(outfile, level, namespace_, name_='PriceMultiplier', pretty_print=pretty_print)
        if self.RebateAmount is not None:
            self.RebateAmount.export(outfile, level, namespace_, name_='RebateAmount', pretty_print=pretty_print)
        if self.Quantity is not None:
            self.Quantity.export(outfile, level, namespace_, name_='Quantity', pretty_print=pretty_print)
        if self.QuantityUOM is not None:
            self.QuantityUOM.export(outfile, level, namespace_, name_='QuantityUOM', pretty_print=pretty_print)
        if self.MultiplePriceQuantity is not None:
            self.MultiplePriceQuantity.export(outfile, level, namespace_, name_='MultiplePriceQuantity', pretty_print=pretty_print)
        if self.ClassOfTradeCode is not None:
            self.ClassOfTradeCode.export(outfile, level, namespace_, name_='ClassOfTradeCode', pretty_print=pretty_print)
        if self.ConditionValue is not None:
            self.ConditionValue.export(outfile, level, namespace_, name_='ConditionValue', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChangeReasonCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ChangeReasonCode = obj_
            obj_.original_tagname_ = 'ChangeReasonCode'
        elif nodeName_ == 'EffectiveDate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.EffectiveDate = obj_
            obj_.original_tagname_ = 'EffectiveDate'
        elif nodeName_ == 'PriceTypeIDCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceTypeIDCode = obj_
            obj_.original_tagname_ = 'PriceTypeIDCode'
        elif nodeName_ == 'UnitPrice':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'UnitPriceBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitPriceBasis = obj_
            obj_.original_tagname_ = 'UnitPriceBasis'
        elif nodeName_ == 'Currency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Currency = obj_
            obj_.original_tagname_ = 'Currency'
        elif nodeName_ == 'PriceMultiplierQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplierQual = obj_
            obj_.original_tagname_ = 'PriceMultiplierQual'
        elif nodeName_ == 'PriceMultiplier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PriceMultiplier = obj_
            obj_.original_tagname_ = 'PriceMultiplier'
        elif nodeName_ == 'RebateAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RebateAmount = obj_
            obj_.original_tagname_ = 'RebateAmount'
        elif nodeName_ == 'Quantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'QuantityUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.QuantityUOM = obj_
            obj_.original_tagname_ = 'QuantityUOM'
        elif nodeName_ == 'MultiplePriceQuantity':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.MultiplePriceQuantity = obj_
            obj_.original_tagname_ = 'MultiplePriceQuantity'
        elif nodeName_ == 'ClassOfTradeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ClassOfTradeCode = obj_
            obj_.original_tagname_ = 'ClassOfTradeCode'
        elif nodeName_ == 'ConditionValue':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ConditionValue = obj_
            obj_.original_tagname_ = 'ConditionValue'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class PriceInformationType270


class ProductOrItemDescriptionType271(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemDescriptionType=None, ProductCharacteristicCode=None, AgencyQualifierCode=None, ProductDescriptionCode=None, ProductDescription=None, SurfaceLayerPositionCode=None, SourceSubqualifier=None, YesOrNoResponse=None, LanguageCode=None):
        self.original_tagname_ = None
        self.ItemDescriptionType = ItemDescriptionType
        self.ProductCharacteristicCode = ProductCharacteristicCode
        self.AgencyQualifierCode = AgencyQualifierCode
        self.ProductDescriptionCode = ProductDescriptionCode
        self.ProductDescription = ProductDescription
        self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
        self.SourceSubqualifier = SourceSubqualifier
        self.YesOrNoResponse = YesOrNoResponse
        self.LanguageCode = LanguageCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductOrItemDescriptionType271)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductOrItemDescriptionType271.subclass:
            return ProductOrItemDescriptionType271.subclass(*args_, **kwargs_)
        else:
            return ProductOrItemDescriptionType271(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemDescriptionType(self): return self.ItemDescriptionType
    def set_ItemDescriptionType(self, ItemDescriptionType): self.ItemDescriptionType = ItemDescriptionType
    def get_ProductCharacteristicCode(self): return self.ProductCharacteristicCode
    def set_ProductCharacteristicCode(self, ProductCharacteristicCode): self.ProductCharacteristicCode = ProductCharacteristicCode
    def get_AgencyQualifierCode(self): return self.AgencyQualifierCode
    def set_AgencyQualifierCode(self, AgencyQualifierCode): self.AgencyQualifierCode = AgencyQualifierCode
    def get_ProductDescriptionCode(self): return self.ProductDescriptionCode
    def set_ProductDescriptionCode(self, ProductDescriptionCode): self.ProductDescriptionCode = ProductDescriptionCode
    def get_ProductDescription(self): return self.ProductDescription
    def set_ProductDescription(self, ProductDescription): self.ProductDescription = ProductDescription
    def get_SurfaceLayerPositionCode(self): return self.SurfaceLayerPositionCode
    def set_SurfaceLayerPositionCode(self, SurfaceLayerPositionCode): self.SurfaceLayerPositionCode = SurfaceLayerPositionCode
    def get_SourceSubqualifier(self): return self.SourceSubqualifier
    def set_SourceSubqualifier(self, SourceSubqualifier): self.SourceSubqualifier = SourceSubqualifier
    def get_YesOrNoResponse(self): return self.YesOrNoResponse
    def set_YesOrNoResponse(self, YesOrNoResponse): self.YesOrNoResponse = YesOrNoResponse
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def hasContent_(self):
        if (
            self.ItemDescriptionType is not None or
            self.ProductCharacteristicCode is not None or
            self.AgencyQualifierCode is not None or
            self.ProductDescriptionCode is not None or
            self.ProductDescription is not None or
            self.SurfaceLayerPositionCode is not None or
            self.SourceSubqualifier is not None or
            self.YesOrNoResponse is not None or
            self.LanguageCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType271', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductOrItemDescriptionType271')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ProductOrItemDescriptionType271', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductOrItemDescriptionType271'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductOrItemDescriptionType271', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemDescriptionType is not None:
            self.ItemDescriptionType.export(outfile, level, namespace_, name_='ItemDescriptionType', pretty_print=pretty_print)
        if self.ProductCharacteristicCode is not None:
            self.ProductCharacteristicCode.export(outfile, level, namespace_, name_='ProductCharacteristicCode', pretty_print=pretty_print)
        if self.AgencyQualifierCode is not None:
            self.AgencyQualifierCode.export(outfile, level, namespace_, name_='AgencyQualifierCode', pretty_print=pretty_print)
        if self.ProductDescriptionCode is not None:
            self.ProductDescriptionCode.export(outfile, level, namespace_, name_='ProductDescriptionCode', pretty_print=pretty_print)
        if self.ProductDescription is not None:
            self.ProductDescription.export(outfile, level, namespace_, name_='ProductDescription', pretty_print=pretty_print)
        if self.SurfaceLayerPositionCode is not None:
            self.SurfaceLayerPositionCode.export(outfile, level, namespace_, name_='SurfaceLayerPositionCode', pretty_print=pretty_print)
        if self.SourceSubqualifier is not None:
            self.SourceSubqualifier.export(outfile, level, namespace_, name_='SourceSubqualifier', pretty_print=pretty_print)
        if self.YesOrNoResponse is not None:
            self.YesOrNoResponse.export(outfile, level, namespace_, name_='YesOrNoResponse', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemDescriptionType':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ItemDescriptionType = obj_
            obj_.original_tagname_ = 'ItemDescriptionType'
        elif nodeName_ == 'ProductCharacteristicCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductCharacteristicCode = obj_
            obj_.original_tagname_ = 'ProductCharacteristicCode'
        elif nodeName_ == 'AgencyQualifierCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AgencyQualifierCode = obj_
            obj_.original_tagname_ = 'AgencyQualifierCode'
        elif nodeName_ == 'ProductDescriptionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescriptionCode = obj_
            obj_.original_tagname_ = 'ProductDescriptionCode'
        elif nodeName_ == 'ProductDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ProductDescription = obj_
            obj_.original_tagname_ = 'ProductDescription'
        elif nodeName_ == 'SurfaceLayerPositionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SurfaceLayerPositionCode = obj_
            obj_.original_tagname_ = 'SurfaceLayerPositionCode'
        elif nodeName_ == 'SourceSubqualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.SourceSubqualifier = obj_
            obj_.original_tagname_ = 'SourceSubqualifier'
        elif nodeName_ == 'YesOrNoResponse':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.YesOrNoResponse = obj_
            obj_.original_tagname_ = 'YesOrNoResponse'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
# end class ProductOrItemDescriptionType271


class CommodityType272(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CommodityCodeQualifier=None, CommodityCode=None):
        self.original_tagname_ = None
        self.CommodityCodeQualifier = CommodityCodeQualifier
        self.CommodityCode = CommodityCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType272)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType272.subclass:
            return CommodityType272.subclass(*args_, **kwargs_)
        else:
            return CommodityType272(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CommodityCodeQualifier(self): return self.CommodityCodeQualifier
    def set_CommodityCodeQualifier(self, CommodityCodeQualifier): self.CommodityCodeQualifier = CommodityCodeQualifier
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def hasContent_(self):
        if (
            self.CommodityCodeQualifier is not None or
            self.CommodityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CommodityType272', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommodityType272')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CommodityType272', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommodityType272'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommodityType272', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityCodeQualifier is not None:
            self.CommodityCodeQualifier.export(outfile, level, namespace_, name_='CommodityCodeQualifier', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            self.CommodityCode.export(outfile, level, namespace_, name_='CommodityCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CommodityCodeQualifier':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCodeQualifier = obj_
            obj_.original_tagname_ = 'CommodityCodeQualifier'
        elif nodeName_ == 'CommodityCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.CommodityCode = obj_
            obj_.original_tagname_ = 'CommodityCode'
# end class CommodityType272


class TaxType273(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType273)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType273.subclass:
            return TaxType273.subclass(*args_, **kwargs_)
        else:
            return TaxType273(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType273', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType273')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType273', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType273'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType273', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType273


class ChargesAllowancesType274(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllowChrgIndicator=None, AllowChrgCode=None, AllowChrgAgencyCode=None, AllowChrgAgency=None, AllowChrgAmt=None, AllowChrgPercentQual=None, AllowChrgPercent=None, PercentDollarBasis=None, AllowChrgRate=None, AllowChrgQtyUOM=None, AllowChrgQty=None, AllowChrgHandlingCode=None, ReferenceIdentification=None, AllowChrgHandlingDescription=None, OptionNumber=None, ExceptionNumber=None, AllowChrgQty2=None, LanguageCode=None, Tax=None):
        self.original_tagname_ = None
        self.AllowChrgIndicator = AllowChrgIndicator
        self.AllowChrgCode = AllowChrgCode
        self.AllowChrgAgencyCode = AllowChrgAgencyCode
        self.AllowChrgAgency = AllowChrgAgency
        self.AllowChrgAmt = AllowChrgAmt
        self.AllowChrgPercentQual = AllowChrgPercentQual
        self.AllowChrgPercent = AllowChrgPercent
        self.PercentDollarBasis = PercentDollarBasis
        self.AllowChrgRate = AllowChrgRate
        self.AllowChrgQtyUOM = AllowChrgQtyUOM
        self.AllowChrgQty = AllowChrgQty
        self.AllowChrgHandlingCode = AllowChrgHandlingCode
        self.ReferenceIdentification = ReferenceIdentification
        self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
        self.OptionNumber = OptionNumber
        self.ExceptionNumber = ExceptionNumber
        self.AllowChrgQty2 = AllowChrgQty2
        self.LanguageCode = LanguageCode
        self.Tax = Tax
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChargesAllowancesType274)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChargesAllowancesType274.subclass:
            return ChargesAllowancesType274.subclass(*args_, **kwargs_)
        else:
            return ChargesAllowancesType274(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowChrgIndicator(self): return self.AllowChrgIndicator
    def set_AllowChrgIndicator(self, AllowChrgIndicator): self.AllowChrgIndicator = AllowChrgIndicator
    def get_AllowChrgCode(self): return self.AllowChrgCode
    def set_AllowChrgCode(self, AllowChrgCode): self.AllowChrgCode = AllowChrgCode
    def get_AllowChrgAgencyCode(self): return self.AllowChrgAgencyCode
    def set_AllowChrgAgencyCode(self, AllowChrgAgencyCode): self.AllowChrgAgencyCode = AllowChrgAgencyCode
    def get_AllowChrgAgency(self): return self.AllowChrgAgency
    def set_AllowChrgAgency(self, AllowChrgAgency): self.AllowChrgAgency = AllowChrgAgency
    def get_AllowChrgAmt(self): return self.AllowChrgAmt
    def set_AllowChrgAmt(self, AllowChrgAmt): self.AllowChrgAmt = AllowChrgAmt
    def get_AllowChrgPercentQual(self): return self.AllowChrgPercentQual
    def set_AllowChrgPercentQual(self, AllowChrgPercentQual): self.AllowChrgPercentQual = AllowChrgPercentQual
    def get_AllowChrgPercent(self): return self.AllowChrgPercent
    def set_AllowChrgPercent(self, AllowChrgPercent): self.AllowChrgPercent = AllowChrgPercent
    def get_PercentDollarBasis(self): return self.PercentDollarBasis
    def set_PercentDollarBasis(self, PercentDollarBasis): self.PercentDollarBasis = PercentDollarBasis
    def get_AllowChrgRate(self): return self.AllowChrgRate
    def set_AllowChrgRate(self, AllowChrgRate): self.AllowChrgRate = AllowChrgRate
    def get_AllowChrgQtyUOM(self): return self.AllowChrgQtyUOM
    def set_AllowChrgQtyUOM(self, AllowChrgQtyUOM): self.AllowChrgQtyUOM = AllowChrgQtyUOM
    def get_AllowChrgQty(self): return self.AllowChrgQty
    def set_AllowChrgQty(self, AllowChrgQty): self.AllowChrgQty = AllowChrgQty
    def get_AllowChrgHandlingCode(self): return self.AllowChrgHandlingCode
    def set_AllowChrgHandlingCode(self, AllowChrgHandlingCode): self.AllowChrgHandlingCode = AllowChrgHandlingCode
    def get_ReferenceIdentification(self): return self.ReferenceIdentification
    def set_ReferenceIdentification(self, ReferenceIdentification): self.ReferenceIdentification = ReferenceIdentification
    def get_AllowChrgHandlingDescription(self): return self.AllowChrgHandlingDescription
    def set_AllowChrgHandlingDescription(self, AllowChrgHandlingDescription): self.AllowChrgHandlingDescription = AllowChrgHandlingDescription
    def get_OptionNumber(self): return self.OptionNumber
    def set_OptionNumber(self, OptionNumber): self.OptionNumber = OptionNumber
    def get_ExceptionNumber(self): return self.ExceptionNumber
    def set_ExceptionNumber(self, ExceptionNumber): self.ExceptionNumber = ExceptionNumber
    def get_AllowChrgQty2(self): return self.AllowChrgQty2
    def set_AllowChrgQty2(self, AllowChrgQty2): self.AllowChrgQty2 = AllowChrgQty2
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_Tax(self): return self.Tax
    def set_Tax(self, Tax): self.Tax = Tax
    def hasContent_(self):
        if (
            self.AllowChrgIndicator is not None or
            self.AllowChrgCode is not None or
            self.AllowChrgAgencyCode is not None or
            self.AllowChrgAgency is not None or
            self.AllowChrgAmt is not None or
            self.AllowChrgPercentQual is not None or
            self.AllowChrgPercent is not None or
            self.PercentDollarBasis is not None or
            self.AllowChrgRate is not None or
            self.AllowChrgQtyUOM is not None or
            self.AllowChrgQty is not None or
            self.AllowChrgHandlingCode is not None or
            self.ReferenceIdentification is not None or
            self.AllowChrgHandlingDescription is not None or
            self.OptionNumber is not None or
            self.ExceptionNumber is not None or
            self.AllowChrgQty2 is not None or
            self.LanguageCode is not None or
            self.Tax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChargesAllowancesType274', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesAllowancesType274')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChargesAllowancesType274', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesAllowancesType274'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesAllowancesType274', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowChrgIndicator is not None:
            self.AllowChrgIndicator.export(outfile, level, namespace_, name_='AllowChrgIndicator', pretty_print=pretty_print)
        if self.AllowChrgCode is not None:
            self.AllowChrgCode.export(outfile, level, namespace_, name_='AllowChrgCode', pretty_print=pretty_print)
        if self.AllowChrgAgencyCode is not None:
            self.AllowChrgAgencyCode.export(outfile, level, namespace_, name_='AllowChrgAgencyCode', pretty_print=pretty_print)
        if self.AllowChrgAgency is not None:
            self.AllowChrgAgency.export(outfile, level, namespace_, name_='AllowChrgAgency', pretty_print=pretty_print)
        if self.AllowChrgAmt is not None:
            self.AllowChrgAmt.export(outfile, level, namespace_, name_='AllowChrgAmt', pretty_print=pretty_print)
        if self.AllowChrgPercentQual is not None:
            self.AllowChrgPercentQual.export(outfile, level, namespace_, name_='AllowChrgPercentQual', pretty_print=pretty_print)
        if self.AllowChrgPercent is not None:
            self.AllowChrgPercent.export(outfile, level, namespace_, name_='AllowChrgPercent', pretty_print=pretty_print)
        if self.PercentDollarBasis is not None:
            self.PercentDollarBasis.export(outfile, level, namespace_, name_='PercentDollarBasis', pretty_print=pretty_print)
        if self.AllowChrgRate is not None:
            self.AllowChrgRate.export(outfile, level, namespace_, name_='AllowChrgRate', pretty_print=pretty_print)
        if self.AllowChrgQtyUOM is not None:
            self.AllowChrgQtyUOM.export(outfile, level, namespace_, name_='AllowChrgQtyUOM', pretty_print=pretty_print)
        if self.AllowChrgQty is not None:
            self.AllowChrgQty.export(outfile, level, namespace_, name_='AllowChrgQty', pretty_print=pretty_print)
        if self.AllowChrgHandlingCode is not None:
            self.AllowChrgHandlingCode.export(outfile, level, namespace_, name_='AllowChrgHandlingCode', pretty_print=pretty_print)
        if self.ReferenceIdentification is not None:
            self.ReferenceIdentification.export(outfile, level, namespace_, name_='ReferenceIdentification', pretty_print=pretty_print)
        if self.AllowChrgHandlingDescription is not None:
            self.AllowChrgHandlingDescription.export(outfile, level, namespace_, name_='AllowChrgHandlingDescription', pretty_print=pretty_print)
        if self.OptionNumber is not None:
            self.OptionNumber.export(outfile, level, namespace_, name_='OptionNumber', pretty_print=pretty_print)
        if self.ExceptionNumber is not None:
            self.ExceptionNumber.export(outfile, level, namespace_, name_='ExceptionNumber', pretty_print=pretty_print)
        if self.AllowChrgQty2 is not None:
            self.AllowChrgQty2.export(outfile, level, namespace_, name_='AllowChrgQty2', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.Tax is not None:
            self.Tax.export(outfile, level, namespace_, name_='Tax', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowChrgIndicator':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgIndicator = obj_
            obj_.original_tagname_ = 'AllowChrgIndicator'
        elif nodeName_ == 'AllowChrgCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgCode = obj_
            obj_.original_tagname_ = 'AllowChrgCode'
        elif nodeName_ == 'AllowChrgAgencyCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgencyCode = obj_
            obj_.original_tagname_ = 'AllowChrgAgencyCode'
        elif nodeName_ == 'AllowChrgAgency':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAgency = obj_
            obj_.original_tagname_ = 'AllowChrgAgency'
        elif nodeName_ == 'AllowChrgAmt':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgAmt = obj_
            obj_.original_tagname_ = 'AllowChrgAmt'
        elif nodeName_ == 'AllowChrgPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercentQual = obj_
            obj_.original_tagname_ = 'AllowChrgPercentQual'
        elif nodeName_ == 'AllowChrgPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgPercent = obj_
            obj_.original_tagname_ = 'AllowChrgPercent'
        elif nodeName_ == 'PercentDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PercentDollarBasis = obj_
            obj_.original_tagname_ = 'PercentDollarBasis'
        elif nodeName_ == 'AllowChrgRate':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgRate = obj_
            obj_.original_tagname_ = 'AllowChrgRate'
        elif nodeName_ == 'AllowChrgQtyUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQtyUOM = obj_
            obj_.original_tagname_ = 'AllowChrgQtyUOM'
        elif nodeName_ == 'AllowChrgQty':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty = obj_
            obj_.original_tagname_ = 'AllowChrgQty'
        elif nodeName_ == 'AllowChrgHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingCode = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingCode'
        elif nodeName_ == 'ReferenceIdentification':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceIdentification = obj_
            obj_.original_tagname_ = 'ReferenceIdentification'
        elif nodeName_ == 'AllowChrgHandlingDescription':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgHandlingDescription = obj_
            obj_.original_tagname_ = 'AllowChrgHandlingDescription'
        elif nodeName_ == 'OptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.OptionNumber = obj_
            obj_.original_tagname_ = 'OptionNumber'
        elif nodeName_ == 'ExceptionNumber':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ExceptionNumber = obj_
            obj_.original_tagname_ = 'ExceptionNumber'
        elif nodeName_ == 'AllowChrgQty2':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AllowChrgQty2 = obj_
            obj_.original_tagname_ = 'AllowChrgQty2'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'Tax':
            obj_ = TaxType275.factory()
            obj_.build(child_)
            self.Tax = obj_
            obj_.original_tagname_ = 'Tax'
# end class ChargesAllowancesType274


class TaxType275(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TaxTypeCode=None, TaxAmount=None, TaxPercentQual=None, TaxPercent=None, JurisdictionQual=None, JurisdictionCode=None, TaxExemptCode=None, RelationshipCode=None, PctDollarBasis=None, TaxHandlingCode=None, TaxID=None, AssignedID=None, Description=None):
        self.original_tagname_ = None
        self.TaxTypeCode = TaxTypeCode
        self.TaxAmount = TaxAmount
        self.TaxPercentQual = TaxPercentQual
        self.TaxPercent = TaxPercent
        self.JurisdictionQual = JurisdictionQual
        self.JurisdictionCode = JurisdictionCode
        self.TaxExemptCode = TaxExemptCode
        self.RelationshipCode = RelationshipCode
        self.PctDollarBasis = PctDollarBasis
        self.TaxHandlingCode = TaxHandlingCode
        self.TaxID = TaxID
        self.AssignedID = AssignedID
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxType275)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxType275.subclass:
            return TaxType275.subclass(*args_, **kwargs_)
        else:
            return TaxType275(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TaxTypeCode(self): return self.TaxTypeCode
    def set_TaxTypeCode(self, TaxTypeCode): self.TaxTypeCode = TaxTypeCode
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_TaxPercentQual(self): return self.TaxPercentQual
    def set_TaxPercentQual(self, TaxPercentQual): self.TaxPercentQual = TaxPercentQual
    def get_TaxPercent(self): return self.TaxPercent
    def set_TaxPercent(self, TaxPercent): self.TaxPercent = TaxPercent
    def get_JurisdictionQual(self): return self.JurisdictionQual
    def set_JurisdictionQual(self, JurisdictionQual): self.JurisdictionQual = JurisdictionQual
    def get_JurisdictionCode(self): return self.JurisdictionCode
    def set_JurisdictionCode(self, JurisdictionCode): self.JurisdictionCode = JurisdictionCode
    def get_TaxExemptCode(self): return self.TaxExemptCode
    def set_TaxExemptCode(self, TaxExemptCode): self.TaxExemptCode = TaxExemptCode
    def get_RelationshipCode(self): return self.RelationshipCode
    def set_RelationshipCode(self, RelationshipCode): self.RelationshipCode = RelationshipCode
    def get_PctDollarBasis(self): return self.PctDollarBasis
    def set_PctDollarBasis(self, PctDollarBasis): self.PctDollarBasis = PctDollarBasis
    def get_TaxHandlingCode(self): return self.TaxHandlingCode
    def set_TaxHandlingCode(self, TaxHandlingCode): self.TaxHandlingCode = TaxHandlingCode
    def get_TaxID(self): return self.TaxID
    def set_TaxID(self, TaxID): self.TaxID = TaxID
    def get_AssignedID(self): return self.AssignedID
    def set_AssignedID(self, AssignedID): self.AssignedID = AssignedID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.TaxTypeCode is not None or
            self.TaxAmount is not None or
            self.TaxPercentQual is not None or
            self.TaxPercent is not None or
            self.JurisdictionQual is not None or
            self.JurisdictionCode is not None or
            self.TaxExemptCode is not None or
            self.RelationshipCode is not None or
            self.PctDollarBasis is not None or
            self.TaxHandlingCode is not None or
            self.TaxID is not None or
            self.AssignedID is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TaxType275', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxType275')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TaxType275', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxType275'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxType275', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxTypeCode is not None:
            self.TaxTypeCode.export(outfile, level, namespace_, name_='TaxTypeCode', pretty_print=pretty_print)
        if self.TaxAmount is not None:
            self.TaxAmount.export(outfile, level, namespace_, name_='TaxAmount', pretty_print=pretty_print)
        if self.TaxPercentQual is not None:
            self.TaxPercentQual.export(outfile, level, namespace_, name_='TaxPercentQual', pretty_print=pretty_print)
        if self.TaxPercent is not None:
            self.TaxPercent.export(outfile, level, namespace_, name_='TaxPercent', pretty_print=pretty_print)
        if self.JurisdictionQual is not None:
            self.JurisdictionQual.export(outfile, level, namespace_, name_='JurisdictionQual', pretty_print=pretty_print)
        if self.JurisdictionCode is not None:
            self.JurisdictionCode.export(outfile, level, namespace_, name_='JurisdictionCode', pretty_print=pretty_print)
        if self.TaxExemptCode is not None:
            self.TaxExemptCode.export(outfile, level, namespace_, name_='TaxExemptCode', pretty_print=pretty_print)
        if self.RelationshipCode is not None:
            self.RelationshipCode.export(outfile, level, namespace_, name_='RelationshipCode', pretty_print=pretty_print)
        if self.PctDollarBasis is not None:
            self.PctDollarBasis.export(outfile, level, namespace_, name_='PctDollarBasis', pretty_print=pretty_print)
        if self.TaxHandlingCode is not None:
            self.TaxHandlingCode.export(outfile, level, namespace_, name_='TaxHandlingCode', pretty_print=pretty_print)
        if self.TaxID is not None:
            self.TaxID.export(outfile, level, namespace_, name_='TaxID', pretty_print=pretty_print)
        if self.AssignedID is not None:
            self.AssignedID.export(outfile, level, namespace_, name_='AssignedID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TaxTypeCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxTypeCode = obj_
            obj_.original_tagname_ = 'TaxTypeCode'
        elif nodeName_ == 'TaxAmount':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxAmount = obj_
            obj_.original_tagname_ = 'TaxAmount'
        elif nodeName_ == 'TaxPercentQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercentQual = obj_
            obj_.original_tagname_ = 'TaxPercentQual'
        elif nodeName_ == 'TaxPercent':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxPercent = obj_
            obj_.original_tagname_ = 'TaxPercent'
        elif nodeName_ == 'JurisdictionQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionQual = obj_
            obj_.original_tagname_ = 'JurisdictionQual'
        elif nodeName_ == 'JurisdictionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.JurisdictionCode = obj_
            obj_.original_tagname_ = 'JurisdictionCode'
        elif nodeName_ == 'TaxExemptCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxExemptCode = obj_
            obj_.original_tagname_ = 'TaxExemptCode'
        elif nodeName_ == 'RelationshipCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.RelationshipCode = obj_
            obj_.original_tagname_ = 'RelationshipCode'
        elif nodeName_ == 'PctDollarBasis':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PctDollarBasis = obj_
            obj_.original_tagname_ = 'PctDollarBasis'
        elif nodeName_ == 'TaxHandlingCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxHandlingCode = obj_
            obj_.original_tagname_ = 'TaxHandlingCode'
        elif nodeName_ == 'TaxID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'AssignedID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.AssignedID = obj_
            obj_.original_tagname_ = 'AssignedID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
# end class TaxType275


class ItemLoadInfoType276(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemLoad=None, Reference=None, Notes=None):
        self.original_tagname_ = None
        self.ItemLoad = ItemLoad
        self.Reference = Reference
        self.Notes = Notes
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadInfoType276)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadInfoType276.subclass:
            return ItemLoadInfoType276.subclass(*args_, **kwargs_)
        else:
            return ItemLoadInfoType276(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemLoad(self): return self.ItemLoad
    def set_ItemLoad(self, ItemLoad): self.ItemLoad = ItemLoad
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def hasContent_(self):
        if (
            self.ItemLoad is not None or
            self.Reference is not None or
            self.Notes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadInfoType276', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadInfoType276')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadInfoType276', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadInfoType276'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadInfoType276', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemLoad is not None:
            self.ItemLoad.export(outfile, level, namespace_, name_='ItemLoad', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_, name_='Reference', pretty_print=pretty_print)
        if self.Notes is not None:
            self.Notes.export(outfile, level, namespace_, name_='Notes', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemLoad':
            obj_ = ItemLoadType277.factory()
            obj_.build(child_)
            self.ItemLoad = obj_
            obj_.original_tagname_ = 'ItemLoad'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType278.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Notes':
            obj_ = NotesType280.factory()
            obj_.build(child_)
            self.Notes = obj_
            obj_.original_tagname_ = 'Notes'
# end class ItemLoadInfoType276


class ItemLoadType277(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumberOfLoads=None, UnitsShipped=None, PackingMedium=None, PackingMaterial=None, LoadSize=None, LoadSizeUOM=None):
        self.original_tagname_ = None
        self.NumberOfLoads = NumberOfLoads
        self.UnitsShipped = UnitsShipped
        self.PackingMedium = PackingMedium
        self.PackingMaterial = PackingMaterial
        self.LoadSize = LoadSize
        self.LoadSizeUOM = LoadSizeUOM
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemLoadType277)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemLoadType277.subclass:
            return ItemLoadType277.subclass(*args_, **kwargs_)
        else:
            return ItemLoadType277(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NumberOfLoads(self): return self.NumberOfLoads
    def set_NumberOfLoads(self, NumberOfLoads): self.NumberOfLoads = NumberOfLoads
    def get_UnitsShipped(self): return self.UnitsShipped
    def set_UnitsShipped(self, UnitsShipped): self.UnitsShipped = UnitsShipped
    def get_PackingMedium(self): return self.PackingMedium
    def set_PackingMedium(self, PackingMedium): self.PackingMedium = PackingMedium
    def get_PackingMaterial(self): return self.PackingMaterial
    def set_PackingMaterial(self, PackingMaterial): self.PackingMaterial = PackingMaterial
    def get_LoadSize(self): return self.LoadSize
    def set_LoadSize(self, LoadSize): self.LoadSize = LoadSize
    def get_LoadSizeUOM(self): return self.LoadSizeUOM
    def set_LoadSizeUOM(self, LoadSizeUOM): self.LoadSizeUOM = LoadSizeUOM
    def hasContent_(self):
        if (
            self.NumberOfLoads is not None or
            self.UnitsShipped is not None or
            self.PackingMedium is not None or
            self.PackingMaterial is not None or
            self.LoadSize is not None or
            self.LoadSizeUOM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ItemLoadType277', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemLoadType277')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ItemLoadType277', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemLoadType277'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemLoadType277', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfLoads is not None:
            self.NumberOfLoads.export(outfile, level, namespace_, name_='NumberOfLoads', pretty_print=pretty_print)
        if self.UnitsShipped is not None:
            self.UnitsShipped.export(outfile, level, namespace_, name_='UnitsShipped', pretty_print=pretty_print)
        if self.PackingMedium is not None:
            self.PackingMedium.export(outfile, level, namespace_, name_='PackingMedium', pretty_print=pretty_print)
        if self.PackingMaterial is not None:
            self.PackingMaterial.export(outfile, level, namespace_, name_='PackingMaterial', pretty_print=pretty_print)
        if self.LoadSize is not None:
            self.LoadSize.export(outfile, level, namespace_, name_='LoadSize', pretty_print=pretty_print)
        if self.LoadSizeUOM is not None:
            self.LoadSizeUOM.export(outfile, level, namespace_, name_='LoadSizeUOM', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumberOfLoads':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NumberOfLoads = obj_
            obj_.original_tagname_ = 'NumberOfLoads'
        elif nodeName_ == 'UnitsShipped':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.UnitsShipped = obj_
            obj_.original_tagname_ = 'UnitsShipped'
        elif nodeName_ == 'PackingMedium':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMedium = obj_
            obj_.original_tagname_ = 'PackingMedium'
        elif nodeName_ == 'PackingMaterial':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.PackingMaterial = obj_
            obj_.original_tagname_ = 'PackingMaterial'
        elif nodeName_ == 'LoadSize':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSize = obj_
            obj_.original_tagname_ = 'LoadSize'
        elif nodeName_ == 'LoadSizeUOM':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LoadSizeUOM = obj_
            obj_.original_tagname_ = 'LoadSizeUOM'
# end class ItemLoadType277


class ReferenceType278(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None, Description=None, Date1=None, Time1=None, ReferenceIDs=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
        self.Description = Description
        self.Date1 = Date1
        self.Time1 = Time1
        self.ReferenceIDs = ReferenceIDs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType278)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType278.subclass:
            return ReferenceType278.subclass(*args_, **kwargs_)
        else:
            return ReferenceType278(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date1(self): return self.Date1
    def set_Date1(self, Date1): self.Date1 = Date1
    def get_Time1(self): return self.Time1
    def set_Time1(self, Time1): self.Time1 = Time1
    def get_ReferenceIDs(self): return self.ReferenceIDs
    def set_ReferenceIDs(self, ReferenceIDs): self.ReferenceIDs = ReferenceIDs
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None or
            self.Description is not None or
            self.Date1 is not None or
            self.Time1 is not None or
            self.ReferenceIDs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType278', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType278')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType278', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType278'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType278', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
        if self.Description is not None:
            self.Description.export(outfile, level, namespace_, name_='Description', pretty_print=pretty_print)
        if self.Date1 is not None:
            self.Date1.export(outfile, level, namespace_, name_='Date1', pretty_print=pretty_print)
        if self.Time1 is not None:
            self.Time1.export(outfile, level, namespace_, name_='Time1', pretty_print=pretty_print)
        if self.ReferenceIDs is not None:
            self.ReferenceIDs.export(outfile, level, namespace_, name_='ReferenceIDs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
        elif nodeName_ == 'Description':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Date1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Date1 = obj_
            obj_.original_tagname_ = 'Date1'
        elif nodeName_ == 'Time1':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.Time1 = obj_
            obj_.original_tagname_ = 'Time1'
        elif nodeName_ == 'ReferenceIDs':
            obj_ = ReferenceIDsType279.factory()
            obj_.build(child_)
            self.ReferenceIDs = obj_
            obj_.original_tagname_ = 'ReferenceIDs'
# end class ReferenceType278


class ReferenceIDsType279(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceQual=None, ReferenceID=None):
        self.original_tagname_ = None
        self.ReferenceQual = ReferenceQual
        self.ReferenceID = ReferenceID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceIDsType279)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceIDsType279.subclass:
            return ReferenceIDsType279.subclass(*args_, **kwargs_)
        else:
            return ReferenceIDsType279(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceQual(self): return self.ReferenceQual
    def set_ReferenceQual(self, ReferenceQual): self.ReferenceQual = ReferenceQual
    def get_ReferenceID(self): return self.ReferenceID
    def set_ReferenceID(self, ReferenceID): self.ReferenceID = ReferenceID
    def hasContent_(self):
        if (
            self.ReferenceQual is not None or
            self.ReferenceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceIDsType279', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceIDsType279')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceIDsType279', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceIDsType279'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceIDsType279', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceQual is not None:
            self.ReferenceQual.export(outfile, level, namespace_, name_='ReferenceQual', pretty_print=pretty_print)
        if self.ReferenceID is not None:
            self.ReferenceID.export(outfile, level, namespace_, name_='ReferenceID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceQual':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceQual = obj_
            obj_.original_tagname_ = 'ReferenceQual'
        elif nodeName_ == 'ReferenceID':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.ReferenceID = obj_
            obj_.original_tagname_ = 'ReferenceID'
# end class ReferenceIDsType279


class NotesType280(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteCode=None, NoteInformationField=None, LanguageCode=None, NoteFormatCode=None, NoteFunctionCode=None):
        self.original_tagname_ = None
        self.NoteCode = NoteCode
        self.NoteInformationField = NoteInformationField
        self.LanguageCode = LanguageCode
        self.NoteFormatCode = NoteFormatCode
        self.NoteFunctionCode = NoteFunctionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotesType280)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotesType280.subclass:
            return NotesType280.subclass(*args_, **kwargs_)
        else:
            return NotesType280(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteCode(self): return self.NoteCode
    def set_NoteCode(self, NoteCode): self.NoteCode = NoteCode
    def get_NoteInformationField(self): return self.NoteInformationField
    def set_NoteInformationField(self, NoteInformationField): self.NoteInformationField = NoteInformationField
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NoteFormatCode(self): return self.NoteFormatCode
    def set_NoteFormatCode(self, NoteFormatCode): self.NoteFormatCode = NoteFormatCode
    def get_NoteFunctionCode(self): return self.NoteFunctionCode
    def set_NoteFunctionCode(self, NoteFunctionCode): self.NoteFunctionCode = NoteFunctionCode
    def hasContent_(self):
        if (
            self.NoteCode is not None or
            self.NoteInformationField is not None or
            self.LanguageCode is not None or
            self.NoteFormatCode is not None or
            self.NoteFunctionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NotesType280', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotesType280')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NotesType280', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NotesType280'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NotesType280', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteCode is not None:
            self.NoteCode.export(outfile, level, namespace_, name_='NoteCode', pretty_print=pretty_print)
        if self.NoteInformationField is not None:
            self.NoteInformationField.export(outfile, level, namespace_, name_='NoteInformationField', pretty_print=pretty_print)
        if self.LanguageCode is not None:
            self.LanguageCode.export(outfile, level, namespace_, name_='LanguageCode', pretty_print=pretty_print)
        if self.NoteFormatCode is not None:
            self.NoteFormatCode.export(outfile, level, namespace_, name_='NoteFormatCode', pretty_print=pretty_print)
        if self.NoteFunctionCode is not None:
            self.NoteFunctionCode.export(outfile, level, namespace_, name_='NoteFunctionCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteCode = obj_
            obj_.original_tagname_ = 'NoteCode'
        elif nodeName_ == 'NoteInformationField':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteInformationField = obj_
            obj_.original_tagname_ = 'NoteInformationField'
        elif nodeName_ == 'LanguageCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.LanguageCode = obj_
            obj_.original_tagname_ = 'LanguageCode'
        elif nodeName_ == 'NoteFormatCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFormatCode = obj_
            obj_.original_tagname_ = 'NoteFormatCode'
        elif nodeName_ == 'NoteFunctionCode':
            obj_ = attributes_string.factory()
            obj_.build(child_)
            self.NoteFunctionCode = obj_
            obj_.original_tagname_ = 'NoteFunctionCode'
# end class NotesType280


GDSClassesMapping = {
    'ASNStructureCode': attributes_string,
    'AdditionalContactDetails': AdditionalContactDetailsType263,
    'Address': AddressType246,
    'Address1': attributes_string,
    'Address2': attributes_string,
    'Address3': attributes_string,
    'Address4': attributes_string,
    'AddressAlternateName': attributes_string,
    'AddressAlternateName2': attributes_string,
    'AddressLocationNumber': attributes_string,
    'AddressName': attributes_string,
    'AddressTaxExemptNumber': attributes_string,
    'AddressTaxIdNumber': attributes_string,
    'AddressTypeCode': attributes_string,
    'AgencyQualifierCode': attributes_string,
    'AllowChrgAgency': attributes_string,
    'AllowChrgAgencyCode': attributes_string,
    'AllowChrgAmt': attributes_string,
    'AllowChrgCode': attributes_string,
    'AllowChrgHandlingCode': attributes_string,
    'AllowChrgHandlingDescription': attributes_string,
    'AllowChrgIndicator': attributes_string,
    'AllowChrgPercent': attributes_string,
    'AllowChrgPercentQual': attributes_string,
    'AllowChrgQty': attributes_string,
    'AllowChrgQty2': attributes_string,
    'AllowChrgQtyUOM': attributes_string,
    'AllowChrgRate': attributes_string,
    'ApplicationId': attributes_string,
    'AppointmentNumber': attributes_string,
    'AssignedID': attributes_string,
    'BatchID': attributes_string,
    'BatchPart': attributes_string,
    'BatchTotal': attributes_string,
    'BillOfLadingNumber': attributes_string,
    'BuyerPartNumber': attributes_string,
    'BuyersCurrency': attributes_string,
    'CarrierAlphaCode': attributes_string,
    'CarrierEquipmentInitial': attributes_string,
    'CarrierEquipmentNumber': attributes_string,
    'CarrierInformation': CarrierInformationType145,
    'CarrierPackageID': attributes_string,
    'CarrierProNumber': attributes_string,
    'CarrierRouting': attributes_string,
    'CarrierSpecialHandlingDetail': CarrierSpecialHandlingDetailType144,
    'CarrierTransMethodCode': attributes_string,
    'ChangeReasonCode': attributes_string,
    'ChargesAllowances': ChargesAllowancesType175,
    'City': attributes_string,
    'Class': attributes_string,
    'ClassOfTradeCode': attributes_string,
    'ColorCategoryName': attributes_string,
    'ColorPrimaryDescription': attributes_string,
    'Comments': attributes_string,
    'Commodity': CommodityType272,
    'CommodityCode': attributes_string,
    'CommodityCodeQualifier': attributes_string,
    'CompositeUOM': attributes_string,
    'ConditionValue': attributes_string,
    'ConsumerPackageCode': attributes_string,
    'Contact': ContactType262,
    'ContactID': attributes_string,
    'ContactName': attributes_string,
    'ContactQual': attributes_string,
    'ContactReference': attributes_string,
    'ContactTypeCode': attributes_string,
    'Container': ContainerType,
    'Country': attributes_string,
    'CountrySubDivision': attributes_string,
    'Currency': attributes_string,
    'CurrentScheduledDeliveryDate': attributes_string,
    'CurrentScheduledDeliveryTime': attributes_string,
    'CurrentScheduledShipDate': attributes_string,
    'CurrentScheduledShipTime': attributes_string,
    'CustomerAccountNumber': attributes_string,
    'CustomerOrderNumber': attributes_string,
    'Date': DateType264,
    'Date1': attributes_string,
    'DateTimePeriod': attributes_string,
    'DateTimeQualifier1': attributes_string,
    'DeliveryDate': attributes_string,
    'DeliveryTime': attributes_string,
    'Department': attributes_string,
    'DepartmentDescription': attributes_string,
    'DepositorOrderNumber': attributes_string,
    'Description': attributes_string,
    'Division': attributes_string,
    'DocumentControlIdentifier': attributes_string,
    'DocumentControlNumber': attributes_string,
    'DocumentRevision': attributes_string,
    'DocumentVersion': attributes_string,
    'EAN': attributes_string,
    'EffectiveDate': attributes_string,
    'EquipmentDescriptionCode': attributes_string,
    'EquipmentType': attributes_string,
    'ExceptionNumber': attributes_string,
    'ExchangeRate': attributes_string,
    'FOBLocationDescription': attributes_string,
    'FOBLocationQualifier': attributes_string,
    'FOBPayCode': attributes_string,
    'FOBRelatedInstruction': FOBRelatedInstructionType,
    'FOBTitlePassageCode': attributes_string,
    'FOBTitlePassageLocation': attributes_string,
    'FairLaborCompliant': attributes_string,
    'GTIN': attributes_string,
    'GroupControlIdentifier': attributes_string,
    'GroupControlNumber': attributes_string,
    'GroupReceiverID': attributes_string,
    'GroupSenderID': attributes_string,
    'HazardousMaterialClass': attributes_string,
    'HazardousMaterialCode': attributes_string,
    'Header': HeaderType,
    'Height': attributes_string,
    'IndustryCode': attributes_string,
    'IndustryCodeQualifier': attributes_string,
    'InterchangeControlNumber': attributes_string,
    'InterchangeReceiverID': attributes_string,
    'InterchangeSenderID': attributes_string,
    'InternalOrderDate': attributes_string,
    'InternalOrderNumber': attributes_string,
    'InternationalStandardBookNumber': attributes_string,
    'InvoiceDate': attributes_string,
    'InvoiceNumber': attributes_string,
    'IsDropShip': attributes_string,
    'ItemAttribute': ItemAttributeType252,
    'ItemAttributeQualifier': attributes_string,
    'ItemDescriptionType': attributes_string,
    'ItemLevel': ItemLevelType96,
    'ItemLoad': ItemLoadType277,
    'ItemLoadInfo': ItemLoadInfoType177,
    'ItemStatusCode': attributes_string,
    'JobNumber': attributes_string,
    'JurisdictionCode': attributes_string,
    'JurisdictionQual': attributes_string,
    'LadingDescription': attributes_string,
    'LadingQuantity': attributes_string,
    'LanguageCode': attributes_string,
    'Length': attributes_string,
    'LineSequenceNumber': attributes_string,
    'LoadSize': attributes_string,
    'LoadSizeUOM': attributes_string,
    'LocationCodeQualifier': attributes_string,
    'LocationID': attributes_string,
    'MarksAndNumbers1': attributes_string,
    'MarksAndNumbersCollection': MarksAndNumbersCollectionType76,
    'MarksAndNumbersQualifier1': attributes_string,
    'MasterItemAttribute': MasterItemAttributeType152,
    'MeasurementAttributeCode': attributes_string,
    'MeasurementQualifier': attributes_string,
    'MeasurementRefIDCode': attributes_string,
    'MeasurementSignificanceCode': attributes_string,
    'MeasurementValue': attributes_string,
    'Measurements': MeasurementsType253,
    'Meta': MetaType,
    'MultiplePriceQuantity': attributes_string,
    'NRFColorCode': attributes_string,
    'NRFSizeCode': attributes_string,
    'NRFStandardColorAndSize': NRFStandardColorAndSizeType269,
    'NatlDrugCode': attributes_string,
    'NoteCode': attributes_string,
    'NoteFormatCode': attributes_string,
    'NoteFunctionCode': attributes_string,
    'NoteInformationField': attributes_string,
    'Notes': NotesType280,
    'NumberOfLoads': attributes_string,
    'OptionNumber': attributes_string,
    'OrderHeader': OrderHeaderType,
    'OrderLevel': OrderLevelType,
    'OrderManagement': attributes_string,
    'OrderQty': attributes_string,
    'OrderQtyUOM': attributes_string,
    'OwnershipCode': attributes_string,
    'Pack': PackType74,
    'PackDimensionUOM': attributes_string,
    'PackHeight': attributes_string,
    'PackLength': attributes_string,
    'PackLevel': PackLevelType73,
    'PackLevelType': attributes_string,
    'PackQualifier': attributes_string,
    'PackSize': attributes_string,
    'PackUOM': attributes_string,
    'PackValue': attributes_string,
    'PackVolume': attributes_string,
    'PackVolumeUOM': attributes_string,
    'PackWeight': attributes_string,
    'PackWeightUOM': attributes_string,
    'PackWidth': attributes_string,
    'Packaging': PackagingType95,
    'PackagingCharacteristicCode': attributes_string,
    'PackagingDescription': attributes_string,
    'PackagingDescriptionCode': attributes_string,
    'PackingMaterial': attributes_string,
    'PackingMedium': attributes_string,
    'PalletBlocks': attributes_string,
    'PalletExchangeCode': attributes_string,
    'PalletInformation': PalletInformationType77,
    'PalletQualifier': attributes_string,
    'PalletStructureCode': attributes_string,
    'PalletTiers': attributes_string,
    'PalletTypeCode': attributes_string,
    'PalletValue': attributes_string,
    'PalletVolume': attributes_string,
    'PalletVolumeUOM': attributes_string,
    'PalletWeight': attributes_string,
    'PalletWeightUOM': attributes_string,
    'PartNumber': attributes_string,
    'PartNumberQual': attributes_string,
    'PctDollarBasis': attributes_string,
    'PercentDollarBasis': attributes_string,
    'PhysicalDetails': PhysicalDetailsType143,
    'PickupNumber': attributes_string,
    'PostalCode': attributes_string,
    'PriceInformation': PriceInformationType270,
    'PriceMultiplier': attributes_string,
    'PriceMultiplierQual': attributes_string,
    'PriceTypeIDCode': attributes_string,
    'PrimaryEmail': attributes_string,
    'PrimaryFax': attributes_string,
    'PrimaryPhone': attributes_string,
    'ProductCharacteristicCode': attributes_string,
    'ProductColorCode': attributes_string,
    'ProductColorDescription': attributes_string,
    'ProductDescription': attributes_string,
    'ProductDescriptionCode': attributes_string,
    'ProductID': ProductIDType268,
    'ProductMaterialCode': attributes_string,
    'ProductMaterialDescription': attributes_string,
    'ProductOrItemDescription': ProductOrItemDescriptionType271,
    'ProductProcessCode': attributes_string,
    'ProductProcessDescription': attributes_string,
    'ProductSizeCode': attributes_string,
    'ProductSizeDescription': attributes_string,
    'PromotionDealDescription': attributes_string,
    'PromotionDealNumber': attributes_string,
    'PurchaseOrderDate': attributes_string,
    'PurchaseOrderNumber': attributes_string,
    'PurchasePrice': attributes_string,
    'PurchasePriceBasis': attributes_string,
    'PurchasePriceType': attributes_string,
    'QtyLeftToReceive': attributes_string,
    'QtyPer': attributes_string,
    'QtyPerUOM': attributes_string,
    'Quantity': attributes_string,
    'QuantityAndWeight': QuantityAndWeightType9,
    'QuantityUOM': attributes_string,
    'RangeMaximum': attributes_string,
    'RangeMinimum': attributes_string,
    'RebateAmount': attributes_string,
    'ReceiverCompanyName': attributes_string,
    'ReceiverUniqueID': attributes_string,
    'Reference': ReferenceType278,
    'ReferenceID': attributes_string,
    'ReferenceIDs': ReferenceIDsType279,
    'ReferenceIdentification': attributes_string,
    'ReferenceQual': attributes_string,
    'RelationshipCode': attributes_string,
    'ReleaseNumber': attributes_string,
    'RequestedPickupDate': attributes_string,
    'RequestedPickupTime': attributes_string,
    'RiskOfLossCode': attributes_string,
    'RoutingSequenceCode': attributes_string,
    'ScheduledShipDate': attributes_string,
    'ScheduledShipTime': attributes_string,
    'SealNumber': attributes_string,
    'SealStatusCode': attributes_string,
    'SellerDateCode': attributes_string,
    'SellersCurrency': attributes_string,
    'SenderCompanyName': attributes_string,
    'SenderUniqueID': attributes_string,
    'ServiceLevelCode': attributes_string,
    'ServiceLevelCodes': ServiceLevelCodesType245,
    'ShipDate': attributes_string,
    'ShipNoticeDate': attributes_string,
    'ShipNoticeTime': attributes_string,
    'ShipQty': attributes_string,
    'ShipQtyUOM': attributes_string,
    'ShipmentHeader': ShipmentHeaderType,
    'ShipmentIdentification': attributes_string,
    'ShipmentLine': ShipmentLineType140,
    'ShipmentTime': attributes_string,
    'ShippingSerialID': attributes_string,
    'SizeCategoryName': attributes_string,
    'SizeHeading1': attributes_string,
    'SizeHeading2': attributes_string,
    'SizeHeading3': attributes_string,
    'SizeHeading4': attributes_string,
    'SizePrimaryDescription': attributes_string,
    'SizeSecondaryDescription': attributes_string,
    'SizeTableName': attributes_string,
    'SourceSubqualifier': attributes_string,
    'SpecialHandlingCode': attributes_string,
    'State': attributes_string,
    'StatusCode': attributes_string,
    'StatusReasonCode': attributes_string,
    'Subline': SublineType266,
    'SublineItemDetail': SublineItemDetailType267,
    'Sublines': SublinesType166,
    'Summary': SummaryType,
    'SurfaceLayerPositionCode': attributes_string,
    'Tax': TaxType275,
    'TaxAmount': attributes_string,
    'TaxExemptCode': attributes_string,
    'TaxHandlingCode': attributes_string,
    'TaxID': attributes_string,
    'TaxPercent': attributes_string,
    'TaxPercentQual': attributes_string,
    'TaxTypeCode': attributes_string,
    'Time1': attributes_string,
    'TotalLineItems': attributes_string,
    'TotalOrders': attributes_string,
    'TotalQuantity': attributes_string,
    'TotalWeight': attributes_string,
    'TradingPartnerId': attributes_string,
    'TransitDirectionCode': attributes_string,
    'TransitTime': attributes_string,
    'TransitTimeQual': attributes_string,
    'TransportationTermsCode': attributes_string,
    'TransportationTermsQualifierCode': attributes_string,
    'TsetPurposeCode': attributes_string,
    'TsetTypeCode': attributes_string,
    'UPCCaseCode': attributes_string,
    'UnitLoadOptionCode': attributes_string,
    'UnitOfMeasure': attributes_string,
    'UnitPrice': attributes_string,
    'UnitPriceBasis': attributes_string,
    'UnitWeight': attributes_string,
    'UnitWeightUOM': attributes_string,
    'UnitsShipped': attributes_string,
    'Validation': attributes_string,
    'Value': attributes_string,
    'ValueUOM': attributes_string,
    'Vendor': attributes_string,
    'VendorPartNumber': attributes_string,
    'Version': attributes_string,
    'Volume': attributes_string,
    'VolumeUOM': attributes_string,
    'Weight': attributes_string,
    'WeightQualifier': attributes_string,
    'WeightUOM': attributes_string,
    'Width': attributes_string,
    'YesOrNoResponse': attributes_string,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Shipments'
        rootClass = Shipments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Shipments'
        rootClass = Shipments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Shipments'
        rootClass = Shipments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Shipments'
        rootClass = Shipments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from Shipments import *\n\n')
        sys.stdout.write('import Shipments as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AdditionalContactDetailsType",
    "AdditionalContactDetailsType121",
    "AdditionalContactDetailsType164",
    "AdditionalContactDetailsType195",
    "AdditionalContactDetailsType211",
    "AdditionalContactDetailsType22",
    "AdditionalContactDetailsType229",
    "AdditionalContactDetailsType263",
    "AdditionalContactDetailsType35",
    "AdditionalContactDetailsType4",
    "AdditionalContactDetailsType60",
    "AdditionalContactDetailsType86",
    "AddressType",
    "AddressType104",
    "AddressType117",
    "AddressType12",
    "AddressType147",
    "AddressType160",
    "AddressType18",
    "AddressType189",
    "AddressType191",
    "AddressType201",
    "AddressType207",
    "AddressType225",
    "AddressType236",
    "AddressType246",
    "AddressType259",
    "AddressType31",
    "AddressType42",
    "AddressType48",
    "AddressType56",
    "AddressType6",
    "AddressType82",
    "AddressType93",
    "CarrierInformationType",
    "CarrierInformationType10",
    "CarrierInformationType102",
    "CarrierInformationType145",
    "CarrierInformationType187",
    "CarrierInformationType199",
    "CarrierInformationType234",
    "CarrierInformationType244",
    "CarrierInformationType40",
    "CarrierInformationType46",
    "CarrierInformationType91",
    "CarrierSpecialHandlingDetailType",
    "CarrierSpecialHandlingDetailType101",
    "CarrierSpecialHandlingDetailType144",
    "CarrierSpecialHandlingDetailType243",
    "CarrierSpecialHandlingDetailType45",
    "ChargesAllowancesType",
    "ChargesAllowancesType132",
    "ChargesAllowancesType175",
    "ChargesAllowancesType214",
    "ChargesAllowancesType232",
    "ChargesAllowancesType25",
    "ChargesAllowancesType274",
    "ChargesAllowancesType38",
    "ChargesAllowancesType68",
    "ChargesAllowancesType89",
    "CommodityType",
    "CommodityType116",
    "CommodityType130",
    "CommodityType159",
    "CommodityType173",
    "CommodityType216",
    "CommodityType258",
    "CommodityType272",
    "CommodityType55",
    "CommodityType66",
    "ContactType",
    "ContactType120",
    "ContactType163",
    "ContactType194",
    "ContactType21",
    "ContactType210",
    "ContactType228",
    "ContactType262",
    "ContactType3",
    "ContactType34",
    "ContactType59",
    "ContactType85",
    "ContainerLevel",
    "ContainerType",
    "DateType",
    "DateType105",
    "DateType112",
    "DateType122",
    "DateType13",
    "DateType14",
    "DateType148",
    "DateType155",
    "DateType165",
    "DateType182",
    "DateType190",
    "DateType196",
    "DateType202",
    "DateType203",
    "DateType212",
    "DateType221",
    "DateType23",
    "DateType230",
    "DateType237",
    "DateType247",
    "DateType254",
    "DateType264",
    "DateType27",
    "DateType36",
    "DateType43",
    "DateType49",
    "DateType5",
    "DateType51",
    "DateType61",
    "DateType7",
    "DateType78",
    "DateType87",
    "DateType94",
    "FOBRelatedInstructionType",
    "HeaderType",
    "ItemAttributeType",
    "ItemAttributeType110",
    "ItemAttributeType153",
    "ItemAttributeType252",
    "ItemLevel",
    "ItemLevelType",
    "ItemLevelType139",
    "ItemLevelType96",
    "ItemLoadInfoType",
    "ItemLoadInfoType134",
    "ItemLoadInfoType177",
    "ItemLoadInfoType276",
    "ItemLoadType",
    "ItemLoadType135",
    "ItemLoadType178",
    "ItemLoadType277",
    "MarksAndNumbersCollectionType",
    "MarksAndNumbersCollectionType219",
    "MarksAndNumbersCollectionType76",
    "MasterItemAttributeType",
    "MasterItemAttributeType109",
    "MasterItemAttributeType152",
    "MasterItemAttributeType251",
    "MeasurementsType",
    "MeasurementsType106",
    "MeasurementsType111",
    "MeasurementsType149",
    "MeasurementsType154",
    "MeasurementsType248",
    "MeasurementsType253",
    "MeasurementsType50",
    "MetaType",
    "NRFStandardColorAndSizeType",
    "NRFStandardColorAndSizeType127",
    "NRFStandardColorAndSizeType142",
    "NRFStandardColorAndSizeType170",
    "NRFStandardColorAndSizeType241",
    "NRFStandardColorAndSizeType269",
    "NRFStandardColorAndSizeType63",
    "NRFStandardColorAndSizeType99",
    "NotesType",
    "NotesType115",
    "NotesType138",
    "NotesType158",
    "NotesType17",
    "NotesType181",
    "NotesType185",
    "NotesType206",
    "NotesType224",
    "NotesType257",
    "NotesType280",
    "NotesType30",
    "NotesType54",
    "NotesType72",
    "NotesType81",
    "OrderHeaderType",
    "OrderHeaderType197",
    "OrderLevel",
    "OrderLevelType",
    "PackLevel",
    "PackLevelType",
    "PackLevelType73",
    "PackType",
    "PackType217",
    "PackType74",
    "PackagingType",
    "PackagingType238",
    "PackagingType95",
    "PalletInformationType",
    "PalletInformationType220",
    "PalletInformationType77",
    "PhysicalDetailsType",
    "PhysicalDetailsType100",
    "PhysicalDetailsType143",
    "PhysicalDetailsType218",
    "PhysicalDetailsType242",
    "PhysicalDetailsType44",
    "PhysicalDetailsType75",
    "PriceInformationType",
    "PriceInformationType107",
    "PriceInformationType128",
    "PriceInformationType150",
    "PriceInformationType171",
    "PriceInformationType249",
    "PriceInformationType270",
    "PriceInformationType64",
    "ProductIDType",
    "ProductIDType126",
    "ProductIDType141",
    "ProductIDType169",
    "ProductIDType240",
    "ProductIDType268",
    "ProductIDType62",
    "ProductIDType98",
    "ProductOrItemDescriptionType",
    "ProductOrItemDescriptionType108",
    "ProductOrItemDescriptionType129",
    "ProductOrItemDescriptionType151",
    "ProductOrItemDescriptionType172",
    "ProductOrItemDescriptionType250",
    "ProductOrItemDescriptionType271",
    "ProductOrItemDescriptionType65",
    "QuantityAndWeightType",
    "QuantityAndWeightType186",
    "QuantityAndWeightType198",
    "QuantityAndWeightType9",
    "ReferenceIDsType",
    "ReferenceIDsType114",
    "ReferenceIDsType119",
    "ReferenceIDsType137",
    "ReferenceIDsType157",
    "ReferenceIDsType16",
    "ReferenceIDsType162",
    "ReferenceIDsType180",
    "ReferenceIDsType184",
    "ReferenceIDsType193",
    "ReferenceIDsType2",
    "ReferenceIDsType20",
    "ReferenceIDsType205",
    "ReferenceIDsType209",
    "ReferenceIDsType223",
    "ReferenceIDsType227",
    "ReferenceIDsType256",
    "ReferenceIDsType261",
    "ReferenceIDsType279",
    "ReferenceIDsType29",
    "ReferenceIDsType33",
    "ReferenceIDsType53",
    "ReferenceIDsType58",
    "ReferenceIDsType71",
    "ReferenceIDsType80",
    "ReferenceIDsType84",
    "ReferenceType",
    "ReferenceType1",
    "ReferenceType113",
    "ReferenceType118",
    "ReferenceType136",
    "ReferenceType15",
    "ReferenceType156",
    "ReferenceType161",
    "ReferenceType179",
    "ReferenceType183",
    "ReferenceType19",
    "ReferenceType192",
    "ReferenceType204",
    "ReferenceType208",
    "ReferenceType222",
    "ReferenceType226",
    "ReferenceType255",
    "ReferenceType260",
    "ReferenceType278",
    "ReferenceType28",
    "ReferenceType32",
    "ReferenceType52",
    "ReferenceType57",
    "ReferenceType70",
    "ReferenceType79",
    "ReferenceType83",
    "ServiceLevelCodesType",
    "ServiceLevelCodesType103",
    "ServiceLevelCodesType11",
    "ServiceLevelCodesType146",
    "ServiceLevelCodesType188",
    "ServiceLevelCodesType200",
    "ServiceLevelCodesType235",
    "ServiceLevelCodesType245",
    "ServiceLevelCodesType41",
    "ServiceLevelCodesType47",
    "ServiceLevelCodesType92",
    "Shipment",
    "ShipmentHeaderType",
    "ShipmentLineType",
    "ShipmentLineType140",
    "ShipmentLineType239",
    "ShipmentLineType97",
    "Shipments",
    "SublineItemDetailType",
    "SublineItemDetailType125",
    "SublineItemDetailType168",
    "SublineItemDetailType267",
    "SublineType",
    "SublineType124",
    "SublineType167",
    "SublineType266",
    "SublinesType",
    "SublinesType123",
    "SublinesType166",
    "SublinesType265",
    "SummaryType",
    "TaxType",
    "TaxType131",
    "TaxType133",
    "TaxType174",
    "TaxType176",
    "TaxType213",
    "TaxType215",
    "TaxType231",
    "TaxType233",
    "TaxType24",
    "TaxType26",
    "TaxType273",
    "TaxType275",
    "TaxType37",
    "TaxType39",
    "TaxType67",
    "TaxType69",
    "TaxType8",
    "TaxType88",
    "TaxType90",
    "attributes_string"
]
