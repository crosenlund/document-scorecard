var _ = require('lodash');
var angular = require('angular');

/**
 * Decorator for the UI-Router ui-sref directive.
 *
 * This allows us to modify the HREF property that is generated by the
 * UI-Router and prefix it with the Commerce Platform host URL. By doing
 * this, all links generated by ui-sref in an application can be opened
 * in new tabs and will automatically open inside Commerce Platform.
 *
 * @owner Commerce Platform
 **/

angular.module('ui.router').config(UiSrefDecorator);

UiSrefDecorator.$inject = ['$provide'];

function UiSrefDecorator($provide) {

    $provide.decorator('uiSrefDirective', UiSrefDecoratorDirective);

    UiSrefDecoratorDirective.$inject = ['$delegate', '$controller', 'commercePlatform'];

    function UiSrefDecoratorDirective($delegate, $controller, commercePlatform) {

        var directive = $delegate[0];
        var link = directive.link;

        directive.compile = function () {

            return function ($scope, $element) {

                // Watch the ui-sref element for changes in it's HREF
                // attribute - indicating that the original ui-sref has
                // generated the HREF that we will then modify.

                var unwatch = $scope.$watch(function () {

                    return $element.attr('href');

                }, function (href) {

                    // If the app is not using html5mode, then the href
                    // will include a hashbang. We'll trim it off.

                    href = _.trimLeft(href, '#');

                    // Get the current app URL from the platformService
                    // and use that to generate a new HREF attribute for
                    // our links.

                    commercePlatform.getAppURL().then(function (appURL) {
                        $scope.$applyAsync(function () {
                            $element.attr('href', appURL + href);
                        });
                    });

                    unwatch(); // stop watching the element for HREF changes
                });

                // Execute the original directive link method

                if (_.isFunction(link)) { link.apply(this, arguments); }
            };
        };

        return $delegate;
    }
}
