// We use this mixin to build off of the button mixin and add dropdown button styles
@mixin dropdown-button($padding: medium, $pip-color: $dropdown-button-pip-color, $base-style: true) {

  &:hover {
    color: $orange;
  }

  &:focus {
    color: $brand-blue;
  }

  &::after {
    position: absolute;
    content: "";
    width: 0;
    height: 0;
    display: block;
    border-style: solid;
    border-color: $dropdown-button-pip-color transparent transparent transparent;
    top: 50%;
  }

  // If we're dealing with tiny buttons, use these styles
  @if $padding == tiny {
    &.nopip {
      padding-#{$opposite-direction}: $button-tny;
      &:after {
        display: none;
      }
    }
  }

  // If we're dealing with small buttons, use these styles
  @if $padding == small {
    &.nopip {
      padding-#{$opposite-direction}: $button-sml;
      &:after {
        display: none;
      }
    }
  }

  // If we're dealing with default (medium) buttons, use these styles
  @if $padding == medium {
    &.nopip {
      padding-#{$opposite-direction}: $button-med;
      &:after {
        display: none;
      }
    }
  }

  // If we're dealing with large buttons, use these styles
  @if $padding == large {
    &.nopip {
      padding-#{$opposite-direction}: $button-lrg;
      &:after {
        display: none;
      }
    }
  }

  // We can control the pip color. We didn't use logic in this case, just set it and forget it.
  @if $pip-color {
    &:after {
      border-color: $pip-color transparent transparent transparent;
    }
  }
}

@if $include-html-button-classes {

  /* Dropdown Button */
  .dropdown.button, button.dropdown {
    @include dropdown-button;
    &.tiny {
      @include dropdown-button(tiny, $base-style: true);
    }
    &.small {
      @include dropdown-button(small, $base-style: true);
    }
    &.large {
      @include dropdown-button(large, $base-style: true);
    }
    &.secondary:after {
      border-color: $dropdown-button-pip-color-alt transparent transparent transparent;
    }
  }
}

